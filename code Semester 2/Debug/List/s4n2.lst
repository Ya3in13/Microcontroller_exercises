
AVRASM ver. 2.1.30  C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm Tue May 20 21:52:59 2025

C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1095): warning: Register r4 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n2.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _STMO=R5
                 	.DEF _nam=R6
                 	.DEF _nam_msb=R7
                 	.DEF _mnha=R8
                 	.DEF _mnha_msb=R9
                 	.DEF _mean=R10
                 	.DEF _mean_msb=R11
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R13
                 	.DEF __lcd_maxx=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 007b 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000      	.DB  0x0,0x0
                 
                 _0x0:
000034 3154
000035 253d
000036 322d
000037 5464      	.DB  0x54,0x31,0x3D,0x25,0x2D,0x32,0x64,0x54
000038 3d32
000039 2d25
00003a 6432
00003b 6c74      	.DB  0x32,0x3D,0x25,0x2D,0x32,0x64,0x74,0x6C
00003c 253d
00003d 322d
00003e 6d64
00003f 3d65      	.DB  0x3D,0x25,0x2D,0x32,0x64,0x6D,0x65,0x3D
000040 2d25
000041 6432
000042 5400
000043 253d      	.DB  0x25,0x2D,0x32,0x64,0x0,0x54,0x3D,0x25
000044 352d
000045 0064      	.DB  0x2D,0x35,0x64,0x0
                 _0x2000003:
000046 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000047 0002      	.DW  0x02
000048 0006      	.DW  0x06
000049 0066      	.DW  __REG_VARS*2
                 
00004a 0002      	.DW  0x02
00004b 0180      	.DW  __base_y_G100
00004c 008c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bffb      	OUT  GICR,R31
000053 bfeb      	OUT  GICR,R30
000054 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005e 93ed      	ST   X+,R30
00005f 9701      	SBIW R24,1
000060 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000061 e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000062 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000063 9185      	LPM  R24,Z+
000064 9195      	LPM  R25,Z+
000065 9700      	SBIW R24,0
000066 f061      	BREQ __GLOBAL_INI_END
000067 91a5      	LPM  R26,Z+
000068 91b5      	LPM  R27,Z+
000069 9005      	LPM  R0,Z+
00006a 9015      	LPM  R1,Z+
00006b 01bf      	MOVW R22,R30
00006c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006d 9005      	LPM  R0,Z+
00006e 920d      	ST   X+,R0
00006f 9701      	SBIW R24,1
000070 f7e1      	BRNE __GLOBAL_INI_LOOP
000071 01fb      	MOVW R30,R22
000072 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 00a6 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;unsigned char line[20],STMO;
                 ;unsigned int temp[4],nam=0,mnha,mean;
                 ;unsigned long int T;
                 ;interrupt [ADC_INT] void adc_isr(void){
                 ; 0000 0009 interrupt [15] void adc_isr(void){
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
00007b 938a      	ST   -Y,R24
00007c 93aa      	ST   -Y,R26
00007d 93ba      	ST   -Y,R27
00007e 93ea      	ST   -Y,R30
00007f 93fa      	ST   -Y,R31
000080 b7ef      	IN   R30,SREG
000081 93ea      	ST   -Y,R30
                 ; 0000 000A     temp[nam]=ADCW/2;
000082 01f3      	MOVW R30,R6
000083 e7a4      	LDI  R26,LOW(_temp)
000084 e0b1      	LDI  R27,HIGH(_temp)
000085 0fee      	LSL  R30
000086 1fff      	ROL  R31
000087 0fae      	ADD  R26,R30
000088 1fbf      	ADC  R27,R31
000089 b1e4      	IN   R30,0x4
00008a b1f5      	IN   R31,0x4+1
00008b 95f6      	LSR  R31
00008c 95e7      	ROR  R30
00008d 93ed      	ST   X+,R30
00008e 93fc      	ST   X,R31
                 ; 0000 000B     ADMUX=nam;
00008f b867      	OUT  0x7,R6
                 ; 0000 000C     delay_us(10);
                +
000090 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000091 958a     +DEC R24
000092 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 000D     ADCSRA|=(1<<ADSC);
000093 9a36      	SBI  0x6,6
                 ; 0000 000E     nam++;
000094 01f3      	MOVW R30,R6
000095 9631      	ADIW R30,1
000096 013f      	MOVW R6,R30
                 ; 0000 000F     if (nam>3){nam=0;}
000097 e0e3      	LDI  R30,LOW(3)
000098 e0f0      	LDI  R31,HIGH(3)
000099 15e6      	CP   R30,R6
00009a 05f7      	CPC  R31,R7
00009b f410      	BRSH _0x3
00009c 2466      	CLR  R6
00009d 2477      	CLR  R7
                 ; 0000 0010 }
                 _0x3:
00009e 91e9      	LD   R30,Y+
00009f bfef      	OUT  SREG,R30
0000a0 91f9      	LD   R31,Y+
0000a1 91e9      	LD   R30,Y+
0000a2 91b9      	LD   R27,Y+
0000a3 91a9      	LD   R26,Y+
0000a4 9189      	LD   R24,Y+
0000a5 9518      	RETI
                 ; .FEND
                 ;void main(void){
                 ; 0000 0011 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0012 {
                 ; 0000 0013 // Declare your local variables here
                 ; 0000 0014 
                 ; 0000 0015 // Input/Output Ports initialization
                 ; 0000 0016 // Port A initialization
                 ; 0000 0017 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0018 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 bbea      	OUT  0x1A,R30
                 ; 0000 0019 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000a8 e0ec      	LDI  R30,LOW(12)
0000a9 bbeb      	OUT  0x1B,R30
                 ; 0000 001B 
                 ; 0000 001C // Port B initialization
                 ; 0000 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000aa e0e0      	LDI  R30,LOW(0)
0000ab bbe7      	OUT  0x17,R30
                 ; 0000 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0020 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ac bbe8      	OUT  0x18,R30
                 ; 0000 0021 
                 ; 0000 0022 // Port C initialization
                 ; 0000 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0024 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000ad bbe4      	OUT  0x14,R30
                 ; 0000 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0026 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ae bbe5      	OUT  0x15,R30
                 ; 0000 0027 
                 ; 0000 0028 // Port D initialization
                 ; 0000 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002A DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000af efef      	LDI  R30,LOW(255)
0000b0 bbe1      	OUT  0x11,R30
                 ; 0000 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b1 e0ec      	LDI  R30,LOW(12)
0000b2 bbe2      	OUT  0x12,R30
                 ; 0000 002D 
                 ; 0000 002E // Timer/Counter 0 initialization
                 ; 0000 002F // Clock source: System Clock
                 ; 0000 0030 // Clock value: Timer 0 Stopped
                 ; 0000 0031 // Mode: Normal top=0xFF
                 ; 0000 0032 // OC0 output: Disconnected
                 ; 0000 0033 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 bfe3      	OUT  0x33,R30
                 ; 0000 0034 TCNT0=0x00;
0000b5 bfe2      	OUT  0x32,R30
                 ; 0000 0035 OCR0=0x00;
0000b6 bfec      	OUT  0x3C,R30
                 ; 0000 0036 
                 ; 0000 0037 // Timer/Counter 1 initialization
                 ; 0000 0038 // Clock source: System Clock
                 ; 0000 0039 // Clock value: Timer1 Stopped
                 ; 0000 003A // Mode: Normal top=0xFFFF
                 ; 0000 003B // OC1A output: Disconnected
                 ; 0000 003C // OC1B output: Disconnected
                 ; 0000 003D // Noise Canceler: Off
                 ; 0000 003E // Input Capture on Falling Edge
                 ; 0000 003F // Timer1 Overflow Interrupt: Off
                 ; 0000 0040 // Input Capture Interrupt: Off
                 ; 0000 0041 // Compare A Match Interrupt: Off
                 ; 0000 0042 // Compare B Match Interrupt: Off
                 ; 0000 0043 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b7 bdef      	OUT  0x2F,R30
                 ; 0000 0044 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b8 bdee      	OUT  0x2E,R30
                 ; 0000 0045 TCNT1H=0x00;
0000b9 bded      	OUT  0x2D,R30
                 ; 0000 0046 TCNT1L=0x00;
0000ba bdec      	OUT  0x2C,R30
                 ; 0000 0047 ICR1H=0x00;
0000bb bde7      	OUT  0x27,R30
                 ; 0000 0048 ICR1L=0x00;
0000bc bde6      	OUT  0x26,R30
                 ; 0000 0049 OCR1AH=0x00;
0000bd bdeb      	OUT  0x2B,R30
                 ; 0000 004A OCR1AL=0x00;
0000be bdea      	OUT  0x2A,R30
                 ; 0000 004B OCR1BH=0x00;
0000bf bde9      	OUT  0x29,R30
                 ; 0000 004C OCR1BL=0x00;
0000c0 bde8      	OUT  0x28,R30
                 ; 0000 004D 
                 ; 0000 004E // Timer/Counter 2 initialization
                 ; 0000 004F // Clock source: System Clock
                 ; 0000 0050 // Clock value: Timer2 Stopped
                 ; 0000 0051 // Mode: Normal top=0xFF
                 ; 0000 0052 // OC2 output: Disconnected
                 ; 0000 0053 ASSR=0<<AS2;
0000c1 bde2      	OUT  0x22,R30
                 ; 0000 0054 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000c2 bde5      	OUT  0x25,R30
                 ; 0000 0055 TCNT2=0x00;
0000c3 bde4      	OUT  0x24,R30
                 ; 0000 0056 OCR2=0x00;
0000c4 bde3      	OUT  0x23,R30
                 ; 0000 0057 
                 ; 0000 0058 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0059 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c5 bfe9      	OUT  0x39,R30
                 ; 0000 005A 
                 ; 0000 005B // External Interrupt(s) initialization
                 ; 0000 005C // INT0: Off
                 ; 0000 005D // INT1: Off
                 ; 0000 005E // INT2: Off
                 ; 0000 005F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c6 bfe5      	OUT  0x35,R30
                 ; 0000 0060 MCUCSR=(0<<ISC2);
0000c7 bfe4      	OUT  0x34,R30
                 ; 0000 0061 
                 ; 0000 0062 // USART initialization
                 ; 0000 0063 // USART disabled
                 ; 0000 0064 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c8 b9ea      	OUT  0xA,R30
                 ; 0000 0065 
                 ; 0000 0066 // Analog Comparator initialization
                 ; 0000 0067 // Analog Comparator: Off
                 ; 0000 0068 // The Analog Comparator's positive input is
                 ; 0000 0069 // connected to the AIN0 pin
                 ; 0000 006A // The Analog Comparator's negative input is
                 ; 0000 006B // connected to the AIN1 pin
                 ; 0000 006C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c9 e8e0      	LDI  R30,LOW(128)
0000ca b9e8      	OUT  0x8,R30
                 ; 0000 006D 
                 ; 0000 006E // ADC initialization
                 ; 0000 006F // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0070 // ADC Voltage Reference: AREF pin
                 ; 0000 0071 // ADC Auto Trigger Source: Free Running
                 ; 0000 0072 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000cb eeeb      	LDI  R30,LOW(235)
0000cc b9e6      	OUT  0x6,R30
                 ; 0000 0073 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe0      	OUT  0x30,R30
                 ; 0000 0074 
                 ; 0000 0075 // SPI initialization
                 ; 0000 0076 // SPI disabled
                 ; 0000 0077 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000cf b9ed      	OUT  0xD,R30
                 ; 0000 0078 
                 ; 0000 0079 // TWI initialization
                 ; 0000 007A // TWI disabled
                 ; 0000 007B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d0 bfe6      	OUT  0x36,R30
                 ; 0000 007C 
                 ; 0000 007D // Alphanumeric LCD initialization
                 ; 0000 007E // Connections are specified in the
                 ; 0000 007F // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0080 // RS - PORTC Bit 0
                 ; 0000 0081 // RD - PORTC Bit 1
                 ; 0000 0082 // EN - PORTC Bit 2
                 ; 0000 0083 // D4 - PORTC Bit 4
                 ; 0000 0084 // D5 - PORTC Bit 5
                 ; 0000 0085 // D6 - PORTC Bit 6
                 ; 0000 0086 // D7 - PORTC Bit 7
                 ; 0000 0087 // Characters/line: 16
                 ; 0000 0088 lcd_init(20);
0000d1 e1a4      	LDI  R26,LOW(20)
0000d2 d114      	RCALL _lcd_init
                 ; 0000 0089 
                 ; 0000 008A // Global enable interrupts
                 ; 0000 008B #asm("sei")     }
0000d3 9478      	sei
                 ; 0000 008C     while (1){
                 _0x4:
                 ; 0000 008D         if(temp[1]>temp[2]){mnha=temp[1]-temp[2];
0000d4 940e 03d6 	CALL SUBOPT_0x0
0000d6 17ea      	CP   R30,R26
0000d7 07fb      	CPC  R31,R27
0000d8 f418      	BRSH _0x7
0000d9 940e 03d6 	CALL SUBOPT_0x0
0000db c008      	RJMP _0x2B
                 ; 0000 008E            }else{mnha=temp[2]-temp[1];}
                 _0x7:
                +
0000dc 91a0 0178+LDS R26 , _temp + ( 4 )
0000de 91b0 0179+LDS R27 , _temp + ( 4 ) + 1
                 	__GETW2MN _temp,4
                +
0000e0 91e0 0176+LDS R30 , _temp + ( 2 )
0000e2 91f0 0177+LDS R31 , _temp + ( 2 ) + 1
                 	__GETW1MN _temp,2
                 _0x2B:
0000e4 1bae      	SUB  R26,R30
0000e5 0bbf      	SBC  R27,R31
0000e6 014d      	MOVW R8,R26
                 ; 0000 008F         mean=(temp[1]+temp[2])/2;
0000e7 940e 03d6 	CALL SUBOPT_0x0
0000e9 0fae      	ADD  R26,R30
0000ea 1fbf      	ADC  R27,R31
0000eb 01fd      	MOVW R30,R26
0000ec 95f6      	LSR  R31
0000ed 95e7      	ROR  R30
0000ee 015f      	MOVW R10,R30
                 ; 0000 0090         lcd_gotoxy(0,0);
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 93ea      	ST   -Y,R30
0000f1 e0a0      	LDI  R26,LOW(0)
0000f2 940e 03df 	CALL SUBOPT_0x1
                 ; 0000 0091         sprintf(line,"T1=%-2dT2=%-2dtl=%-2dme=%-2d",temp[1],temp[2],mnha,mean);
                +
0000f4 e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000f5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000f6 93fa      	ST   -Y,R31
0000f7 93ea      	ST   -Y,R30
                +
0000f8 91e0 0176+LDS R30 , _temp + ( 2 )
0000fa 91f0 0177+LDS R31 , _temp + ( 2 ) + 1
                 	__GETW1MN _temp,2
0000fc 940e 03e6 	CALL SUBOPT_0x2
                +
0000fe 91e0 0178+LDS R30 , _temp + ( 4 )
000100 91f0 0179+LDS R31 , _temp + ( 4 ) + 1
                 	__GETW1MN _temp,4
000102 940e 03e6 	CALL SUBOPT_0x2
000104 01f4      	MOVW R30,R8
000105 940e 03e6 	CALL SUBOPT_0x2
000107 01f5      	MOVW R30,R10
000108 940e 03e6 	CALL SUBOPT_0x2
00010a e180      	LDI  R24,16
00010b 940e 0389 	CALL _sprintf
00010d 9664      	ADIW R28,20
                 ; 0000 0092         lcd_puts(line);
00010e e6a0      	LDI  R26,LOW(_line)
00010f e0b1      	LDI  R27,HIGH(_line)
000110 d0c5      	RCALL _lcd_puts
                 ; 0000 0093         lcd_gotoxy(0,1);
000111 e0e0      	LDI  R30,LOW(0)
000112 93ea      	ST   -Y,R30
000113 e0a1      	LDI  R26,LOW(1)
000114 940e 03df 	CALL SUBOPT_0x1
                 ; 0000 0094         sprintf(line,"T=%-5d",T);
                +
000116 e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
000117 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
000118 93fa      	ST   -Y,R31
000119 93ea      	ST   -Y,R30
00011a 91e0 017c 	LDS  R30,_T
00011c 91f0 017d 	LDS  R31,_T+1
00011e 9160 017e 	LDS  R22,_T+2
000120 9170 017f 	LDS  R23,_T+3
000122 940e 0449 	CALL __PUTPARD1
000124 e084      	LDI  R24,4
000125 940e 0389 	CALL _sprintf
000127 9628      	ADIW R28,8
                 ; 0000 0095         lcd_puts(line);
000128 e6a0      	LDI  R26,LOW(_line)
000129 e0b1      	LDI  R27,HIGH(_line)
00012a d0ab      	RCALL _lcd_puts
                 ; 0000 0096         if(mean<38){PORTD.1=1;}
00012b e2e6      	LDI  R30,LOW(38)
00012c e0f0      	LDI  R31,HIGH(38)
00012d 16ae      	CP   R10,R30
00012e 06bf      	CPC  R11,R31
00012f f408      	BRSH _0x9
000130 9a91      	SBI  0x12,1
                 ; 0000 0097         if(mean>40){PORTD.1=0;}
                 _0x9:
000131 e2e8      	LDI  R30,LOW(40)
000132 e0f0      	LDI  R31,HIGH(40)
000133 15ea      	CP   R30,R10
000134 05fb      	CPC  R31,R11
000135 f408      	BRSH _0xC
000136 9891      	CBI  0x12,1
                 ; 0000 0098         if(mnha>3){PORTD.0=1;}
                 _0xC:
000137 e0e3      	LDI  R30,LOW(3)
000138 e0f0      	LDI  R31,HIGH(3)
000139 15e8      	CP   R30,R8
00013a 05f9      	CPC  R31,R9
00013b f408      	BRSH _0xF
00013c 9a90      	SBI  0x12,0
                 ; 0000 0099         if(mnha<2){PORTD.0=0;}
                 _0xF:
00013d e0e2      	LDI  R30,LOW(2)
00013e e0f0      	LDI  R31,HIGH(2)
00013f 168e      	CP   R8,R30
000140 069f      	CPC  R9,R31
000141 f408      	BRSH _0x12
000142 9890      	CBI  0x12,0
                 ; 0000 009A         delay_ms(10);
                 _0x12:
000143 e0aa      	LDI  R26,LOW(10)
000144 e0b0      	LDI  R27,0
000145 940e 0425 	CALL _delay_ms
                 ; 0000 009B         T++;
000147 e7ac      	LDI  R26,LOW(_T)
000148 e0b1      	LDI  R27,HIGH(_T)
000149 940e 043b 	CALL __GETD1P_INC
                +
00014b 5fef     +SUBI R30 , LOW ( - 1 )
00014c 4fff     +SBCI R31 , HIGH ( - 1 )
00014d 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00014e 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00014f 940e 0440 	CALL __PUTDP1_DEC
                 ; 0000 009C         if(T>360000){
000151 91a0 017c 	LDS  R26,_T
000153 91b0 017d 	LDS  R27,_T+1
000155 9180 017e 	LDS  R24,_T+2
000157 9190 017f 	LDS  R25,_T+3
                +
000159 34a1     +CPI R26 , LOW ( 0x57E41 )
00015a e7ee     +LDI R30 , HIGH ( 0x57E41 )
00015b 07be     +CPC R27 , R30
00015c e0e5     +LDI R30 , BYTE3 ( 0x57E41 )
00015d 078e     +CPC R24 , R30
00015e e0e0     +LDI R30 , BYTE4 ( 0x57E41 )
00015f 079e     +CPC R25 , R30
                 	__CPD2N 0x57E41
000160 f0a8      	BRLO _0x15
                 ; 0000 009D             T=0;
000161 e0e0      	LDI  R30,LOW(0)
000162 93e0 017c 	STS  _T,R30
000164 93e0 017d 	STS  _T+1,R30
000166 93e0 017e 	STS  _T+2,R30
000168 93e0 017f 	STS  _T+3,R30
                 ; 0000 009E             if(PINA.2==0){
00016a 99ca      	SBIC 0x19,2
00016b c004      	RJMP _0x16
                 ; 0000 009F                 PORTD.2=1;
00016c 9a92      	SBI  0x12,2
                 ; 0000 00A0                 PORTD.3=0;
00016d 9893      	CBI  0x12,3
                 ; 0000 00A1                 STMO=1;
00016e e0e1      	LDI  R30,LOW(1)
00016f 2e5e      	MOV  R5,R30
                 ; 0000 00A2             }
                 ; 0000 00A3             if(PINA.3==0){
                 _0x16:
000170 99cb      	SBIC 0x19,3
000171 c004      	RJMP _0x1B
                 ; 0000 00A4                 PORTD.2=0;
000172 9892      	CBI  0x12,2
                 ; 0000 00A5                 PORTD.3=1;
000173 9a93      	SBI  0x12,3
                 ; 0000 00A6                 STMO=2;
000174 e0e2      	LDI  R30,LOW(2)
000175 2e5e      	MOV  R5,R30
                 ; 0000 00A7             }
                 ; 0000 00A8         }
                 _0x1B:
                 ; 0000 00A9         if(STMO==1&&!PINA.3){PORTD.2=0;STMO=0;}
                 _0x15:
000176 e0e1      	LDI  R30,LOW(1)
000177 15e5      	CP   R30,R5
000178 f411      	BRNE _0x21
000179 9bcb      	SBIS 0x19,3
00017a c001      	RJMP _0x22
                 _0x21:
00017b c002      	RJMP _0x20
                 _0x22:
00017c 9892      	CBI  0x12,2
00017d 2455      	CLR  R5
                 ; 0000 00AA         if(STMO==2&&!PINA.2){PORTD.3=0;STMO=0;}
                 _0x20:
00017e e0e2      	LDI  R30,LOW(2)
00017f 15e5      	CP   R30,R5
000180 f411      	BRNE _0x26
000181 9bca      	SBIS 0x19,2
000182 c001      	RJMP _0x27
                 _0x26:
000183 c002      	RJMP _0x25
                 _0x27:
000184 9893      	CBI  0x12,3
000185 2455      	CLR  R5
                 ; 0000 00AB     }
                 _0x25:
000186 cf4d      	RJMP _0x4
                 ; 0000 00AC }
                 _0x2A:
000187 cfff      	RJMP _0x2A
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000188 93aa      	ST   -Y,R26
000189 b3e5      	IN   R30,0x15
00018a 70ef      	ANDI R30,LOW(0xF)
00018b 2fae      	MOV  R26,R30
00018c 81e8      	LD   R30,Y
00018d 7fe0      	ANDI R30,LOW(0xF0)
00018e 2bea      	OR   R30,R26
00018f bbe5      	OUT  0x15,R30
                +
000190 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000191 958a     +DEC R24
000192 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000193 9aaa      	SBI  0x15,2
                +
000194 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000195 958a     +DEC R24
000196 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000197 98aa      	CBI  0x15,2
                +
000198 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000199 958a     +DEC R24
00019a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00019b c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00019c 93aa      	ST   -Y,R26
00019d 81a8      	LD   R26,Y
00019e dfe9      	RCALL __lcd_write_nibble_G100
00019f 81e8          ld    r30,y
0001a0 95e2          swap  r30
0001a1 83e8          st    y,r30
0001a2 81a8      	LD   R26,Y
0001a3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0001a4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0001a7 c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001a8 93aa      	ST   -Y,R26
0001a9 81e8      	LD   R30,Y
0001aa e0f0      	LDI  R31,0
0001ab 58e0      	SUBI R30,LOW(-__base_y_G100)
0001ac 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001ad 81e0      	LD   R30,Z
0001ae 81a9      	LDD  R26,Y+1
0001af 0fae      	ADD  R26,R30
0001b0 dfeb      	RCALL __lcd_write_data
0001b1 8049      	LDD  R4,Y+1
0001b2 80d8      	LDD  R13,Y+0
0001b3 9622      	ADIW R28,2
0001b4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b5 e0a2      	LDI  R26,LOW(2)
0001b6 940e 03eb 	CALL SUBOPT_0x3
0001b8 e0ac      	LDI  R26,LOW(12)
0001b9 dfe2      	RCALL __lcd_write_data
0001ba e0a1      	LDI  R26,LOW(1)
0001bb 940e 03eb 	CALL SUBOPT_0x3
0001bd e0e0      	LDI  R30,LOW(0)
0001be 2ede      	MOV  R13,R30
0001bf 2e4e      	MOV  R4,R30
0001c0 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001c1 93aa      	ST   -Y,R26
0001c2 81a8      	LD   R26,Y
0001c3 30aa      	CPI  R26,LOW(0xA)
0001c4 f011      	BREQ _0x2000005
0001c5 144c      	CP   R4,R12
0001c6 f048      	BRLO _0x2000004
                 _0x2000005:
0001c7 e0e0      	LDI  R30,LOW(0)
0001c8 93ea      	ST   -Y,R30
0001c9 94d3      	INC  R13
0001ca 2dad      	MOV  R26,R13
0001cb dfdc      	RCALL _lcd_gotoxy
0001cc 81a8      	LD   R26,Y
0001cd 30aa      	CPI  R26,LOW(0xA)
0001ce f409      	BRNE _0x2000007
0001cf c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001d0 9443      	INC  R4
0001d1 9aa8      	SBI  0x15,0
0001d2 81a8      	LD   R26,Y
0001d3 dfc8      	RCALL __lcd_write_data
0001d4 98a8      	CBI  0x15,0
0001d5 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001d6 93ba      	ST   -Y,R27
0001d7 93aa      	ST   -Y,R26
0001d8 931a      	ST   -Y,R17
                 _0x2000008:
0001d9 81a9      	LDD  R26,Y+1
0001da 81ba      	LDD  R27,Y+1+1
0001db 91ed      	LD   R30,X+
0001dc 83a9      	STD  Y+1,R26
0001dd 83ba      	STD  Y+1+1,R27
0001de 2f1e      	MOV  R17,R30
0001df 30e0      	CPI  R30,0
0001e0 f019      	BREQ _0x200000A
0001e1 2fa1      	MOV  R26,R17
0001e2 dfde      	RCALL _lcd_putchar
0001e3 cff5      	RJMP _0x2000008
                 _0x200000A:
0001e4 8118      	LDD  R17,Y+0
0001e5 9623      	ADIW R28,3
0001e6 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001e7 93aa      	ST   -Y,R26
0001e8 b3e4      	IN   R30,0x14
0001e9 6fe0      	ORI  R30,LOW(0xF0)
0001ea bbe4      	OUT  0x14,R30
0001eb 9aa2      	SBI  0x14,2
0001ec 9aa0      	SBI  0x14,0
0001ed 9aa1      	SBI  0x14,1
0001ee 98aa      	CBI  0x15,2
0001ef 98a8      	CBI  0x15,0
0001f0 98a9      	CBI  0x15,1
0001f1 80c8      	LDD  R12,Y+0
0001f2 81e8      	LD   R30,Y
0001f3 58e0      	SUBI R30,-LOW(128)
                +
0001f4 93e0 0182+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001f6 81e8      	LD   R30,Y
0001f7 54e0      	SUBI R30,-LOW(192)
                +
0001f8 93e0 0183+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001fa e1a4      	LDI  R26,LOW(20)
0001fb e0b0      	LDI  R27,0
0001fc 940e 0425 	CALL _delay_ms
0001fe 940e 03f1 	CALL SUBOPT_0x4
000200 940e 03f1 	CALL SUBOPT_0x4
000202 940e 03f1 	CALL SUBOPT_0x4
000204 e2a0      	LDI  R26,LOW(32)
000205 df82      	RCALL __lcd_write_nibble_G100
                +
000206 ec88     +LDI R24 , LOW ( 200 )
000207 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000208 9701     +SBIW R24 , 1
000209 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00020a e2a8      	LDI  R26,LOW(40)
00020b df90      	RCALL __lcd_write_data
00020c e0a4      	LDI  R26,LOW(4)
00020d df8e      	RCALL __lcd_write_data
00020e e8a5      	LDI  R26,LOW(133)
00020f df8c      	RCALL __lcd_write_data
000210 e0a6      	LDI  R26,LOW(6)
000211 df8a      	RCALL __lcd_write_data
000212 dfa2      	RCALL _lcd_clear
                 _0x2080002:
000213 9621      	ADIW R28,1
000214 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000215 93ba      	ST   -Y,R27
000216 93aa      	ST   -Y,R26
000217 931a      	ST   -Y,R17
000218 930a      	ST   -Y,R16
000219 81aa      	LDD  R26,Y+2
00021a 81bb      	LDD  R27,Y+2+1
00021b 9612      	ADIW R26,2
00021c 940e 0437 	CALL __GETW1P
00021e 9730      	SBIW R30,0
00021f f159      	BREQ _0x2020010
000220 81aa      	LDD  R26,Y+2
000221 81bb      	LDD  R27,Y+2+1
000222 9614      	ADIW R26,4
000223 940e 0437 	CALL __GETW1P
000225 018f      	MOVW R16,R30
000226 9730      	SBIW R30,0
000227 f061      	BREQ _0x2020012
                +
000228 3002     +CPI R16 , LOW ( 2 )
000229 e0e0     +LDI R30 , HIGH ( 2 )
00022a 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00022b f098      	BRLO _0x2020013
00022c 01f8      	MOVW R30,R16
00022d 9731      	SBIW R30,1
00022e 018f      	MOVW R16,R30
                +
00022f 81aa     +LDD R26 , Y + 2
000230 81bb     +LDD R27 , Y + 2 + 1
000231 9614     +ADIW R26 , 4
000232 93ed     +ST X + , R30
000233 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000234 81aa      	LDD  R26,Y+2
000235 81bb      	LDD  R27,Y+2+1
000236 9612      	ADIW R26,2
000237 91ed      	LD   R30,X+
000238 91fd      	LD   R31,X+
000239 9631      	ADIW R30,1
00023a 93fe      	ST   -X,R31
00023b 93ee      	ST   -X,R30
00023c 9731      	SBIW R30,1
00023d 81ac      	LDD  R26,Y+4
00023e 83a0      	STD  Z+0,R26
                 _0x2020013:
00023f 81aa      	LDD  R26,Y+2
000240 81bb      	LDD  R27,Y+2+1
000241 940e 0437 	CALL __GETW1P
000243 23ff      	TST  R31
000244 f02a      	BRMI _0x2020014
000245 91ed      	LD   R30,X+
000246 91fd      	LD   R31,X+
000247 9631      	ADIW R30,1
000248 93fe      	ST   -X,R31
000249 93ee      	ST   -X,R30
                 _0x2020014:
00024a c006      	RJMP _0x2020015
                 _0x2020010:
00024b 81aa      	LDD  R26,Y+2
00024c 81bb      	LDD  R27,Y+2+1
00024d efef      	LDI  R30,LOW(65535)
00024e efff      	LDI  R31,HIGH(65535)
00024f 93ed      	ST   X+,R30
000250 93fc      	ST   X,R31
                 _0x2020015:
000251 8119      	LDD  R17,Y+1
000252 8108      	LDD  R16,Y+0
000253 9625      	ADIW R28,5
000254 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000255 93ba      	ST   -Y,R27
000256 93aa      	ST   -Y,R26
000257 9726      	SBIW R28,6
000258 940e 044e 	CALL __SAVELOCR6
00025a e010      	LDI  R17,0
00025b 85ac      	LDD  R26,Y+12
00025c 85bd      	LDD  R27,Y+12+1
00025d e0e0      	LDI  R30,LOW(0)
00025e e0f0      	LDI  R31,HIGH(0)
00025f 93ed      	ST   X+,R30
000260 93fc      	ST   X,R31
                 _0x2020016:
000261 89ea      	LDD  R30,Y+18
000262 89fb      	LDD  R31,Y+18+1
000263 9631      	ADIW R30,1
000264 8bea      	STD  Y+18,R30
000265 8bfb      	STD  Y+18+1,R31
000266 9731      	SBIW R30,1
000267 91e4      	LPM  R30,Z
000268 2f2e      	MOV  R18,R30
000269 30e0      	CPI  R30,0
00026a f409      	BRNE PC+2
00026b c115      	RJMP _0x2020018
00026c 2fe1      	MOV  R30,R17
00026d 30e0      	CPI  R30,0
00026e f439      	BRNE _0x202001C
00026f 3225      	CPI  R18,37
000270 f411      	BRNE _0x202001D
000271 e011      	LDI  R17,LOW(1)
000272 c002      	RJMP _0x202001E
                 _0x202001D:
000273 940e 03f9 	CALL SUBOPT_0x5
                 _0x202001E:
000275 c10a      	RJMP _0x202001B
                 _0x202001C:
000276 30e1      	CPI  R30,LOW(0x1)
000277 f4a9      	BRNE _0x202001F
000278 3225      	CPI  R18,37
000279 f419      	BRNE _0x2020020
00027a 940e 03f9 	CALL SUBOPT_0x5
00027c c102      	RJMP _0x20200CC
                 _0x2020020:
00027d e012      	LDI  R17,LOW(2)
00027e e040      	LDI  R20,LOW(0)
00027f e000      	LDI  R16,LOW(0)
000280 322d      	CPI  R18,45
000281 f411      	BRNE _0x2020021
000282 e001      	LDI  R16,LOW(1)
000283 c0fc      	RJMP _0x202001B
                 _0x2020021:
000284 322b      	CPI  R18,43
000285 f411      	BRNE _0x2020022
000286 e24b      	LDI  R20,LOW(43)
000287 c0f8      	RJMP _0x202001B
                 _0x2020022:
000288 3220      	CPI  R18,32
000289 f411      	BRNE _0x2020023
00028a e240      	LDI  R20,LOW(32)
00028b c0f4      	RJMP _0x202001B
                 _0x2020023:
00028c c002      	RJMP _0x2020024
                 _0x202001F:
00028d 30e2      	CPI  R30,LOW(0x2)
00028e f439      	BRNE _0x2020025
                 _0x2020024:
00028f e050      	LDI  R21,LOW(0)
000290 e013      	LDI  R17,LOW(3)
000291 3320      	CPI  R18,48
000292 f411      	BRNE _0x2020026
000293 6800      	ORI  R16,LOW(128)
000294 c0eb      	RJMP _0x202001B
                 _0x2020026:
000295 c003      	RJMP _0x2020027
                 _0x2020025:
000296 30e3      	CPI  R30,LOW(0x3)
000297 f009      	BREQ PC+2
000298 c0e7      	RJMP _0x202001B
                 _0x2020027:
000299 3320      	CPI  R18,48
00029a f010      	BRLO _0x202002A
00029b 332a      	CPI  R18,58
00029c f008      	BRLO _0x202002B
                 _0x202002A:
00029d c007      	RJMP _0x2020029
                 _0x202002B:
00029e e0aa      	LDI  R26,LOW(10)
00029f 9f5a      	MUL  R21,R26
0002a0 2d50      	MOV  R21,R0
0002a1 2fe2      	MOV  R30,R18
0002a2 53e0      	SUBI R30,LOW(48)
0002a3 0f5e      	ADD  R21,R30
0002a4 c0db      	RJMP _0x202001B
                 _0x2020029:
0002a5 2fe2      	MOV  R30,R18
0002a6 36e3      	CPI  R30,LOW(0x63)
0002a7 f449      	BRNE _0x202002F
0002a8 940e 0400 	CALL SUBOPT_0x6
0002aa 89e8      	LDD  R30,Y+16
0002ab 89f9      	LDD  R31,Y+16+1
0002ac 81a4      	LDD  R26,Z+4
0002ad 93aa      	ST   -Y,R26
0002ae 940e 0406 	CALL SUBOPT_0x7
0002b0 c0ce      	RJMP _0x2020030
                 _0x202002F:
0002b1 37e3      	CPI  R30,LOW(0x73)
0002b2 f441      	BRNE _0x2020032
0002b3 940e 0400 	CALL SUBOPT_0x6
0002b5 940e 040c 	CALL SUBOPT_0x8
0002b7 940e 03bd 	CALL _strlen
0002b9 2f1e      	MOV  R17,R30
0002ba c00a      	RJMP _0x2020033
                 _0x2020032:
0002bb 37e0      	CPI  R30,LOW(0x70)
0002bc f461      	BRNE _0x2020035
0002bd 940e 0400 	CALL SUBOPT_0x6
0002bf 940e 040c 	CALL SUBOPT_0x8
0002c1 940e 03c9 	CALL _strlenf
0002c3 2f1e      	MOV  R17,R30
0002c4 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002c5 6002      	ORI  R16,LOW(2)
0002c6 770f      	ANDI R16,LOW(127)
0002c7 e030      	LDI  R19,LOW(0)
0002c8 c034      	RJMP _0x2020036
                 _0x2020035:
0002c9 36e4      	CPI  R30,LOW(0x64)
0002ca f011      	BREQ _0x2020039
0002cb 36e9      	CPI  R30,LOW(0x69)
0002cc f411      	BRNE _0x202003A
                 _0x2020039:
0002cd 6004      	ORI  R16,LOW(4)
0002ce c002      	RJMP _0x202003B
                 _0x202003A:
0002cf 37e5      	CPI  R30,LOW(0x75)
0002d0 f431      	BRNE _0x202003C
                 _0x202003B:
0002d1 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002d2 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002d3 83ee      	STD  Y+6,R30
0002d4 83ff      	STD  Y+6+1,R31
0002d5 e015      	LDI  R17,LOW(5)
0002d6 c00c      	RJMP _0x202003D
                 _0x202003C:
0002d7 35e8      	CPI  R30,LOW(0x58)
0002d8 f411      	BRNE _0x202003F
0002d9 6008      	ORI  R16,LOW(8)
0002da c003      	RJMP _0x2020040
                 _0x202003F:
0002db 37e8      	CPI  R30,LOW(0x78)
0002dc f009      	BREQ PC+2
0002dd c0a1      	RJMP _0x2020071
                 _0x2020040:
0002de e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002df e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002e0 83ee      	STD  Y+6,R30
0002e1 83ff      	STD  Y+6+1,R31
0002e2 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002e3 ff02      	SBRS R16,2
0002e4 c014      	RJMP _0x2020042
0002e5 940e 0400 	CALL SUBOPT_0x6
0002e7 940e 0416 	CALL SUBOPT_0x9
0002e9 85ab      	LDD  R26,Y+11
0002ea 23aa      	TST  R26
0002eb f43a      	BRPL _0x2020043
0002ec 85ea      	LDD  R30,Y+10
0002ed 85fb      	LDD  R31,Y+10+1
0002ee 940e 0433 	CALL __ANEGW1
0002f0 87ea      	STD  Y+10,R30
0002f1 87fb      	STD  Y+10+1,R31
0002f2 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002f3 3040      	CPI  R20,0
0002f4 f011      	BREQ _0x2020044
0002f5 5f1f      	SUBI R17,-LOW(1)
0002f6 c001      	RJMP _0x2020045
                 _0x2020044:
0002f7 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002f8 c004      	RJMP _0x2020046
                 _0x2020042:
0002f9 940e 0400 	CALL SUBOPT_0x6
0002fb 940e 0416 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
0002fd fd00      	SBRC R16,0
0002fe c011      	RJMP _0x2020047
                 _0x2020048:
0002ff 1715      	CP   R17,R21
000300 f478      	BRSH _0x202004A
000301 ff07      	SBRS R16,7
000302 c008      	RJMP _0x202004B
000303 ff02      	SBRS R16,2
000304 c004      	RJMP _0x202004C
000305 7f0b      	ANDI R16,LOW(251)
000306 2f24      	MOV  R18,R20
000307 5011      	SUBI R17,LOW(1)
000308 c001      	RJMP _0x202004D
                 _0x202004C:
000309 e320      	LDI  R18,LOW(48)
                 _0x202004D:
00030a c001      	RJMP _0x202004E
                 _0x202004B:
00030b e220      	LDI  R18,LOW(32)
                 _0x202004E:
00030c 940e 03f9 	CALL SUBOPT_0x5
00030e 5051      	SUBI R21,LOW(1)
00030f cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000310 2f31      	MOV  R19,R17
000311 ff01      	SBRS R16,1
000312 c017      	RJMP _0x202004F
                 _0x2020050:
000313 3030      	CPI  R19,0
000314 f0a1      	BREQ _0x2020052
000315 ff03      	SBRS R16,3
000316 c006      	RJMP _0x2020053
000317 81ee      	LDD  R30,Y+6
000318 81ff      	LDD  R31,Y+6+1
000319 9125      	LPM  R18,Z+
00031a 83ee      	STD  Y+6,R30
00031b 83ff      	STD  Y+6+1,R31
00031c c005      	RJMP _0x2020054
                 _0x2020053:
00031d 81ae      	LDD  R26,Y+6
00031e 81bf      	LDD  R27,Y+6+1
00031f 912d      	LD   R18,X+
000320 83ae      	STD  Y+6,R26
000321 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000322 940e 03f9 	CALL SUBOPT_0x5
000324 3050      	CPI  R21,0
000325 f009      	BREQ _0x2020055
000326 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000327 5031      	SUBI R19,LOW(1)
000328 cfea      	RJMP _0x2020050
                 _0x2020052:
000329 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00032a e320      	LDI  R18,LOW(48)
00032b 81ee      	LDD  R30,Y+6
00032c 81ff      	LDD  R31,Y+6+1
00032d 940e 0445 	CALL __GETW1PF
00032f 87e8      	STD  Y+8,R30
000330 87f9      	STD  Y+8+1,R31
000331 81ee      	LDD  R30,Y+6
000332 81ff      	LDD  R31,Y+6+1
000333 9632      	ADIW R30,2
000334 83ee      	STD  Y+6,R30
000335 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000336 85e8      	LDD  R30,Y+8
000337 85f9      	LDD  R31,Y+8+1
000338 85aa      	LDD  R26,Y+10
000339 85bb      	LDD  R27,Y+10+1
00033a 17ae      	CP   R26,R30
00033b 07bf      	CPC  R27,R31
00033c f050      	BRLO _0x202005C
00033d 5f2f      	SUBI R18,-LOW(1)
00033e 85a8      	LDD  R26,Y+8
00033f 85b9      	LDD  R27,Y+8+1
000340 85ea      	LDD  R30,Y+10
000341 85fb      	LDD  R31,Y+10+1
000342 1bea      	SUB  R30,R26
000343 0bfb      	SBC  R31,R27
000344 87ea      	STD  Y+10,R30
000345 87fb      	STD  Y+10+1,R31
000346 cfef      	RJMP _0x202005A
                 _0x202005C:
000347 332a      	CPI  R18,58
000348 f028      	BRLO _0x202005D
000349 ff03      	SBRS R16,3
00034a c002      	RJMP _0x202005E
00034b 5f29      	SUBI R18,-LOW(7)
00034c c001      	RJMP _0x202005F
                 _0x202005E:
00034d 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00034e fd04      	SBRC R16,4
00034f c01a      	RJMP _0x2020061
000350 3321      	CPI  R18,49
000351 f420      	BRSH _0x2020063
000352 85a8      	LDD  R26,Y+8
000353 85b9      	LDD  R27,Y+8+1
000354 9711      	SBIW R26,1
000355 f409      	BRNE _0x2020062
                 _0x2020063:
000356 c009      	RJMP _0x20200CD
                 _0x2020062:
000357 1753      	CP   R21,R19
000358 f010      	BRLO _0x2020067
000359 ff00      	SBRS R16,0
00035a c001      	RJMP _0x2020068
                 _0x2020067:
00035b c013      	RJMP _0x2020066
                 _0x2020068:
00035c e220      	LDI  R18,LOW(32)
00035d ff07      	SBRS R16,7
00035e c00b      	RJMP _0x2020069
00035f e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000360 6100      	ORI  R16,LOW(16)
000361 ff02      	SBRS R16,2
000362 c007      	RJMP _0x202006A
000363 7f0b      	ANDI R16,LOW(251)
000364 934a      	ST   -Y,R20
000365 940e 0406 	CALL SUBOPT_0x7
000367 3050      	CPI  R21,0
000368 f009      	BREQ _0x202006B
000369 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00036a 940e 03f9 	CALL SUBOPT_0x5
00036c 3050      	CPI  R21,0
00036d f009      	BREQ _0x202006C
00036e 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00036f 5031      	SUBI R19,LOW(1)
000370 85a8      	LDD  R26,Y+8
000371 85b9      	LDD  R27,Y+8+1
000372 9712      	SBIW R26,2
000373 f008      	BRLO _0x2020059
000374 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000375 ff00      	SBRS R16,0
000376 c008      	RJMP _0x202006D
                 _0x202006E:
000377 3050      	CPI  R21,0
000378 f031      	BREQ _0x2020070
000379 5051      	SUBI R21,LOW(1)
00037a e2e0      	LDI  R30,LOW(32)
00037b 93ea      	ST   -Y,R30
00037c 940e 0406 	CALL SUBOPT_0x7
00037e cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00037f e010      	LDI  R17,LOW(0)
                 _0x202001B:
000380 cee0      	RJMP _0x2020016
                 _0x2020018:
000381 85ac      	LDD  R26,Y+12
000382 85bd      	LDD  R27,Y+12+1
000383 940e 0437 	CALL __GETW1P
000385 940e 0455 	CALL __LOADLOCR6
000387 9664      	ADIW R28,20
000388 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000389 92ff      	PUSH R15
00038a 2ef8      	MOV  R15,R24
00038b 9726      	SBIW R28,6
00038c 940e 0450 	CALL __SAVELOCR4
00038e 940e 041e 	CALL SUBOPT_0xA
000390 9730      	SBIW R30,0
000391 f419      	BRNE _0x2020072
000392 efef      	LDI  R30,LOW(65535)
000393 efff      	LDI  R31,HIGH(65535)
000394 c023      	RJMP _0x2080001
                 _0x2020072:
000395 01de      	MOVW R26,R28
000396 9616      	ADIW R26,6
000397 940e 042f 	CALL __ADDW2R15
000399 018d      	MOVW R16,R26
00039a 940e 041e 	CALL SUBOPT_0xA
00039c 83ee      	STD  Y+6,R30
00039d 83ff      	STD  Y+6+1,R31
00039e e0e0      	LDI  R30,LOW(0)
00039f 87e8      	STD  Y+8,R30
0003a0 87e9      	STD  Y+8+1,R30
0003a1 01de      	MOVW R26,R28
0003a2 961a      	ADIW R26,10
0003a3 940e 042f 	CALL __ADDW2R15
0003a5 940e 0437 	CALL __GETW1P
0003a7 93fa      	ST   -Y,R31
0003a8 93ea      	ST   -Y,R30
0003a9 931a      	ST   -Y,R17
0003aa 930a      	ST   -Y,R16
0003ab e1e5      	LDI  R30,LOW(_put_buff_G101)
0003ac e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003ad 93fa      	ST   -Y,R31
0003ae 93ea      	ST   -Y,R30
0003af 01de      	MOVW R26,R28
0003b0 961a      	ADIW R26,10
0003b1 dea3      	RCALL __print_G101
0003b2 019f      	MOVW R18,R30
0003b3 81ae      	LDD  R26,Y+6
0003b4 81bf      	LDD  R27,Y+6+1
0003b5 e0e0      	LDI  R30,LOW(0)
0003b6 93ec      	ST   X,R30
0003b7 01f9      	MOVW R30,R18
                 _0x2080001:
0003b8 940e 0457 	CALL __LOADLOCR4
0003ba 962a      	ADIW R28,10
0003bb 90ff      	POP  R15
0003bc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003bd 93ba      	ST   -Y,R27
0003be 93aa      	ST   -Y,R26
0003bf 91a9          ld   r26,y+
0003c0 91b9          ld   r27,y+
0003c1 27ee          clr  r30
0003c2 27ff          clr  r31
                 strlen0:
0003c3 916d          ld   r22,x+
0003c4 2366          tst  r22
0003c5 f011          breq strlen1
0003c6 9631          adiw r30,1
0003c7 cffb          rjmp strlen0
                 strlen1:
0003c8 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003c9 93ba      	ST   -Y,R27
0003ca 93aa      	ST   -Y,R26
0003cb 27aa          clr  r26
0003cc 27bb          clr  r27
0003cd 91e9          ld   r30,y+
0003ce 91f9          ld   r31,y+
                 strlenf0:
0003cf 9005      	lpm  r0,z+
0003d0 2000          tst  r0
0003d1 f011          breq strlenf1
0003d2 9611          adiw r26,1
0003d3 cffb          rjmp strlenf0
                 strlenf1:
0003d4 01fd          movw r30,r26
0003d5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _line:
000160           	.BYTE 0x14
                 _temp:
000174           	.BYTE 0x8
                 _T:
00017c           	.BYTE 0x4
                 __base_y_G100:
000180           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
                +
0003d6 91a0 0176+LDS R26 , _temp + ( 2 )
0003d8 91b0 0177+LDS R27 , _temp + ( 2 ) + 1
                 	__GETW2MN _temp,2
                +
0003da 91e0 0178+LDS R30 , _temp + ( 4 )
0003dc 91f0 0179+LDS R31 , _temp + ( 4 ) + 1
                 	__GETW1MN _temp,4
0003de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003df 940e 01a8 	CALL _lcd_gotoxy
0003e1 e6e0      	LDI  R30,LOW(_line)
0003e2 e0f1      	LDI  R31,HIGH(_line)
0003e3 93fa      	ST   -Y,R31
0003e4 93ea      	ST   -Y,R30
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003e6 2766      	CLR  R22
0003e7 2777      	CLR  R23
0003e8 940e 0449 	CALL __PUTPARD1
0003ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003eb 940e 019c 	CALL __lcd_write_data
0003ed e0a3      	LDI  R26,LOW(3)
0003ee e0b0      	LDI  R27,0
0003ef 940c 0425 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0003f1 e3a0      	LDI  R26,LOW(48)
0003f2 940e 0188 	CALL __lcd_write_nibble_G100
                +
0003f4 ec88     +LDI R24 , LOW ( 200 )
0003f5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003f6 9701     +SBIW R24 , 1
0003f7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0003f9 932a      	ST   -Y,R18
0003fa 85ad      	LDD  R26,Y+13
0003fb 85be      	LDD  R27,Y+13+1
0003fc 85ef      	LDD  R30,Y+15
0003fd 89f8      	LDD  R31,Y+15+1
0003fe 9509      	ICALL
0003ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000400 89e8      	LDD  R30,Y+16
000401 89f9      	LDD  R31,Y+16+1
000402 9734      	SBIW R30,4
000403 8be8      	STD  Y+16,R30
000404 8bf9      	STD  Y+16+1,R31
000405 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000406 85ad      	LDD  R26,Y+13
000407 85be      	LDD  R27,Y+13+1
000408 85ef      	LDD  R30,Y+15
000409 89f8      	LDD  R31,Y+15+1
00040a 9509      	ICALL
00040b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00040c 89a8      	LDD  R26,Y+16
00040d 89b9      	LDD  R27,Y+16+1
00040e 9614      	ADIW R26,4
00040f 940e 0437 	CALL __GETW1P
000411 83ee      	STD  Y+6,R30
000412 83ff      	STD  Y+6+1,R31
000413 81ae      	LDD  R26,Y+6
000414 81bf      	LDD  R27,Y+6+1
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000416 89a8      	LDD  R26,Y+16
000417 89b9      	LDD  R27,Y+16+1
000418 9614      	ADIW R26,4
000419 940e 0437 	CALL __GETW1P
00041b 87ea      	STD  Y+10,R30
00041c 87fb      	STD  Y+10+1,R31
00041d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00041e 01de      	MOVW R26,R28
00041f 961c      	ADIW R26,12
000420 940e 042f 	CALL __ADDW2R15
000422 940e 0437 	CALL __GETW1P
000424 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000425 9610      	adiw r26,0
000426 f039      	breq __delay_ms1
                 __delay_ms0:
000427 95a8      	wdr
                +
000428 ed80     +LDI R24 , LOW ( 0x7D0 )
000429 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00042a 9701     +SBIW R24 , 1
00042b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00042c 9711      	sbiw r26,1
00042d f7c9      	brne __delay_ms0
                 __delay_ms1:
00042e 9508      	ret
                 
                 __ADDW2R15:
00042f 2400      	CLR  R0
000430 0daf      	ADD  R26,R15
000431 1db0      	ADC  R27,R0
000432 9508      	RET
                 
                 __ANEGW1:
000433 95f1      	NEG  R31
000434 95e1      	NEG  R30
000435 40f0      	SBCI R31,0
000436 9508      	RET
                 
                 __GETW1P:
000437 91ed      	LD   R30,X+
000438 91fc      	LD   R31,X
000439 9711      	SBIW R26,1
00043a 9508      	RET
                 
                 __GETD1P_INC:
00043b 91ed      	LD   R30,X+
00043c 91fd      	LD   R31,X+
00043d 916d      	LD   R22,X+
00043e 917d      	LD   R23,X+
00043f 9508      	RET
                 
                 __PUTDP1_DEC:
000440 937e      	ST   -X,R23
000441 936e      	ST   -X,R22
000442 93fe      	ST   -X,R31
000443 93ee      	ST   -X,R30
000444 9508      	RET
                 
                 __GETW1PF:
000445 9005      	LPM  R0,Z+
000446 91f4      	LPM  R31,Z
000447 2de0      	MOV  R30,R0
000448 9508      	RET
                 
                 __PUTPARD1:
000449 937a      	ST   -Y,R23
00044a 936a      	ST   -Y,R22
00044b 93fa      	ST   -Y,R31
00044c 93ea      	ST   -Y,R30
00044d 9508      	RET
                 
                 __SAVELOCR6:
00044e 935a      	ST   -Y,R21
                 __SAVELOCR5:
00044f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000450 933a      	ST   -Y,R19
                 __SAVELOCR3:
000451 932a      	ST   -Y,R18
                 __SAVELOCR2:
000452 931a      	ST   -Y,R17
000453 930a      	ST   -Y,R16
000454 9508      	RET
                 
                 __LOADLOCR6:
000455 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000456 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000457 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000458 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000459 8119      	LDD  R17,Y+1
00045a 8108      	LD   R16,Y
00045b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   6 r6 :   6 r7 :   2 
r8 :   4 r9 :   2 r10:   4 r11:   2 r12:   2 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  10 r23:   6 
r24:  30 r25:   7 r26: 114 r27:  51 r28:  15 r29:   1 r30: 253 r31:  88 
x  :  33 y  : 181 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  33 brpl  :   1 brsh  :   8 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  63 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  12 cpc   :  11 cpi   :  34 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  35 ldd   :  77 ldi   : 126 
lds   :  20 lpm   :  14 lsl   :   1 lsr   :   2 mov   :  19 movw  :  22 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  44 pop   :   1 push  :   1 rcall :  17 ret   :  29 
reti  :   1 rjmp  :  66 rol   :   1 ror   :   2 sbc   :   2 sbci  :   5 
sbi   :  10 sbic  :   2 sbis  :   2 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  74 std   :  31 sts   :   6 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008b8   2160     72   2232   16384  13.6%
[.dseg] 0x000060 0x000184      0     36     36    1024   3.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
