
AVRASM ver. 2.1.30  C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm Tue May 20 15:35:37 2025

C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\s4n1.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _nam=R4
                 	.DEF _nam_msb=R5
                 	.DEF _t1=R6
                 	.DEF _t1_msb=R7
                 	.DEF _t2=R8
                 	.DEF _t2_msb=R9
                 	.DEF _vol=R10
                 	.DEF _vol_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0086 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000      	.DB  0x0,0x0
                 
                 _0x0:
000034 3154
000035 253d
000036 322d
000037 5464      	.DB  0x54,0x31,0x3D,0x25,0x2D,0x32,0x64,0x54
000038 3d32
000039 2d25
00003a 6432
00003b 3354      	.DB  0x32,0x3D,0x25,0x2D,0x32,0x64,0x54,0x33
00003c 253d
00003d 322d
00003e 5464
00003f 3d34      	.DB  0x3D,0x25,0x2D,0x32,0x64,0x54,0x34,0x3D
000040 2d25
000041 6432
000042 5400
000043 3d35      	.DB  0x25,0x2D,0x32,0x64,0x0,0x54,0x35,0x3D
000044 2d25
000045 6432
000046 3654
000047 253d      	.DB  0x25,0x2D,0x32,0x64,0x54,0x36,0x3D,0x25
000048 322d
000049 5464
00004a 3d37
00004b 2d25      	.DB  0x2D,0x32,0x64,0x54,0x37,0x3D,0x25,0x2D
00004c 6432
00004d 3854
00004e 253d
00004f 322d      	.DB  0x32,0x64,0x54,0x38,0x3D,0x25,0x2D,0x32
000050 0064      	.DB  0x64,0x0
                 _0x2000003:
000051 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000052 0002      	.DW  0x02
000053 0004      	.DW  0x04
000054 0066      	.DW  __REG_VARS*2
                 
000055 0002      	.DW  0x02
000056 0186      	.DW  __base_y_G100
000057 00a2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bffb      	OUT  GICR,R31
00005e bfeb      	OUT  GICR,R30
00005f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000060 e08d      	LDI  R24,(14-2)+1
000061 e0a2      	LDI  R26,2
000062 27bb      	CLR  R27
                 __CLEAR_REG:
000063 93ed      	ST   X+,R30
000064 958a      	DEC  R24
000065 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000066 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000067 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000068 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c eae4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007f bfed      	OUT  SPL,R30
000080 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000081 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000082 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000083 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000084 940c 00b9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 7
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;unsigned char line[20];
                 ;unsigned int nam=0,t1,t2,vol;
                 ;unsigned int temp[9];
                 ;interrupt [ADC_INT] void adc_isr(void){
                 ; 0000 000F interrupt [15] void adc_isr(void){
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000086 938a      	ST   -Y,R24
000087 93aa      	ST   -Y,R26
000088 93ba      	ST   -Y,R27
000089 93ea      	ST   -Y,R30
00008a 93fa      	ST   -Y,R31
00008b b7ef      	IN   R30,SREG
00008c 93ea      	ST   -Y,R30
                 ; 0000 0010 temp[nam]=ADCW/2;
00008d 01f2      	MOVW R30,R4
00008e e7a4      	LDI  R26,LOW(_temp)
00008f e0b1      	LDI  R27,HIGH(_temp)
000090 0fee      	LSL  R30
000091 1fff      	ROL  R31
000092 0fae      	ADD  R26,R30
000093 1fbf      	ADC  R27,R31
000094 b1e4      	IN   R30,0x4
000095 b1f5      	IN   R31,0x4+1
000096 95f6      	LSR  R31
000097 95e7      	ROR  R30
000098 93ed      	ST   X+,R30
000099 93fc      	ST   X,R31
                 ; 0000 0011 
                 ; 0000 0012 ADMUX=nam;
00009a b847      	OUT  0x7,R4
                 ; 0000 0013 delay_us(10);
                +
00009b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00009c 958a     +DEC R24
00009d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0014 ADCSRA|=(1<<ADSC);
00009e 9a36      	SBI  0x6,6
                 ; 0000 0015 nam++;
00009f 01f2      	MOVW R30,R4
0000a0 9631      	ADIW R30,1
0000a1 012f      	MOVW R4,R30
                 ; 0000 0016 if (nam>7){nam=0;}
0000a2 e0e7      	LDI  R30,LOW(7)
0000a3 e0f0      	LDI  R31,HIGH(7)
0000a4 15e4      	CP   R30,R4
0000a5 05f5      	CPC  R31,R5
0000a6 f410      	BRSH _0x3
0000a7 2444      	CLR  R4
0000a8 2455      	CLR  R5
                 ; 0000 0017 temp[8]=temp[0];
                 _0x3:
0000a9 91e0 0174 	LDS  R30,_temp
0000ab 91f0 0175 	LDS  R31,_temp+1
                +
0000ad 93e0 0184+STS _temp + ( 16 ) , R30
0000af 93f0 0185+STS _temp + ( 16 ) + 1 , R31
                 	__PUTW1MN _temp,16
                 ; 0000 0018 }
0000b1 91e9      	LD   R30,Y+
0000b2 bfef      	OUT  SREG,R30
0000b3 91f9      	LD   R31,Y+
0000b4 91e9      	LD   R30,Y+
0000b5 91b9      	LD   R27,Y+
0000b6 91a9      	LD   R26,Y+
0000b7 9189      	LD   R24,Y+
0000b8 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void){
                 ; 0000 001B void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 001C {
                 ; 0000 001D // Declare your local variables here
                 ; 0000 001E 
                 ; 0000 001F // Input/Output Ports initialization
                 ; 0000 0020 // Port A initialization
                 ; 0000 0021 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0022 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bbea      	OUT  0x1A,R30
                 ; 0000 0023 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0024 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000bb bbeb      	OUT  0x1B,R30
                 ; 0000 0025 
                 ; 0000 0026 // Port B initialization
                 ; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0028 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000bc bbe7      	OUT  0x17,R30
                 ; 0000 0029 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000bd bbe8      	OUT  0x18,R30
                 ; 0000 002B 
                 ; 0000 002C // Port C initialization
                 ; 0000 002D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000be bbe4      	OUT  0x14,R30
                 ; 0000 002F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0030 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000bf bbe5      	OUT  0x15,R30
                 ; 0000 0031 
                 ; 0000 0032 // Port D initialization
                 ; 0000 0033 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0034 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000c0 bbe1      	OUT  0x11,R30
                 ; 0000 0035 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0036 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000c1 bbe2      	OUT  0x12,R30
                 ; 0000 0037 
                 ; 0000 0038 // Timer/Counter 0 initialization
                 ; 0000 0039 // Clock source: System Clock
                 ; 0000 003A // Clock value: Timer 0 Stopped
                 ; 0000 003B // Mode: Normal top=0xFF
                 ; 0000 003C // OC0 output: Disconnected
                 ; 0000 003D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000c2 bfe3      	OUT  0x33,R30
                 ; 0000 003E TCNT0=0x00;
0000c3 bfe2      	OUT  0x32,R30
                 ; 0000 003F OCR0=0x00;
0000c4 bfec      	OUT  0x3C,R30
                 ; 0000 0040 
                 ; 0000 0041 // Timer/Counter 1 initialization
                 ; 0000 0042 // Clock source: System Clock
                 ; 0000 0043 // Clock value: Timer1 Stopped
                 ; 0000 0044 // Mode: Normal top=0xFFFF
                 ; 0000 0045 // OC1A output: Disconnected
                 ; 0000 0046 // OC1B output: Disconnected
                 ; 0000 0047 // Noise Canceler: Off
                 ; 0000 0048 // Input Capture on Falling Edge
                 ; 0000 0049 // Timer1 Overflow Interrupt: Off
                 ; 0000 004A // Input Capture Interrupt: Off
                 ; 0000 004B // Compare A Match Interrupt: Off
                 ; 0000 004C // Compare B Match Interrupt: Off
                 ; 0000 004D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000c5 bdef      	OUT  0x2F,R30
                 ; 0000 004E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000c6 bdee      	OUT  0x2E,R30
                 ; 0000 004F TCNT1H=0x00;
0000c7 bded      	OUT  0x2D,R30
                 ; 0000 0050 TCNT1L=0x00;
0000c8 bdec      	OUT  0x2C,R30
                 ; 0000 0051 ICR1H=0x00;
0000c9 bde7      	OUT  0x27,R30
                 ; 0000 0052 ICR1L=0x00;
0000ca bde6      	OUT  0x26,R30
                 ; 0000 0053 OCR1AH=0x00;
0000cb bdeb      	OUT  0x2B,R30
                 ; 0000 0054 OCR1AL=0x00;
0000cc bdea      	OUT  0x2A,R30
                 ; 0000 0055 OCR1BH=0x00;
0000cd bde9      	OUT  0x29,R30
                 ; 0000 0056 OCR1BL=0x00;
0000ce bde8      	OUT  0x28,R30
                 ; 0000 0057 
                 ; 0000 0058 // Timer/Counter 2 initialization
                 ; 0000 0059 // Clock source: System Clock
                 ; 0000 005A // Clock value: Timer2 Stopped
                 ; 0000 005B // Mode: Normal top=0xFF
                 ; 0000 005C // OC2 output: Disconnected
                 ; 0000 005D ASSR=0<<AS2;
0000cf bde2      	OUT  0x22,R30
                 ; 0000 005E TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000d0 bde5      	OUT  0x25,R30
                 ; 0000 005F TCNT2=0x00;
0000d1 bde4      	OUT  0x24,R30
                 ; 0000 0060 OCR2=0x00;
0000d2 bde3      	OUT  0x23,R30
                 ; 0000 0061 
                 ; 0000 0062 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0063 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000d3 bfe9      	OUT  0x39,R30
                 ; 0000 0064 
                 ; 0000 0065 // External Interrupt(s) initialization
                 ; 0000 0066 // INT0: Off
                 ; 0000 0067 // INT1: Off
                 ; 0000 0068 // INT2: Off
                 ; 0000 0069 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000d4 bfe5      	OUT  0x35,R30
                 ; 0000 006A MCUCSR=(0<<ISC2);
0000d5 bfe4      	OUT  0x34,R30
                 ; 0000 006B 
                 ; 0000 006C // USART initialization
                 ; 0000 006D // USART disabled
                 ; 0000 006E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000d6 b9ea      	OUT  0xA,R30
                 ; 0000 006F 
                 ; 0000 0070 // Analog Comparator initialization
                 ; 0000 0071 // Analog Comparator: Off
                 ; 0000 0072 // The Analog Comparator's positive input is
                 ; 0000 0073 // connected to the AIN0 pin
                 ; 0000 0074 // The Analog Comparator's negative input is
                 ; 0000 0075 // connected to the AIN1 pin
                 ; 0000 0076 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000d7 e8e0      	LDI  R30,LOW(128)
0000d8 b9e8      	OUT  0x8,R30
                 ; 0000 0077 
                 ; 0000 0078 // ADC initialization
                 ; 0000 0079 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 007A // ADC Voltage Reference: AREF pin
                 ; 0000 007B // ADC Auto Trigger Source: Free Running
                 ; 0000 007C ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000d9 e0e0      	LDI  R30,LOW(0)
0000da b9e7      	OUT  0x7,R30
                 ; 0000 007D ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000db eeeb      	LDI  R30,LOW(235)
0000dc b9e6      	OUT  0x6,R30
                 ; 0000 007E SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000dd e0e0      	LDI  R30,LOW(0)
0000de bfe0      	OUT  0x30,R30
                 ; 0000 007F 
                 ; 0000 0080 // SPI initialization
                 ; 0000 0081 // SPI disabled
                 ; 0000 0082 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000df b9ed      	OUT  0xD,R30
                 ; 0000 0083 
                 ; 0000 0084 // TWI initialization
                 ; 0000 0085 // TWI disabled
                 ; 0000 0086 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000e0 bfe6      	OUT  0x36,R30
                 ; 0000 0087 
                 ; 0000 0088 // Alphanumeric LCD initialization
                 ; 0000 0089 // Connections are specified in the
                 ; 0000 008A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 008B // RS - PORTC Bit 0
                 ; 0000 008C // RD - PORTC Bit 1
                 ; 0000 008D // EN - PORTC Bit 2
                 ; 0000 008E // D4 - PORTC Bit 4
                 ; 0000 008F // D5 - PORTC Bit 5
                 ; 0000 0090 // D6 - PORTC Bit 6
                 ; 0000 0091 // D7 - PORTC Bit 7
                 ; 0000 0092 // Characters/line: 16
                 ; 0000 0093 lcd_init(20);
0000e1 e1a4      	LDI  R26,LOW(20)
0000e2 d0aa      	RCALL _lcd_init
                 ; 0000 0094 
                 ; 0000 0095 // Global enable interrupts
                 ; 0000 0096 #asm("sei")     }
0000e3 9478      	sei
                 ; 0000 0097 
                 ; 0000 0098     while (1){
                 _0x4:
                 ; 0000 0099         lcd_gotoxy(0,0);
0000e4 e0e0      	LDI  R30,LOW(0)
0000e5 93ea      	ST   -Y,R30
0000e6 e0a0      	LDI  R26,LOW(0)
0000e7 940e 037d 	CALL SUBOPT_0x0
                 ; 0000 009A         sprintf(line,"T1=%-2dT2=%-2dT3=%-2dT4=%-2d",temp[1],temp[2],temp[3],temp[4]);
                +
0000e9 e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000ea e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000eb 93fa      	ST   -Y,R31
0000ec 93ea      	ST   -Y,R30
                +
0000ed 91e0 0176+LDS R30 , _temp + ( 2 )
0000ef 91f0 0177+LDS R31 , _temp + ( 2 ) + 1
                 	__GETW1MN _temp,2
0000f1 940e 0384 	CALL SUBOPT_0x1
                +
0000f3 91e0 0178+LDS R30 , _temp + ( 4 )
0000f5 91f0 0179+LDS R31 , _temp + ( 4 ) + 1
                 	__GETW1MN _temp,4
0000f7 940e 0384 	CALL SUBOPT_0x1
                +
0000f9 91e0 017a+LDS R30 , _temp + ( 6 )
0000fb 91f0 017b+LDS R31 , _temp + ( 6 ) + 1
                 	__GETW1MN _temp,6
0000fd 940e 0384 	CALL SUBOPT_0x1
                +
0000ff 91e0 017c+LDS R30 , _temp + ( 8 )
000101 91f0 017d+LDS R31 , _temp + ( 8 ) + 1
                 	__GETW1MN _temp,8
000103 940e 0384 	CALL SUBOPT_0x1
000105 940e 0389 	CALL SUBOPT_0x2
                 ; 0000 009B         lcd_puts(line);
                 ; 0000 009C 
                 ; 0000 009D         lcd_gotoxy(0,1);
000107 e0e0      	LDI  R30,LOW(0)
000108 93ea      	ST   -Y,R30
000109 e0a1      	LDI  R26,LOW(1)
00010a 940e 037d 	CALL SUBOPT_0x0
                 ; 0000 009E         sprintf(line,"T5=%-2dT6=%-2dT7=%-2dT8=%-2d",temp[5],temp[6],temp[7],temp[8]);
                +
00010c e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
00010d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
00010e 93fa      	ST   -Y,R31
00010f 93ea      	ST   -Y,R30
                +
000110 91e0 017e+LDS R30 , _temp + ( 10 )
000112 91f0 017f+LDS R31 , _temp + ( 10 ) + 1
                 	__GETW1MN _temp,10
000114 940e 0384 	CALL SUBOPT_0x1
                +
000116 91e0 0180+LDS R30 , _temp + ( 12 )
000118 91f0 0181+LDS R31 , _temp + ( 12 ) + 1
                 	__GETW1MN _temp,12
00011a 940e 0384 	CALL SUBOPT_0x1
                +
00011c 91e0 0182+LDS R30 , _temp + ( 14 )
00011e 91f0 0183+LDS R31 , _temp + ( 14 ) + 1
                 	__GETW1MN _temp,14
000120 940e 0384 	CALL SUBOPT_0x1
                +
000122 91e0 0184+LDS R30 , _temp + ( 16 )
000124 91f0 0185+LDS R31 , _temp + ( 16 ) + 1
                 	__GETW1MN _temp,16
000126 940e 0384 	CALL SUBOPT_0x1
000128 940e 0389 	CALL SUBOPT_0x2
                 ; 0000 009F         lcd_puts(line);
                 ; 0000 00A0 
                 ; 0000 00A1     }
00012a cfb9      	RJMP _0x4
                 ; 0000 00A2 }
                 _0x7:
00012b cfff      	RJMP _0x7
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012c 93aa      	ST   -Y,R26
00012d b3e5      	IN   R30,0x15
00012e 70ef      	ANDI R30,LOW(0xF)
00012f 2fae      	MOV  R26,R30
000130 81e8      	LD   R30,Y
000131 7fe0      	ANDI R30,LOW(0xF0)
000132 2bea      	OR   R30,R26
000133 bbe5      	OUT  0x15,R30
                +
000134 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000135 958a     +DEC R24
000136 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000137 9aaa      	SBI  0x15,2
                +
000138 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000139 958a     +DEC R24
00013a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013b 98aa      	CBI  0x15,2
                +
00013c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00013d 958a     +DEC R24
00013e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013f c07a      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000140 93aa      	ST   -Y,R26
000141 81a8      	LD   R26,Y
000142 dfe9      	RCALL __lcd_write_nibble_G100
000143 81e8          ld    r30,y
000144 95e2          swap  r30
000145 83e8          st    y,r30
000146 81a8      	LD   R26,Y
000147 dfe4      	RCALL __lcd_write_nibble_G100
                +
000148 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000149 958a     +DEC R24
00014a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00014b c06e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00014c 93aa      	ST   -Y,R26
00014d 81e8      	LD   R30,Y
00014e e0f0      	LDI  R31,0
00014f 57ea      	SUBI R30,LOW(-__base_y_G100)
000150 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000151 81e0      	LD   R30,Z
000152 81a9      	LDD  R26,Y+1
000153 0fae      	ADD  R26,R30
000154 dfeb      	RCALL __lcd_write_data
000155 80d9      	LDD  R13,Y+1
000156 80c8      	LDD  R12,Y+0
000157 9622      	ADIW R28,2
000158 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000159 e0a2      	LDI  R26,LOW(2)
00015a 940e 0391 	CALL SUBOPT_0x3
00015c e0ac      	LDI  R26,LOW(12)
00015d dfe2      	RCALL __lcd_write_data
00015e e0a1      	LDI  R26,LOW(1)
00015f 940e 0391 	CALL SUBOPT_0x3
000161 e0e0      	LDI  R30,LOW(0)
000162 2ece      	MOV  R12,R30
000163 2ede      	MOV  R13,R30
000164 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000165 93aa      	ST   -Y,R26
000166 81a8      	LD   R26,Y
000167 30aa      	CPI  R26,LOW(0xA)
000168 f021      	BREQ _0x2000005
000169 91e0 018a 	LDS  R30,__lcd_maxx
00016b 16de      	CP   R13,R30
00016c f048      	BRLO _0x2000004
                 _0x2000005:
00016d e0e0      	LDI  R30,LOW(0)
00016e 93ea      	ST   -Y,R30
00016f 94c3      	INC  R12
000170 2dac      	MOV  R26,R12
000171 dfda      	RCALL _lcd_gotoxy
000172 81a8      	LD   R26,Y
000173 30aa      	CPI  R26,LOW(0xA)
000174 f409      	BRNE _0x2000007
000175 c044      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000176 94d3      	INC  R13
000177 9aa8      	SBI  0x15,0
000178 81a8      	LD   R26,Y
000179 dfc6      	RCALL __lcd_write_data
00017a 98a8      	CBI  0x15,0
00017b c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00017c 93ba      	ST   -Y,R27
00017d 93aa      	ST   -Y,R26
00017e 931a      	ST   -Y,R17
                 _0x2000008:
00017f 81a9      	LDD  R26,Y+1
000180 81ba      	LDD  R27,Y+1+1
000181 91ed      	LD   R30,X+
000182 83a9      	STD  Y+1,R26
000183 83ba      	STD  Y+1+1,R27
000184 2f1e      	MOV  R17,R30
000185 30e0      	CPI  R30,0
000186 f019      	BREQ _0x200000A
000187 2fa1      	MOV  R26,R17
000188 dfdc      	RCALL _lcd_putchar
000189 cff5      	RJMP _0x2000008
                 _0x200000A:
00018a 8118      	LDD  R17,Y+0
00018b 9623      	ADIW R28,3
00018c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00018d 93aa      	ST   -Y,R26
00018e b3e4      	IN   R30,0x14
00018f 6fe0      	ORI  R30,LOW(0xF0)
000190 bbe4      	OUT  0x14,R30
000191 9aa2      	SBI  0x14,2
000192 9aa0      	SBI  0x14,0
000193 9aa1      	SBI  0x14,1
000194 98aa      	CBI  0x15,2
000195 98a8      	CBI  0x15,0
000196 98a9      	CBI  0x15,1
000197 81e8      	LD   R30,Y
000198 93e0 018a 	STS  __lcd_maxx,R30
00019a 58e0      	SUBI R30,-LOW(128)
                +
00019b 93e0 0188+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00019d 81e8      	LD   R30,Y
00019e 54e0      	SUBI R30,-LOW(192)
                +
00019f 93e0 0189+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001a1 e1a4      	LDI  R26,LOW(20)
0001a2 e0b0      	LDI  R27,0
0001a3 940e 03cb 	CALL _delay_ms
0001a5 940e 0397 	CALL SUBOPT_0x4
0001a7 940e 0397 	CALL SUBOPT_0x4
0001a9 940e 0397 	CALL SUBOPT_0x4
0001ab e2a0      	LDI  R26,LOW(32)
0001ac df7f      	RCALL __lcd_write_nibble_G100
                +
0001ad ec88     +LDI R24 , LOW ( 200 )
0001ae e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001af 9701     +SBIW R24 , 1
0001b0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001b1 e2a8      	LDI  R26,LOW(40)
0001b2 df8d      	RCALL __lcd_write_data
0001b3 e0a4      	LDI  R26,LOW(4)
0001b4 df8b      	RCALL __lcd_write_data
0001b5 e8a5      	LDI  R26,LOW(133)
0001b6 df89      	RCALL __lcd_write_data
0001b7 e0a6      	LDI  R26,LOW(6)
0001b8 df87      	RCALL __lcd_write_data
0001b9 df9f      	RCALL _lcd_clear
                 _0x2080002:
0001ba 9621      	ADIW R28,1
0001bb 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001bc 93ba      	ST   -Y,R27
0001bd 93aa      	ST   -Y,R26
0001be 931a      	ST   -Y,R17
0001bf 930a      	ST   -Y,R16
0001c0 81aa      	LDD  R26,Y+2
0001c1 81bb      	LDD  R27,Y+2+1
0001c2 9612      	ADIW R26,2
0001c3 940e 03dd 	CALL __GETW1P
0001c5 9730      	SBIW R30,0
0001c6 f159      	BREQ _0x2020010
0001c7 81aa      	LDD  R26,Y+2
0001c8 81bb      	LDD  R27,Y+2+1
0001c9 9614      	ADIW R26,4
0001ca 940e 03dd 	CALL __GETW1P
0001cc 018f      	MOVW R16,R30
0001cd 9730      	SBIW R30,0
0001ce f061      	BREQ _0x2020012
                +
0001cf 3002     +CPI R16 , LOW ( 2 )
0001d0 e0e0     +LDI R30 , HIGH ( 2 )
0001d1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001d2 f098      	BRLO _0x2020013
0001d3 01f8      	MOVW R30,R16
0001d4 9731      	SBIW R30,1
0001d5 018f      	MOVW R16,R30
                +
0001d6 81aa     +LDD R26 , Y + 2
0001d7 81bb     +LDD R27 , Y + 2 + 1
0001d8 9614     +ADIW R26 , 4
0001d9 93ed     +ST X + , R30
0001da 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001db 81aa      	LDD  R26,Y+2
0001dc 81bb      	LDD  R27,Y+2+1
0001dd 9612      	ADIW R26,2
0001de 91ed      	LD   R30,X+
0001df 91fd      	LD   R31,X+
0001e0 9631      	ADIW R30,1
0001e1 93fe      	ST   -X,R31
0001e2 93ee      	ST   -X,R30
0001e3 9731      	SBIW R30,1
0001e4 81ac      	LDD  R26,Y+4
0001e5 83a0      	STD  Z+0,R26
                 _0x2020013:
0001e6 81aa      	LDD  R26,Y+2
0001e7 81bb      	LDD  R27,Y+2+1
0001e8 940e 03dd 	CALL __GETW1P
0001ea 23ff      	TST  R31
0001eb f02a      	BRMI _0x2020014
0001ec 91ed      	LD   R30,X+
0001ed 91fd      	LD   R31,X+
0001ee 9631      	ADIW R30,1
0001ef 93fe      	ST   -X,R31
0001f0 93ee      	ST   -X,R30
                 _0x2020014:
0001f1 c006      	RJMP _0x2020015
                 _0x2020010:
0001f2 81aa      	LDD  R26,Y+2
0001f3 81bb      	LDD  R27,Y+2+1
0001f4 efef      	LDI  R30,LOW(65535)
0001f5 efff      	LDI  R31,HIGH(65535)
0001f6 93ed      	ST   X+,R30
0001f7 93fc      	ST   X,R31
                 _0x2020015:
0001f8 8119      	LDD  R17,Y+1
0001f9 8108      	LDD  R16,Y+0
0001fa 9625      	ADIW R28,5
0001fb 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001fc 93ba      	ST   -Y,R27
0001fd 93aa      	ST   -Y,R26
0001fe 9726      	SBIW R28,6
0001ff 940e 03ea 	CALL __SAVELOCR6
000201 e010      	LDI  R17,0
000202 85ac      	LDD  R26,Y+12
000203 85bd      	LDD  R27,Y+12+1
000204 e0e0      	LDI  R30,LOW(0)
000205 e0f0      	LDI  R31,HIGH(0)
000206 93ed      	ST   X+,R30
000207 93fc      	ST   X,R31
                 _0x2020016:
000208 89ea      	LDD  R30,Y+18
000209 89fb      	LDD  R31,Y+18+1
00020a 9631      	ADIW R30,1
00020b 8bea      	STD  Y+18,R30
00020c 8bfb      	STD  Y+18+1,R31
00020d 9731      	SBIW R30,1
00020e 91e4      	LPM  R30,Z
00020f 2f2e      	MOV  R18,R30
000210 30e0      	CPI  R30,0
000211 f409      	BRNE PC+2
000212 c115      	RJMP _0x2020018
000213 2fe1      	MOV  R30,R17
000214 30e0      	CPI  R30,0
000215 f439      	BRNE _0x202001C
000216 3225      	CPI  R18,37
000217 f411      	BRNE _0x202001D
000218 e011      	LDI  R17,LOW(1)
000219 c002      	RJMP _0x202001E
                 _0x202001D:
00021a 940e 039f 	CALL SUBOPT_0x5
                 _0x202001E:
00021c c10a      	RJMP _0x202001B
                 _0x202001C:
00021d 30e1      	CPI  R30,LOW(0x1)
00021e f4a9      	BRNE _0x202001F
00021f 3225      	CPI  R18,37
000220 f419      	BRNE _0x2020020
000221 940e 039f 	CALL SUBOPT_0x5
000223 c102      	RJMP _0x20200CC
                 _0x2020020:
000224 e012      	LDI  R17,LOW(2)
000225 e040      	LDI  R20,LOW(0)
000226 e000      	LDI  R16,LOW(0)
000227 322d      	CPI  R18,45
000228 f411      	BRNE _0x2020021
000229 e001      	LDI  R16,LOW(1)
00022a c0fc      	RJMP _0x202001B
                 _0x2020021:
00022b 322b      	CPI  R18,43
00022c f411      	BRNE _0x2020022
00022d e24b      	LDI  R20,LOW(43)
00022e c0f8      	RJMP _0x202001B
                 _0x2020022:
00022f 3220      	CPI  R18,32
000230 f411      	BRNE _0x2020023
000231 e240      	LDI  R20,LOW(32)
000232 c0f4      	RJMP _0x202001B
                 _0x2020023:
000233 c002      	RJMP _0x2020024
                 _0x202001F:
000234 30e2      	CPI  R30,LOW(0x2)
000235 f439      	BRNE _0x2020025
                 _0x2020024:
000236 e050      	LDI  R21,LOW(0)
000237 e013      	LDI  R17,LOW(3)
000238 3320      	CPI  R18,48
000239 f411      	BRNE _0x2020026
00023a 6800      	ORI  R16,LOW(128)
00023b c0eb      	RJMP _0x202001B
                 _0x2020026:
00023c c003      	RJMP _0x2020027
                 _0x2020025:
00023d 30e3      	CPI  R30,LOW(0x3)
00023e f009      	BREQ PC+2
00023f c0e7      	RJMP _0x202001B
                 _0x2020027:
000240 3320      	CPI  R18,48
000241 f010      	BRLO _0x202002A
000242 332a      	CPI  R18,58
000243 f008      	BRLO _0x202002B
                 _0x202002A:
000244 c007      	RJMP _0x2020029
                 _0x202002B:
000245 e0aa      	LDI  R26,LOW(10)
000246 9f5a      	MUL  R21,R26
000247 2d50      	MOV  R21,R0
000248 2fe2      	MOV  R30,R18
000249 53e0      	SUBI R30,LOW(48)
00024a 0f5e      	ADD  R21,R30
00024b c0db      	RJMP _0x202001B
                 _0x2020029:
00024c 2fe2      	MOV  R30,R18
00024d 36e3      	CPI  R30,LOW(0x63)
00024e f449      	BRNE _0x202002F
00024f 940e 03a6 	CALL SUBOPT_0x6
000251 89e8      	LDD  R30,Y+16
000252 89f9      	LDD  R31,Y+16+1
000253 81a4      	LDD  R26,Z+4
000254 93aa      	ST   -Y,R26
000255 940e 03ac 	CALL SUBOPT_0x7
000257 c0ce      	RJMP _0x2020030
                 _0x202002F:
000258 37e3      	CPI  R30,LOW(0x73)
000259 f441      	BRNE _0x2020032
00025a 940e 03a6 	CALL SUBOPT_0x6
00025c 940e 03b2 	CALL SUBOPT_0x8
00025e 940e 0364 	CALL _strlen
000260 2f1e      	MOV  R17,R30
000261 c00a      	RJMP _0x2020033
                 _0x2020032:
000262 37e0      	CPI  R30,LOW(0x70)
000263 f461      	BRNE _0x2020035
000264 940e 03a6 	CALL SUBOPT_0x6
000266 940e 03b2 	CALL SUBOPT_0x8
000268 940e 0370 	CALL _strlenf
00026a 2f1e      	MOV  R17,R30
00026b 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00026c 6002      	ORI  R16,LOW(2)
00026d 770f      	ANDI R16,LOW(127)
00026e e030      	LDI  R19,LOW(0)
00026f c034      	RJMP _0x2020036
                 _0x2020035:
000270 36e4      	CPI  R30,LOW(0x64)
000271 f011      	BREQ _0x2020039
000272 36e9      	CPI  R30,LOW(0x69)
000273 f411      	BRNE _0x202003A
                 _0x2020039:
000274 6004      	ORI  R16,LOW(4)
000275 c002      	RJMP _0x202003B
                 _0x202003A:
000276 37e5      	CPI  R30,LOW(0x75)
000277 f431      	BRNE _0x202003C
                 _0x202003B:
000278 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000279 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00027a 83ee      	STD  Y+6,R30
00027b 83ff      	STD  Y+6+1,R31
00027c e015      	LDI  R17,LOW(5)
00027d c00c      	RJMP _0x202003D
                 _0x202003C:
00027e 35e8      	CPI  R30,LOW(0x58)
00027f f411      	BRNE _0x202003F
000280 6008      	ORI  R16,LOW(8)
000281 c003      	RJMP _0x2020040
                 _0x202003F:
000282 37e8      	CPI  R30,LOW(0x78)
000283 f009      	BREQ PC+2
000284 c0a1      	RJMP _0x2020071
                 _0x2020040:
000285 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000286 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000287 83ee      	STD  Y+6,R30
000288 83ff      	STD  Y+6+1,R31
000289 e014      	LDI  R17,LOW(4)
                 _0x202003D:
00028a ff02      	SBRS R16,2
00028b c014      	RJMP _0x2020042
00028c 940e 03a6 	CALL SUBOPT_0x6
00028e 940e 03bc 	CALL SUBOPT_0x9
000290 85ab      	LDD  R26,Y+11
000291 23aa      	TST  R26
000292 f43a      	BRPL _0x2020043
000293 85ea      	LDD  R30,Y+10
000294 85fb      	LDD  R31,Y+10+1
000295 940e 03d9 	CALL __ANEGW1
000297 87ea      	STD  Y+10,R30
000298 87fb      	STD  Y+10+1,R31
000299 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00029a 3040      	CPI  R20,0
00029b f011      	BREQ _0x2020044
00029c 5f1f      	SUBI R17,-LOW(1)
00029d c001      	RJMP _0x2020045
                 _0x2020044:
00029e 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00029f c004      	RJMP _0x2020046
                 _0x2020042:
0002a0 940e 03a6 	CALL SUBOPT_0x6
0002a2 940e 03bc 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
0002a4 fd00      	SBRC R16,0
0002a5 c011      	RJMP _0x2020047
                 _0x2020048:
0002a6 1715      	CP   R17,R21
0002a7 f478      	BRSH _0x202004A
0002a8 ff07      	SBRS R16,7
0002a9 c008      	RJMP _0x202004B
0002aa ff02      	SBRS R16,2
0002ab c004      	RJMP _0x202004C
0002ac 7f0b      	ANDI R16,LOW(251)
0002ad 2f24      	MOV  R18,R20
0002ae 5011      	SUBI R17,LOW(1)
0002af c001      	RJMP _0x202004D
                 _0x202004C:
0002b0 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002b1 c001      	RJMP _0x202004E
                 _0x202004B:
0002b2 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002b3 940e 039f 	CALL SUBOPT_0x5
0002b5 5051      	SUBI R21,LOW(1)
0002b6 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002b7 2f31      	MOV  R19,R17
0002b8 ff01      	SBRS R16,1
0002b9 c017      	RJMP _0x202004F
                 _0x2020050:
0002ba 3030      	CPI  R19,0
0002bb f0a1      	BREQ _0x2020052
0002bc ff03      	SBRS R16,3
0002bd c006      	RJMP _0x2020053
0002be 81ee      	LDD  R30,Y+6
0002bf 81ff      	LDD  R31,Y+6+1
0002c0 9125      	LPM  R18,Z+
0002c1 83ee      	STD  Y+6,R30
0002c2 83ff      	STD  Y+6+1,R31
0002c3 c005      	RJMP _0x2020054
                 _0x2020053:
0002c4 81ae      	LDD  R26,Y+6
0002c5 81bf      	LDD  R27,Y+6+1
0002c6 912d      	LD   R18,X+
0002c7 83ae      	STD  Y+6,R26
0002c8 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002c9 940e 039f 	CALL SUBOPT_0x5
0002cb 3050      	CPI  R21,0
0002cc f009      	BREQ _0x2020055
0002cd 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002ce 5031      	SUBI R19,LOW(1)
0002cf cfea      	RJMP _0x2020050
                 _0x2020052:
0002d0 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002d1 e320      	LDI  R18,LOW(48)
0002d2 81ee      	LDD  R30,Y+6
0002d3 81ff      	LDD  R31,Y+6+1
0002d4 940e 03e1 	CALL __GETW1PF
0002d6 87e8      	STD  Y+8,R30
0002d7 87f9      	STD  Y+8+1,R31
0002d8 81ee      	LDD  R30,Y+6
0002d9 81ff      	LDD  R31,Y+6+1
0002da 9632      	ADIW R30,2
0002db 83ee      	STD  Y+6,R30
0002dc 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002dd 85e8      	LDD  R30,Y+8
0002de 85f9      	LDD  R31,Y+8+1
0002df 85aa      	LDD  R26,Y+10
0002e0 85bb      	LDD  R27,Y+10+1
0002e1 17ae      	CP   R26,R30
0002e2 07bf      	CPC  R27,R31
0002e3 f050      	BRLO _0x202005C
0002e4 5f2f      	SUBI R18,-LOW(1)
0002e5 85a8      	LDD  R26,Y+8
0002e6 85b9      	LDD  R27,Y+8+1
0002e7 85ea      	LDD  R30,Y+10
0002e8 85fb      	LDD  R31,Y+10+1
0002e9 1bea      	SUB  R30,R26
0002ea 0bfb      	SBC  R31,R27
0002eb 87ea      	STD  Y+10,R30
0002ec 87fb      	STD  Y+10+1,R31
0002ed cfef      	RJMP _0x202005A
                 _0x202005C:
0002ee 332a      	CPI  R18,58
0002ef f028      	BRLO _0x202005D
0002f0 ff03      	SBRS R16,3
0002f1 c002      	RJMP _0x202005E
0002f2 5f29      	SUBI R18,-LOW(7)
0002f3 c001      	RJMP _0x202005F
                 _0x202005E:
0002f4 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002f5 fd04      	SBRC R16,4
0002f6 c01a      	RJMP _0x2020061
0002f7 3321      	CPI  R18,49
0002f8 f420      	BRSH _0x2020063
0002f9 85a8      	LDD  R26,Y+8
0002fa 85b9      	LDD  R27,Y+8+1
0002fb 9711      	SBIW R26,1
0002fc f409      	BRNE _0x2020062
                 _0x2020063:
0002fd c009      	RJMP _0x20200CD
                 _0x2020062:
0002fe 1753      	CP   R21,R19
0002ff f010      	BRLO _0x2020067
000300 ff00      	SBRS R16,0
000301 c001      	RJMP _0x2020068
                 _0x2020067:
000302 c013      	RJMP _0x2020066
                 _0x2020068:
000303 e220      	LDI  R18,LOW(32)
000304 ff07      	SBRS R16,7
000305 c00b      	RJMP _0x2020069
000306 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000307 6100      	ORI  R16,LOW(16)
000308 ff02      	SBRS R16,2
000309 c007      	RJMP _0x202006A
00030a 7f0b      	ANDI R16,LOW(251)
00030b 934a      	ST   -Y,R20
00030c 940e 03ac 	CALL SUBOPT_0x7
00030e 3050      	CPI  R21,0
00030f f009      	BREQ _0x202006B
000310 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000311 940e 039f 	CALL SUBOPT_0x5
000313 3050      	CPI  R21,0
000314 f009      	BREQ _0x202006C
000315 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000316 5031      	SUBI R19,LOW(1)
000317 85a8      	LDD  R26,Y+8
000318 85b9      	LDD  R27,Y+8+1
000319 9712      	SBIW R26,2
00031a f008      	BRLO _0x2020059
00031b cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00031c ff00      	SBRS R16,0
00031d c008      	RJMP _0x202006D
                 _0x202006E:
00031e 3050      	CPI  R21,0
00031f f031      	BREQ _0x2020070
000320 5051      	SUBI R21,LOW(1)
000321 e2e0      	LDI  R30,LOW(32)
000322 93ea      	ST   -Y,R30
000323 940e 03ac 	CALL SUBOPT_0x7
000325 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000326 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000327 cee0      	RJMP _0x2020016
                 _0x2020018:
000328 85ac      	LDD  R26,Y+12
000329 85bd      	LDD  R27,Y+12+1
00032a 940e 03dd 	CALL __GETW1P
00032c 940e 03f1 	CALL __LOADLOCR6
00032e 9664      	ADIW R28,20
00032f 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000330 92ff      	PUSH R15
000331 2ef8      	MOV  R15,R24
000332 9726      	SBIW R28,6
000333 940e 03ec 	CALL __SAVELOCR4
000335 940e 03c4 	CALL SUBOPT_0xA
000337 9730      	SBIW R30,0
000338 f419      	BRNE _0x2020072
000339 efef      	LDI  R30,LOW(65535)
00033a efff      	LDI  R31,HIGH(65535)
00033b c023      	RJMP _0x2080001
                 _0x2020072:
00033c 01de      	MOVW R26,R28
00033d 9616      	ADIW R26,6
00033e 940e 03d5 	CALL __ADDW2R15
000340 018d      	MOVW R16,R26
000341 940e 03c4 	CALL SUBOPT_0xA
000343 83ee      	STD  Y+6,R30
000344 83ff      	STD  Y+6+1,R31
000345 e0e0      	LDI  R30,LOW(0)
000346 87e8      	STD  Y+8,R30
000347 87e9      	STD  Y+8+1,R30
000348 01de      	MOVW R26,R28
000349 961a      	ADIW R26,10
00034a 940e 03d5 	CALL __ADDW2R15
00034c 940e 03dd 	CALL __GETW1P
00034e 93fa      	ST   -Y,R31
00034f 93ea      	ST   -Y,R30
000350 931a      	ST   -Y,R17
000351 930a      	ST   -Y,R16
000352 ebec      	LDI  R30,LOW(_put_buff_G101)
000353 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000354 93fa      	ST   -Y,R31
000355 93ea      	ST   -Y,R30
000356 01de      	MOVW R26,R28
000357 961a      	ADIW R26,10
000358 dea3      	RCALL __print_G101
000359 019f      	MOVW R18,R30
00035a 81ae      	LDD  R26,Y+6
00035b 81bf      	LDD  R27,Y+6+1
00035c e0e0      	LDI  R30,LOW(0)
00035d 93ec      	ST   X,R30
00035e 01f9      	MOVW R30,R18
                 _0x2080001:
00035f 940e 03f3 	CALL __LOADLOCR4
000361 962a      	ADIW R28,10
000362 90ff      	POP  R15
000363 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000364 93ba      	ST   -Y,R27
000365 93aa      	ST   -Y,R26
000366 91a9          ld   r26,y+
000367 91b9          ld   r27,y+
000368 27ee          clr  r30
000369 27ff          clr  r31
                 strlen0:
00036a 916d          ld   r22,x+
00036b 2366          tst  r22
00036c f011          breq strlen1
00036d 9631          adiw r30,1
00036e cffb          rjmp strlen0
                 strlen1:
00036f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000370 93ba      	ST   -Y,R27
000371 93aa      	ST   -Y,R26
000372 27aa          clr  r26
000373 27bb          clr  r27
000374 91e9          ld   r30,y+
000375 91f9          ld   r31,y+
                 strlenf0:
000376 9005      	lpm  r0,z+
000377 2000          tst  r0
000378 f011          breq strlenf1
000379 9611          adiw r26,1
00037a cffb          rjmp strlenf0
                 strlenf1:
00037b 01fd          movw r30,r26
00037c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _line:
000160           	.BYTE 0x14
                 _temp:
000174           	.BYTE 0x12
                 __base_y_G100:
000186           	.BYTE 0x4
                 __lcd_maxx:
00018a           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00037d 940e 014c 	CALL _lcd_gotoxy
00037f e6e0      	LDI  R30,LOW(_line)
000380 e0f1      	LDI  R31,HIGH(_line)
000381 93fa      	ST   -Y,R31
000382 93ea      	ST   -Y,R30
000383 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
000384 2766      	CLR  R22
000385 2777      	CLR  R23
000386 940e 03e5 	CALL __PUTPARD1
000388 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000389 e180      	LDI  R24,16
00038a 940e 0330 	CALL _sprintf
00038c 9664      	ADIW R28,20
00038d e6a0      	LDI  R26,LOW(_line)
00038e e0b1      	LDI  R27,HIGH(_line)
00038f 940c 017c 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000391 940e 0140 	CALL __lcd_write_data
000393 e0a3      	LDI  R26,LOW(3)
000394 e0b0      	LDI  R27,0
000395 940c 03cb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000397 e3a0      	LDI  R26,LOW(48)
000398 940e 012c 	CALL __lcd_write_nibble_G100
                +
00039a ec88     +LDI R24 , LOW ( 200 )
00039b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00039c 9701     +SBIW R24 , 1
00039d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00039f 932a      	ST   -Y,R18
0003a0 85ad      	LDD  R26,Y+13
0003a1 85be      	LDD  R27,Y+13+1
0003a2 85ef      	LDD  R30,Y+15
0003a3 89f8      	LDD  R31,Y+15+1
0003a4 9509      	ICALL
0003a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0003a6 89e8      	LDD  R30,Y+16
0003a7 89f9      	LDD  R31,Y+16+1
0003a8 9734      	SBIW R30,4
0003a9 8be8      	STD  Y+16,R30
0003aa 8bf9      	STD  Y+16+1,R31
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0003ac 85ad      	LDD  R26,Y+13
0003ad 85be      	LDD  R27,Y+13+1
0003ae 85ef      	LDD  R30,Y+15
0003af 89f8      	LDD  R31,Y+15+1
0003b0 9509      	ICALL
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0003b2 89a8      	LDD  R26,Y+16
0003b3 89b9      	LDD  R27,Y+16+1
0003b4 9614      	ADIW R26,4
0003b5 940e 03dd 	CALL __GETW1P
0003b7 83ee      	STD  Y+6,R30
0003b8 83ff      	STD  Y+6+1,R31
0003b9 81ae      	LDD  R26,Y+6
0003ba 81bf      	LDD  R27,Y+6+1
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0003bc 89a8      	LDD  R26,Y+16
0003bd 89b9      	LDD  R27,Y+16+1
0003be 9614      	ADIW R26,4
0003bf 940e 03dd 	CALL __GETW1P
0003c1 87ea      	STD  Y+10,R30
0003c2 87fb      	STD  Y+10+1,R31
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003c4 01de      	MOVW R26,R28
0003c5 961c      	ADIW R26,12
0003c6 940e 03d5 	CALL __ADDW2R15
0003c8 940e 03dd 	CALL __GETW1P
0003ca 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003cb 9610      	adiw r26,0
0003cc f039      	breq __delay_ms1
                 __delay_ms0:
0003cd 95a8      	wdr
                +
0003ce ed80     +LDI R24 , LOW ( 0x7D0 )
0003cf e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003d0 9701     +SBIW R24 , 1
0003d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003d2 9711      	sbiw r26,1
0003d3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003d4 9508      	ret
                 
                 __ADDW2R15:
0003d5 2400      	CLR  R0
0003d6 0daf      	ADD  R26,R15
0003d7 1db0      	ADC  R27,R0
0003d8 9508      	RET
                 
                 __ANEGW1:
0003d9 95f1      	NEG  R31
0003da 95e1      	NEG  R30
0003db 40f0      	SBCI R31,0
0003dc 9508      	RET
                 
                 __GETW1P:
0003dd 91ed      	LD   R30,X+
0003de 91fc      	LD   R31,X
0003df 9711      	SBIW R26,1
0003e0 9508      	RET
                 
                 __GETW1PF:
0003e1 9005      	LPM  R0,Z+
0003e2 91f4      	LPM  R31,Z
0003e3 2de0      	MOV  R30,R0
0003e4 9508      	RET
                 
                 __PUTPARD1:
0003e5 937a      	ST   -Y,R23
0003e6 936a      	ST   -Y,R22
0003e7 93fa      	ST   -Y,R31
0003e8 93ea      	ST   -Y,R30
0003e9 9508      	RET
                 
                 __SAVELOCR6:
0003ea 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003eb 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003ec 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003ed 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003ee 931a      	ST   -Y,R17
0003ef 930a      	ST   -Y,R16
0003f0 9508      	RET
                 
                 __LOADLOCR6:
0003f1 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003f2 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003f3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003f4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003f5 8119      	LDD  R17,Y+1
0003f6 8108      	LD   R16,Y
0003f7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   6 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   4 r13:   4 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  27 r25:   5 r26: 102 r27:  41 r28:  14 r29:   1 r30: 220 r31:  78 
x  :  25 y  : 180 z  :  15 
Registers used: 26 out of 35 (74.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  61 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :  33 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  24 ld    :  31 ldd   :  76 ldi   :  99 
lds   :  19 lpm   :  14 lsl   :   1 lsr   :   1 mov   :  17 movw  :  17 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  45 pop   :   1 push  :   1 rcall :  15 ret   :  26 
reti  :   1 rjmp  :  59 rol   :   1 ror   :   1 sbc   :   1 sbci  :   2 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  70 std   :  31 sts   :   5 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 59 out of 116 (50.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007f0   1938     94   2032   16384  12.4%
[.dseg] 0x000060 0x00018b      0     43     43    1024   4.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
