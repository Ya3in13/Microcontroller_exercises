
AVRASM ver. 2.1.30  C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm Sat May 24 02:05:14 2025

C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _t1=R4
                 	.DEF _t1_msb=R5
                 	.DEF _t2=R6
                 	.DEF _t2_msb=R7
                 	.DEF _akh=R8
                 	.DEF _akh_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0051 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 007e 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x0:
000034 7953
000035 7473
000036 6d65
000037 4f20      	.DB  0x53,0x79,0x73,0x74,0x65,0x6D,0x20,0x4F
000038 204e
000039 5300
00003a 7379
00003b 6574      	.DB  0x4E,0x20,0x0,0x53,0x79,0x73,0x74,0x65
00003c 206d
00003d 464f
00003e 2046
00003f 5400      	.DB  0x6D,0x20,0x4F,0x46,0x46,0x20,0x0,0x54
000040 6d65
000041 3d70
000042 2d25
000043 6433      	.DB  0x65,0x6D,0x70,0x3D,0x25,0x2D,0x33,0x64
000044 4553
000045 3d54
000046 2d25
000047 6433      	.DB  0x53,0x45,0x54,0x3D,0x25,0x2D,0x33,0x64
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1143): warning: .cseg .db misalignment - padding zero byte
000048 0000      	.DB  0x0
                 _0x2000003:
000049 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004a 0001      	.DW  0x01
00004b 0002      	.DW  0x02
00004c 0066      	.DW  __REG_BIT_VARS*2
                 
00004d 0002      	.DW  0x02
00004e 0179      	.DW  __base_y_G100
00004f 0092      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000050 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000051 94f8      	CLI
000052 27ee      	CLR  R30
000053 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000054 e0f1      	LDI  R31,1
000055 bffb      	OUT  GICR,R31
000056 bfeb      	OUT  GICR,R30
000057 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000058 e08d      	LDI  R24,(14-2)+1
000059 e0a2      	LDI  R26,2
00005a 27bb      	CLR  R27
                 __CLEAR_REG:
00005b 93ed      	ST   X+,R30
00005c 958a      	DEC  R24
00005d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000060 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000061 93ed      	ST   X+,R30
000062 9701      	SBIW R24,1
000063 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000064 e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000065 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000066 9185      	LPM  R24,Z+
000067 9195      	LPM  R25,Z+
000068 9700      	SBIW R24,0
000069 f061      	BREQ __GLOBAL_INI_END
00006a 91a5      	LPM  R26,Z+
00006b 91b5      	LPM  R27,Z+
00006c 9005      	LPM  R0,Z+
00006d 9015      	LPM  R1,Z+
00006e 01bf      	MOVW R22,R30
00006f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000070 9005      	LPM  R0,Z+
000071 920d      	ST   X+,R0
000072 9701      	SBIW R24,1
000073 f7e1      	BRNE __GLOBAL_INI_LOOP
000074 01fb      	MOVW R30,R22
000075 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000076 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000077 bfed      	OUT  SPL,R30
000078 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000079 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007c 940c 00ab 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 1
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1],t1,t2,akh;
                 ;unsigned char line[20];
                 ;bit ste;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;
                 ;interrupt [ADC_INT] void adc_isr(void){
                 ; 0000 000D interrupt [15] void adc_isr(void){
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
00007e 938a      	ST   -Y,R24
00007f 93aa      	ST   -Y,R26
000080 93ba      	ST   -Y,R27
000081 93ea      	ST   -Y,R30
000082 93fa      	ST   -Y,R31
000083 b7ef      	IN   R30,SREG
000084 93ea      	ST   -Y,R30
                 ; 0000 000E static unsigned char input_index=0;
                 ; 0000 000F adc_data[input_index]=ADCW;
000085 91e0 0178 	LDS  R30,_input_index_S0000000000
000087 e6a0      	LDI  R26,LOW(_adc_data)
000088 e0b1      	LDI  R27,HIGH(_adc_data)
000089 e0f0      	LDI  R31,0
00008a 0fee      	LSL  R30
00008b 1fff      	ROL  R31
00008c 0fae      	ADD  R26,R30
00008d 1fbf      	ADC  R27,R31
00008e b1e4      	IN   R30,0x4
00008f b1f5      	IN   R31,0x4+1
000090 93ed      	ST   X+,R30
000091 93fc      	ST   X,R31
                 ; 0000 0010 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000092 91a0 0178 	LDS  R26,_input_index_S0000000000
000094 5faf      	SUBI R26,-LOW(1)
000095 93a0 0178 	STS  _input_index_S0000000000,R26
000097 30a2      	CPI  R26,LOW(0x2)
000098 f018      	BRLO _0x3
                 ; 0000 0011    input_index=0;
000099 e0e0      	LDI  R30,LOW(0)
00009a 93e0 0178 	STS  _input_index_S0000000000,R30
                 ; 0000 0012 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x3:
00009c 91e0 0178 	LDS  R30,_input_index_S0000000000
00009e b9e7      	OUT  0x7,R30
                 ; 0000 0013 delay_us(10);
                +
00009f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a0 958a     +DEC R24
0000a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0014 ADCSRA|=(1<<ADSC);
0000a2 9a36      	SBI  0x6,6
                 ; 0000 0015 }
0000a3 91e9      	LD   R30,Y+
0000a4 bfef      	OUT  SREG,R30
0000a5 91f9      	LD   R31,Y+
0000a6 91e9      	LD   R30,Y+
0000a7 91b9      	LD   R27,Y+
0000a8 91a9      	LD   R26,Y+
0000a9 9189      	LD   R24,Y+
0000aa 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0017 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0018 {
                 ; 0000 0019 // Declare your local variables here
                 ; 0000 001A 
                 ; 0000 001B // Input/Output Ports initialization
                 ; 0000 001C // Port A initialization
                 ; 0000 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001E DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ab e0e0      	LDI  R30,LOW(0)
0000ac bbea      	OUT  0x1A,R30
                 ; 0000 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0020 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (0<<PORTA0);
0000ad efee      	LDI  R30,LOW(254)
0000ae bbeb      	OUT  0x1B,R30
                 ; 0000 0021 
                 ; 0000 0022 // Port B initialization
                 ; 0000 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0024 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000af e0e0      	LDI  R30,LOW(0)
0000b0 bbe7      	OUT  0x17,R30
                 ; 0000 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0026 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000b1 bbe8      	OUT  0x18,R30
                 ; 0000 0027 
                 ; 0000 0028 // Port C initialization
                 ; 0000 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002A DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000b2 bbe4      	OUT  0x14,R30
                 ; 0000 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002C PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b3 bbe5      	OUT  0x15,R30
                 ; 0000 002D 
                 ; 0000 002E // Port D initialization
                 ; 0000 002F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0030 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000b4 efef      	LDI  R30,LOW(255)
0000b5 bbe1      	OUT  0x11,R30
                 ; 0000 0031 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0032 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bbe2      	OUT  0x12,R30
                 ; 0000 0033 
                 ; 0000 0034 // Timer/Counter 0 initialization
                 ; 0000 0035 // Clock source: System Clock
                 ; 0000 0036 // Clock value: Timer 0 Stopped
                 ; 0000 0037 // Mode: Normal top=0xFF
                 ; 0000 0038 // OC0 output: Disconnected
                 ; 0000 0039 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000b8 bfe3      	OUT  0x33,R30
                 ; 0000 003A TCNT0=0x00;
0000b9 bfe2      	OUT  0x32,R30
                 ; 0000 003B OCR0=0x00;
0000ba bfec      	OUT  0x3C,R30
                 ; 0000 003C 
                 ; 0000 003D // Timer/Counter 1 initialization
                 ; 0000 003E // Clock source: System Clock
                 ; 0000 003F // Clock value: Timer1 Stopped
                 ; 0000 0040 // Mode: Normal top=0xFFFF
                 ; 0000 0041 // OC1A output: Disconnected
                 ; 0000 0042 // OC1B output: Disconnected
                 ; 0000 0043 // Noise Canceler: Off
                 ; 0000 0044 // Input Capture on Falling Edge
                 ; 0000 0045 // Timer1 Overflow Interrupt: Off
                 ; 0000 0046 // Input Capture Interrupt: Off
                 ; 0000 0047 // Compare A Match Interrupt: Off
                 ; 0000 0048 // Compare B Match Interrupt: Off
                 ; 0000 0049 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000bb bdef      	OUT  0x2F,R30
                 ; 0000 004A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000bc bdee      	OUT  0x2E,R30
                 ; 0000 004B TCNT1H=0x00;
0000bd bded      	OUT  0x2D,R30
                 ; 0000 004C TCNT1L=0x00;
0000be bdec      	OUT  0x2C,R30
                 ; 0000 004D ICR1H=0x00;
0000bf bde7      	OUT  0x27,R30
                 ; 0000 004E ICR1L=0x00;
0000c0 bde6      	OUT  0x26,R30
                 ; 0000 004F OCR1AH=0x00;
0000c1 bdeb      	OUT  0x2B,R30
                 ; 0000 0050 OCR1AL=0x00;
0000c2 bdea      	OUT  0x2A,R30
                 ; 0000 0051 OCR1BH=0x00;
0000c3 bde9      	OUT  0x29,R30
                 ; 0000 0052 OCR1BL=0x00;
0000c4 bde8      	OUT  0x28,R30
                 ; 0000 0053 
                 ; 0000 0054 // Timer/Counter 2 initialization
                 ; 0000 0055 // Clock source: System Clock
                 ; 0000 0056 // Clock value: Timer2 Stopped
                 ; 0000 0057 // Mode: Normal top=0xFF
                 ; 0000 0058 // OC2 output: Disconnected
                 ; 0000 0059 ASSR=0<<AS2;
0000c5 bde2      	OUT  0x22,R30
                 ; 0000 005A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000c6 bde5      	OUT  0x25,R30
                 ; 0000 005B TCNT2=0x00;
0000c7 bde4      	OUT  0x24,R30
                 ; 0000 005C OCR2=0x00;
0000c8 bde3      	OUT  0x23,R30
                 ; 0000 005D 
                 ; 0000 005E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c9 bfe9      	OUT  0x39,R30
                 ; 0000 0060 
                 ; 0000 0061 // External Interrupt(s) initialization
                 ; 0000 0062 // INT0: Off
                 ; 0000 0063 // INT1: Off
                 ; 0000 0064 // INT2: Off
                 ; 0000 0065 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000ca bfe5      	OUT  0x35,R30
                 ; 0000 0066 MCUCSR=(0<<ISC2);
0000cb bfe4      	OUT  0x34,R30
                 ; 0000 0067 
                 ; 0000 0068 // USART initialization
                 ; 0000 0069 // USART disabled
                 ; 0000 006A UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000cc b9ea      	OUT  0xA,R30
                 ; 0000 006B 
                 ; 0000 006C // Analog Comparator initialization
                 ; 0000 006D // Analog Comparator: Off
                 ; 0000 006E // The Analog Comparator's positive input is
                 ; 0000 006F // connected to the AIN0 pin
                 ; 0000 0070 // The Analog Comparator's negative input is
                 ; 0000 0071 // connected to the AIN1 pin
                 ; 0000 0072 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000cd e8e0      	LDI  R30,LOW(128)
0000ce b9e8      	OUT  0x8,R30
                 ; 0000 0073 
                 ; 0000 0074 // ADC initialization
                 ; 0000 0075 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0076 // ADC Voltage Reference: AREF pin
                 ; 0000 0077 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0078 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 b9e7      	OUT  0x7,R30
                 ; 0000 0079 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000d1 eceb      	LDI  R30,LOW(203)
0000d2 b9e6      	OUT  0x6,R30
                 ; 0000 007A SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 bfe0      	OUT  0x30,R30
                 ; 0000 007B 
                 ; 0000 007C // SPI initialization
                 ; 0000 007D // SPI disabled
                 ; 0000 007E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d5 b9ed      	OUT  0xD,R30
                 ; 0000 007F 
                 ; 0000 0080 // TWI initialization
                 ; 0000 0081 // TWI disabled
                 ; 0000 0082 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d6 bfe6      	OUT  0x36,R30
                 ; 0000 0083 
                 ; 0000 0084 // Alphanumeric LCD initialization
                 ; 0000 0085 // Connections are specified in the
                 ; 0000 0086 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0087 // RS - PORTC Bit 0
                 ; 0000 0088 // RD - PORTC Bit 1
                 ; 0000 0089 // EN - PORTC Bit 2
                 ; 0000 008A // D4 - PORTC Bit 4
                 ; 0000 008B // D5 - PORTC Bit 5
                 ; 0000 008C // D6 - PORTC Bit 6
                 ; 0000 008D // D7 - PORTC Bit 7
                 ; 0000 008E // Characters/line: 20
                 ; 0000 008F lcd_init(20);
0000d7 e1a4      	LDI  R26,LOW(20)
0000d8 d0d8      	RCALL _lcd_init
                 ; 0000 0090 
                 ; 0000 0091 // Global enable interrupts
                 ; 0000 0092 #asm("sei")                            }
0000d9 9478      	sei
                 ; 0000 0093 
                 ; 0000 0094     while(1){
                 _0x4:
                 ; 0000 0095         if(!PINA.2){ste=1;PORTD.2=1;lcd_gotoxy(3,1);lcd_putsf("System ON ");}
0000da 99ca      	SBIC 0x19,2
0000db c00a      	RJMP _0x7
0000dc 9468      	SET
0000dd f820      	BLD  R2,0
0000de 9a92      	SBI  0x12,2
0000df e0e3      	LDI  R30,LOW(3)
0000e0 93ea      	ST   -Y,R30
0000e1 e0a1      	LDI  R26,LOW(1)
0000e2 d07e      	RCALL _lcd_gotoxy
                +
0000e3 e6a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000e4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e5 d0b8      	RCALL _lcd_putsf
                 ; 0000 0096         if(!PINA.3){ste=0;PORTD.2=0;lcd_gotoxy(3,1);lcd_putsf("System OFF ");}
                 _0x7:
0000e6 99cb      	SBIC 0x19,3
0000e7 c00a      	RJMP _0xA
0000e8 94e8      	CLT
0000e9 f820      	BLD  R2,0
0000ea 9892      	CBI  0x12,2
0000eb e0e3      	LDI  R30,LOW(3)
0000ec 93ea      	ST   -Y,R30
0000ed e0a1      	LDI  R26,LOW(1)
0000ee d072      	RCALL _lcd_gotoxy
                +
0000ef e7a3     +LDI R26 , LOW ( 2 * _0x0 + ( 11 ) )
0000f0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW2FN _0x0,11
0000f1 d0ac      	RCALL _lcd_putsf
                 ; 0000 0097         t1=adc_data[0]/2;
                 _0xA:
0000f2 91e0 0160 	LDS  R30,_adc_data
0000f4 91f0 0161 	LDS  R31,_adc_data+1
0000f6 95f6      	LSR  R31
0000f7 95e7      	ROR  R30
0000f8 012f      	MOVW R4,R30
                 ; 0000 0098         t2=16+adc_data[1]/64;
                +
0000f9 91e0 0162+LDS R30 , _adc_data + ( 2 )
0000fb 91f0 0163+LDS R31 , _adc_data + ( 2 ) + 1
                 	__GETW1MN _adc_data,2
0000fd 940e 03f0 	CALL __LSRW2
0000ff 940e 03ec 	CALL __LSRW4
000101 9670      	ADIW R30,16
000102 013f      	MOVW R6,R30
                 ; 0000 0099         akh =t1-t2;
000103 01f2      	MOVW R30,R4
000104 19e6      	SUB  R30,R6
000105 09f7      	SBC  R31,R7
000106 014f      	MOVW R8,R30
                 ; 0000 009A         if(ste){
000107 fe20      	SBRS R2,0
000108 c017      	RJMP _0xD
                 ; 0000 009B             if(akh>50){
000109 e3e2      	LDI  R30,LOW(50)
00010a e0f0      	LDI  R31,HIGH(50)
00010b 15e8      	CP   R30,R8
00010c 05f9      	CPC  R31,R9
00010d f410      	BRSH _0xE
                 ; 0000 009C             PORTD.0=0;
00010e 9890      	CBI  0x12,0
                 ; 0000 009D             PORTD.1=0;
00010f c00e      	RJMP _0x25
                 ; 0000 009E             }else if(akh<3){
                 _0xE:
000110 e0e3      	LDI  R30,LOW(3)
000111 e0f0      	LDI  R31,HIGH(3)
000112 168e      	CP   R8,R30
000113 069f      	CPC  R9,R31
000114 f418      	BRSH _0x14
                 ; 0000 009F             PORTD.0=0;
000115 9890      	CBI  0x12,0
                 ; 0000 00A0             PORTD.1=1;
000116 9a91      	SBI  0x12,1
                 ; 0000 00A1             }else if(akh>3){
000117 c007      	RJMP _0x19
                 _0x14:
000118 e0e3      	LDI  R30,LOW(3)
000119 e0f0      	LDI  R31,HIGH(3)
00011a 15e8      	CP   R30,R8
00011b 05f9      	CPC  R31,R9
00011c f410      	BRSH _0x1A
                 ; 0000 00A2             PORTD.0=1;
00011d 9a90      	SBI  0x12,0
                 ; 0000 00A3             PORTD.1=0;}
                 _0x25:
00011e 9891      	CBI  0x12,1
                 ; 0000 00A4         }else{
                 _0x1A:
                 _0x19:
00011f c002      	RJMP _0x1F
                 _0xD:
                 ; 0000 00A5             PORTD.0=0;
000120 9890      	CBI  0x12,0
                 ; 0000 00A6             PORTD.1=0;}
000121 9891      	CBI  0x12,1
                 _0x1F:
                 ; 0000 00A7 
                 ; 0000 00A8         lcd_gotoxy(0,0);
000122 e0e0      	LDI  R30,LOW(0)
000123 93ea      	ST   -Y,R30
000124 e0a0      	LDI  R26,LOW(0)
000125 d03b      	RCALL _lcd_gotoxy
                 ; 0000 00A9         sprintf(line,"Temp=%-3dSET=%-3d", t1,t2);
000126 e6e4      	LDI  R30,LOW(_line)
000127 e0f1      	LDI  R31,HIGH(_line)
000128 93fa      	ST   -Y,R31
000129 93ea      	ST   -Y,R30
                +
00012a e7ef     +LDI R30 , LOW ( 2 * _0x0 + ( 23 ) )
00012b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW1FN _0x0,23
00012c 93fa      	ST   -Y,R31
00012d 93ea      	ST   -Y,R30
00012e 01f2      	MOVW R30,R4
00012f 2766      	CLR  R22
000130 2777      	CLR  R23
000131 940e 03fd 	CALL __PUTPARD1
000133 01f3      	MOVW R30,R6
000134 2766      	CLR  R22
000135 2777      	CLR  R23
000136 940e 03fd 	CALL __PUTPARD1
000138 e088      	LDI  R24,8
000139 940e 0353 	CALL _sprintf
00013b 962c      	ADIW R28,12
                 ; 0000 00AA         lcd_puts(line);
00013c e6a4      	LDI  R26,LOW(_line)
00013d e0b1      	LDI  R27,HIGH(_line)
00013e d050      	RCALL _lcd_puts
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD       }
00013f cf9a      	RJMP _0x4
                 ; 0000 00AE }
                 _0x24:
000140 cfff      	RJMP _0x24
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000141 93aa      	ST   -Y,R26
000142 b3e5      	IN   R30,0x15
000143 70ef      	ANDI R30,LOW(0xF)
000144 2fae      	MOV  R26,R30
000145 81e8      	LD   R30,Y
000146 7fe0      	ANDI R30,LOW(0xF0)
000147 2bea      	OR   R30,R26
000148 bbe5      	OUT  0x15,R30
                +
000149 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014a 958a     +DEC R24
00014b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014c 9aaa      	SBI  0x15,2
                +
00014d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014e 958a     +DEC R24
00014f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000150 98aa      	CBI  0x15,2
                +
000151 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000152 958a     +DEC R24
000153 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000154 c088      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000155 93aa      	ST   -Y,R26
000156 81a8      	LD   R26,Y
000157 dfe9      	RCALL __lcd_write_nibble_G100
000158 81e8          ld    r30,y
000159 95e2          swap  r30
00015a 83e8          st    y,r30
00015b 81a8      	LD   R26,Y
00015c dfe4      	RCALL __lcd_write_nibble_G100
                +
00015d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00015e 958a     +DEC R24
00015f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000160 c07c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000161 93aa      	ST   -Y,R26
000162 81e8      	LD   R30,Y
000163 e0f0      	LDI  R31,0
000164 58e7      	SUBI R30,LOW(-__base_y_G100)
000165 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000166 81e0      	LD   R30,Z
000167 81a9      	LDD  R26,Y+1
000168 0fae      	ADD  R26,R30
000169 dfeb      	RCALL __lcd_write_data
00016a 80b9      	LDD  R11,Y+1
00016b 80a8      	LDD  R10,Y+0
00016c 9622      	ADIW R28,2
00016d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00016e e0a2      	LDI  R26,LOW(2)
00016f 940e 03a0 	CALL SUBOPT_0x0
000171 e0ac      	LDI  R26,LOW(12)
000172 dfe2      	RCALL __lcd_write_data
000173 e0a1      	LDI  R26,LOW(1)
000174 940e 03a0 	CALL SUBOPT_0x0
000176 e0e0      	LDI  R30,LOW(0)
000177 2eae      	MOV  R10,R30
000178 2ebe      	MOV  R11,R30
000179 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00017a 93aa      	ST   -Y,R26
00017b 81a8      	LD   R26,Y
00017c 30aa      	CPI  R26,LOW(0xA)
00017d f011      	BREQ _0x2000005
00017e 14bd      	CP   R11,R13
00017f f048      	BRLO _0x2000004
                 _0x2000005:
000180 e0e0      	LDI  R30,LOW(0)
000181 93ea      	ST   -Y,R30
000182 94a3      	INC  R10
000183 2daa      	MOV  R26,R10
000184 dfdc      	RCALL _lcd_gotoxy
000185 81a8      	LD   R26,Y
000186 30aa      	CPI  R26,LOW(0xA)
000187 f409      	BRNE _0x2000007
000188 c054      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000189 94b3      	INC  R11
00018a 9aa8      	SBI  0x15,0
00018b 81a8      	LD   R26,Y
00018c dfc8      	RCALL __lcd_write_data
00018d 98a8      	CBI  0x15,0
00018e c04e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00018f 93ba      	ST   -Y,R27
000190 93aa      	ST   -Y,R26
000191 931a      	ST   -Y,R17
                 _0x2000008:
000192 81a9      	LDD  R26,Y+1
000193 81ba      	LDD  R27,Y+1+1
000194 91ed      	LD   R30,X+
000195 83a9      	STD  Y+1,R26
000196 83ba      	STD  Y+1+1,R27
000197 2f1e      	MOV  R17,R30
000198 30e0      	CPI  R30,0
000199 f019      	BREQ _0x200000A
00019a 2fa1      	MOV  R26,R17
00019b dfde      	RCALL _lcd_putchar
00019c cff5      	RJMP _0x2000008
                 _0x200000A:
00019d c010      	RJMP _0x2080003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00019e 93ba      	ST   -Y,R27
00019f 93aa      	ST   -Y,R26
0001a0 931a      	ST   -Y,R17
                 _0x200000B:
0001a1 81e9      	LDD  R30,Y+1
0001a2 81fa      	LDD  R31,Y+1+1
0001a3 9631      	ADIW R30,1
0001a4 83e9      	STD  Y+1,R30
0001a5 83fa      	STD  Y+1+1,R31
0001a6 9731      	SBIW R30,1
0001a7 91e4      	LPM  R30,Z
0001a8 2f1e      	MOV  R17,R30
0001a9 30e0      	CPI  R30,0
0001aa f019      	BREQ _0x200000D
0001ab 2fa1      	MOV  R26,R17
0001ac dfcd      	RCALL _lcd_putchar
0001ad cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x2080003:
0001ae 8118      	LDD  R17,Y+0
0001af 9623      	ADIW R28,3
0001b0 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001b1 93aa      	ST   -Y,R26
0001b2 b3e4      	IN   R30,0x14
0001b3 6fe0      	ORI  R30,LOW(0xF0)
0001b4 bbe4      	OUT  0x14,R30
0001b5 9aa2      	SBI  0x14,2
0001b6 9aa0      	SBI  0x14,0
0001b7 9aa1      	SBI  0x14,1
0001b8 98aa      	CBI  0x15,2
0001b9 98a8      	CBI  0x15,0
0001ba 98a9      	CBI  0x15,1
0001bb 80d8      	LDD  R13,Y+0
0001bc 81e8      	LD   R30,Y
0001bd 58e0      	SUBI R30,-LOW(128)
                +
0001be 93e0 017b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001c0 81e8      	LD   R30,Y
0001c1 54e0      	SUBI R30,-LOW(192)
                +
0001c2 93e0 017c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001c4 e1a4      	LDI  R26,LOW(20)
0001c5 e0b0      	LDI  R27,0
0001c6 940e 03da 	CALL _delay_ms
0001c8 940e 03a6 	CALL SUBOPT_0x1
0001ca 940e 03a6 	CALL SUBOPT_0x1
0001cc 940e 03a6 	CALL SUBOPT_0x1
0001ce e2a0      	LDI  R26,LOW(32)
0001cf df71      	RCALL __lcd_write_nibble_G100
                +
0001d0 ec88     +LDI R24 , LOW ( 200 )
0001d1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001d2 9701     +SBIW R24 , 1
0001d3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001d4 e2a8      	LDI  R26,LOW(40)
0001d5 df7f      	RCALL __lcd_write_data
0001d6 e0a4      	LDI  R26,LOW(4)
0001d7 df7d      	RCALL __lcd_write_data
0001d8 e8a5      	LDI  R26,LOW(133)
0001d9 df7b      	RCALL __lcd_write_data
0001da e0a6      	LDI  R26,LOW(6)
0001db df79      	RCALL __lcd_write_data
0001dc df91      	RCALL _lcd_clear
                 _0x2080002:
0001dd 9621      	ADIW R28,1
0001de 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001df 93ba      	ST   -Y,R27
0001e0 93aa      	ST   -Y,R26
0001e1 931a      	ST   -Y,R17
0001e2 930a      	ST   -Y,R16
0001e3 81aa      	LDD  R26,Y+2
0001e4 81bb      	LDD  R27,Y+2+1
0001e5 9612      	ADIW R26,2
0001e6 940e 03f5 	CALL __GETW1P
0001e8 9730      	SBIW R30,0
0001e9 f159      	BREQ _0x2020010
0001ea 81aa      	LDD  R26,Y+2
0001eb 81bb      	LDD  R27,Y+2+1
0001ec 9614      	ADIW R26,4
0001ed 940e 03f5 	CALL __GETW1P
0001ef 018f      	MOVW R16,R30
0001f0 9730      	SBIW R30,0
0001f1 f061      	BREQ _0x2020012
                +
0001f2 3002     +CPI R16 , LOW ( 2 )
0001f3 e0e0     +LDI R30 , HIGH ( 2 )
0001f4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001f5 f098      	BRLO _0x2020013
0001f6 01f8      	MOVW R30,R16
0001f7 9731      	SBIW R30,1
0001f8 018f      	MOVW R16,R30
                +
0001f9 81aa     +LDD R26 , Y + 2
0001fa 81bb     +LDD R27 , Y + 2 + 1
0001fb 9614     +ADIW R26 , 4
0001fc 93ed     +ST X + , R30
0001fd 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001fe 81aa      	LDD  R26,Y+2
0001ff 81bb      	LDD  R27,Y+2+1
000200 9612      	ADIW R26,2
000201 91ed      	LD   R30,X+
000202 91fd      	LD   R31,X+
000203 9631      	ADIW R30,1
000204 93fe      	ST   -X,R31
000205 93ee      	ST   -X,R30
000206 9731      	SBIW R30,1
000207 81ac      	LDD  R26,Y+4
000208 83a0      	STD  Z+0,R26
                 _0x2020013:
000209 81aa      	LDD  R26,Y+2
00020a 81bb      	LDD  R27,Y+2+1
00020b 940e 03f5 	CALL __GETW1P
00020d 23ff      	TST  R31
00020e f02a      	BRMI _0x2020014
00020f 91ed      	LD   R30,X+
000210 91fd      	LD   R31,X+
000211 9631      	ADIW R30,1
000212 93fe      	ST   -X,R31
000213 93ee      	ST   -X,R30
                 _0x2020014:
000214 c006      	RJMP _0x2020015
                 _0x2020010:
000215 81aa      	LDD  R26,Y+2
000216 81bb      	LDD  R27,Y+2+1
000217 efef      	LDI  R30,LOW(65535)
000218 efff      	LDI  R31,HIGH(65535)
000219 93ed      	ST   X+,R30
00021a 93fc      	ST   X,R31
                 _0x2020015:
00021b 8119      	LDD  R17,Y+1
00021c 8108      	LDD  R16,Y+0
00021d 9625      	ADIW R28,5
00021e 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
00021f 93ba      	ST   -Y,R27
000220 93aa      	ST   -Y,R26
000221 9726      	SBIW R28,6
000222 940e 0402 	CALL __SAVELOCR6
000224 e010      	LDI  R17,0
000225 85ac      	LDD  R26,Y+12
000226 85bd      	LDD  R27,Y+12+1
000227 e0e0      	LDI  R30,LOW(0)
000228 e0f0      	LDI  R31,HIGH(0)
000229 93ed      	ST   X+,R30
00022a 93fc      	ST   X,R31
                 _0x2020016:
00022b 89ea      	LDD  R30,Y+18
00022c 89fb      	LDD  R31,Y+18+1
00022d 9631      	ADIW R30,1
00022e 8bea      	STD  Y+18,R30
00022f 8bfb      	STD  Y+18+1,R31
000230 9731      	SBIW R30,1
000231 91e4      	LPM  R30,Z
000232 2f2e      	MOV  R18,R30
000233 30e0      	CPI  R30,0
000234 f409      	BRNE PC+2
000235 c115      	RJMP _0x2020018
000236 2fe1      	MOV  R30,R17
000237 30e0      	CPI  R30,0
000238 f439      	BRNE _0x202001C
000239 3225      	CPI  R18,37
00023a f411      	BRNE _0x202001D
00023b e011      	LDI  R17,LOW(1)
00023c c002      	RJMP _0x202001E
                 _0x202001D:
00023d 940e 03ae 	CALL SUBOPT_0x2
                 _0x202001E:
00023f c10a      	RJMP _0x202001B
                 _0x202001C:
000240 30e1      	CPI  R30,LOW(0x1)
000241 f4a9      	BRNE _0x202001F
000242 3225      	CPI  R18,37
000243 f419      	BRNE _0x2020020
000244 940e 03ae 	CALL SUBOPT_0x2
000246 c102      	RJMP _0x20200CC
                 _0x2020020:
000247 e012      	LDI  R17,LOW(2)
000248 e040      	LDI  R20,LOW(0)
000249 e000      	LDI  R16,LOW(0)
00024a 322d      	CPI  R18,45
00024b f411      	BRNE _0x2020021
00024c e001      	LDI  R16,LOW(1)
00024d c0fc      	RJMP _0x202001B
                 _0x2020021:
00024e 322b      	CPI  R18,43
00024f f411      	BRNE _0x2020022
000250 e24b      	LDI  R20,LOW(43)
000251 c0f8      	RJMP _0x202001B
                 _0x2020022:
000252 3220      	CPI  R18,32
000253 f411      	BRNE _0x2020023
000254 e240      	LDI  R20,LOW(32)
000255 c0f4      	RJMP _0x202001B
                 _0x2020023:
000256 c002      	RJMP _0x2020024
                 _0x202001F:
000257 30e2      	CPI  R30,LOW(0x2)
000258 f439      	BRNE _0x2020025
                 _0x2020024:
000259 e050      	LDI  R21,LOW(0)
00025a e013      	LDI  R17,LOW(3)
00025b 3320      	CPI  R18,48
00025c f411      	BRNE _0x2020026
00025d 6800      	ORI  R16,LOW(128)
00025e c0eb      	RJMP _0x202001B
                 _0x2020026:
00025f c003      	RJMP _0x2020027
                 _0x2020025:
000260 30e3      	CPI  R30,LOW(0x3)
000261 f009      	BREQ PC+2
000262 c0e7      	RJMP _0x202001B
                 _0x2020027:
000263 3320      	CPI  R18,48
000264 f010      	BRLO _0x202002A
000265 332a      	CPI  R18,58
000266 f008      	BRLO _0x202002B
                 _0x202002A:
000267 c007      	RJMP _0x2020029
                 _0x202002B:
000268 e0aa      	LDI  R26,LOW(10)
000269 9f5a      	MUL  R21,R26
00026a 2d50      	MOV  R21,R0
00026b 2fe2      	MOV  R30,R18
00026c 53e0      	SUBI R30,LOW(48)
00026d 0f5e      	ADD  R21,R30
00026e c0db      	RJMP _0x202001B
                 _0x2020029:
00026f 2fe2      	MOV  R30,R18
000270 36e3      	CPI  R30,LOW(0x63)
000271 f449      	BRNE _0x202002F
000272 940e 03b5 	CALL SUBOPT_0x3
000274 89e8      	LDD  R30,Y+16
000275 89f9      	LDD  R31,Y+16+1
000276 81a4      	LDD  R26,Z+4
000277 93aa      	ST   -Y,R26
000278 940e 03bb 	CALL SUBOPT_0x4
00027a c0ce      	RJMP _0x2020030
                 _0x202002F:
00027b 37e3      	CPI  R30,LOW(0x73)
00027c f441      	BRNE _0x2020032
00027d 940e 03b5 	CALL SUBOPT_0x3
00027f 940e 03c1 	CALL SUBOPT_0x5
000281 940e 0387 	CALL _strlen
000283 2f1e      	MOV  R17,R30
000284 c00a      	RJMP _0x2020033
                 _0x2020032:
000285 37e0      	CPI  R30,LOW(0x70)
000286 f461      	BRNE _0x2020035
000287 940e 03b5 	CALL SUBOPT_0x3
000289 940e 03c1 	CALL SUBOPT_0x5
00028b 940e 0393 	CALL _strlenf
00028d 2f1e      	MOV  R17,R30
00028e 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00028f 6002      	ORI  R16,LOW(2)
000290 770f      	ANDI R16,LOW(127)
000291 e030      	LDI  R19,LOW(0)
000292 c034      	RJMP _0x2020036
                 _0x2020035:
000293 36e4      	CPI  R30,LOW(0x64)
000294 f011      	BREQ _0x2020039
000295 36e9      	CPI  R30,LOW(0x69)
000296 f411      	BRNE _0x202003A
                 _0x2020039:
000297 6004      	ORI  R16,LOW(4)
000298 c002      	RJMP _0x202003B
                 _0x202003A:
000299 37e5      	CPI  R30,LOW(0x75)
00029a f431      	BRNE _0x202003C
                 _0x202003B:
00029b e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00029c e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00029d 83ee      	STD  Y+6,R30
00029e 83ff      	STD  Y+6+1,R31
00029f e015      	LDI  R17,LOW(5)
0002a0 c00c      	RJMP _0x202003D
                 _0x202003C:
0002a1 35e8      	CPI  R30,LOW(0x58)
0002a2 f411      	BRNE _0x202003F
0002a3 6008      	ORI  R16,LOW(8)
0002a4 c003      	RJMP _0x2020040
                 _0x202003F:
0002a5 37e8      	CPI  R30,LOW(0x78)
0002a6 f009      	BREQ PC+2
0002a7 c0a1      	RJMP _0x2020071
                 _0x2020040:
0002a8 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002a9 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002aa 83ee      	STD  Y+6,R30
0002ab 83ff      	STD  Y+6+1,R31
0002ac e014      	LDI  R17,LOW(4)
                 _0x202003D:
0002ad ff02      	SBRS R16,2
0002ae c014      	RJMP _0x2020042
0002af 940e 03b5 	CALL SUBOPT_0x3
0002b1 940e 03cb 	CALL SUBOPT_0x6
0002b3 85ab      	LDD  R26,Y+11
0002b4 23aa      	TST  R26
0002b5 f43a      	BRPL _0x2020043
0002b6 85ea      	LDD  R30,Y+10
0002b7 85fb      	LDD  R31,Y+10+1
0002b8 940e 03e8 	CALL __ANEGW1
0002ba 87ea      	STD  Y+10,R30
0002bb 87fb      	STD  Y+10+1,R31
0002bc e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0002bd 3040      	CPI  R20,0
0002be f011      	BREQ _0x2020044
0002bf 5f1f      	SUBI R17,-LOW(1)
0002c0 c001      	RJMP _0x2020045
                 _0x2020044:
0002c1 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0002c2 c004      	RJMP _0x2020046
                 _0x2020042:
0002c3 940e 03b5 	CALL SUBOPT_0x3
0002c5 940e 03cb 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
0002c7 fd00      	SBRC R16,0
0002c8 c011      	RJMP _0x2020047
                 _0x2020048:
0002c9 1715      	CP   R17,R21
0002ca f478      	BRSH _0x202004A
0002cb ff07      	SBRS R16,7
0002cc c008      	RJMP _0x202004B
0002cd ff02      	SBRS R16,2
0002ce c004      	RJMP _0x202004C
0002cf 7f0b      	ANDI R16,LOW(251)
0002d0 2f24      	MOV  R18,R20
0002d1 5011      	SUBI R17,LOW(1)
0002d2 c001      	RJMP _0x202004D
                 _0x202004C:
0002d3 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002d4 c001      	RJMP _0x202004E
                 _0x202004B:
0002d5 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002d6 940e 03ae 	CALL SUBOPT_0x2
0002d8 5051      	SUBI R21,LOW(1)
0002d9 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002da 2f31      	MOV  R19,R17
0002db ff01      	SBRS R16,1
0002dc c017      	RJMP _0x202004F
                 _0x2020050:
0002dd 3030      	CPI  R19,0
0002de f0a1      	BREQ _0x2020052
0002df ff03      	SBRS R16,3
0002e0 c006      	RJMP _0x2020053
0002e1 81ee      	LDD  R30,Y+6
0002e2 81ff      	LDD  R31,Y+6+1
0002e3 9125      	LPM  R18,Z+
0002e4 83ee      	STD  Y+6,R30
0002e5 83ff      	STD  Y+6+1,R31
0002e6 c005      	RJMP _0x2020054
                 _0x2020053:
0002e7 81ae      	LDD  R26,Y+6
0002e8 81bf      	LDD  R27,Y+6+1
0002e9 912d      	LD   R18,X+
0002ea 83ae      	STD  Y+6,R26
0002eb 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002ec 940e 03ae 	CALL SUBOPT_0x2
0002ee 3050      	CPI  R21,0
0002ef f009      	BREQ _0x2020055
0002f0 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002f1 5031      	SUBI R19,LOW(1)
0002f2 cfea      	RJMP _0x2020050
                 _0x2020052:
0002f3 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002f4 e320      	LDI  R18,LOW(48)
0002f5 81ee      	LDD  R30,Y+6
0002f6 81ff      	LDD  R31,Y+6+1
0002f7 940e 03f9 	CALL __GETW1PF
0002f9 87e8      	STD  Y+8,R30
0002fa 87f9      	STD  Y+8+1,R31
0002fb 81ee      	LDD  R30,Y+6
0002fc 81ff      	LDD  R31,Y+6+1
0002fd 9632      	ADIW R30,2
0002fe 83ee      	STD  Y+6,R30
0002ff 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000300 85e8      	LDD  R30,Y+8
000301 85f9      	LDD  R31,Y+8+1
000302 85aa      	LDD  R26,Y+10
000303 85bb      	LDD  R27,Y+10+1
000304 17ae      	CP   R26,R30
000305 07bf      	CPC  R27,R31
000306 f050      	BRLO _0x202005C
000307 5f2f      	SUBI R18,-LOW(1)
000308 85a8      	LDD  R26,Y+8
000309 85b9      	LDD  R27,Y+8+1
00030a 85ea      	LDD  R30,Y+10
00030b 85fb      	LDD  R31,Y+10+1
00030c 1bea      	SUB  R30,R26
00030d 0bfb      	SBC  R31,R27
00030e 87ea      	STD  Y+10,R30
00030f 87fb      	STD  Y+10+1,R31
000310 cfef      	RJMP _0x202005A
                 _0x202005C:
000311 332a      	CPI  R18,58
000312 f028      	BRLO _0x202005D
000313 ff03      	SBRS R16,3
000314 c002      	RJMP _0x202005E
000315 5f29      	SUBI R18,-LOW(7)
000316 c001      	RJMP _0x202005F
                 _0x202005E:
000317 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
000318 fd04      	SBRC R16,4
000319 c01a      	RJMP _0x2020061
00031a 3321      	CPI  R18,49
00031b f420      	BRSH _0x2020063
00031c 85a8      	LDD  R26,Y+8
00031d 85b9      	LDD  R27,Y+8+1
00031e 9711      	SBIW R26,1
00031f f409      	BRNE _0x2020062
                 _0x2020063:
000320 c009      	RJMP _0x20200CD
                 _0x2020062:
000321 1753      	CP   R21,R19
000322 f010      	BRLO _0x2020067
000323 ff00      	SBRS R16,0
000324 c001      	RJMP _0x2020068
                 _0x2020067:
000325 c013      	RJMP _0x2020066
                 _0x2020068:
000326 e220      	LDI  R18,LOW(32)
000327 ff07      	SBRS R16,7
000328 c00b      	RJMP _0x2020069
000329 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00032a 6100      	ORI  R16,LOW(16)
00032b ff02      	SBRS R16,2
00032c c007      	RJMP _0x202006A
00032d 7f0b      	ANDI R16,LOW(251)
00032e 934a      	ST   -Y,R20
00032f 940e 03bb 	CALL SUBOPT_0x4
000331 3050      	CPI  R21,0
000332 f009      	BREQ _0x202006B
000333 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000334 940e 03ae 	CALL SUBOPT_0x2
000336 3050      	CPI  R21,0
000337 f009      	BREQ _0x202006C
000338 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000339 5031      	SUBI R19,LOW(1)
00033a 85a8      	LDD  R26,Y+8
00033b 85b9      	LDD  R27,Y+8+1
00033c 9712      	SBIW R26,2
00033d f008      	BRLO _0x2020059
00033e cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00033f ff00      	SBRS R16,0
000340 c008      	RJMP _0x202006D
                 _0x202006E:
000341 3050      	CPI  R21,0
000342 f031      	BREQ _0x2020070
000343 5051      	SUBI R21,LOW(1)
000344 e2e0      	LDI  R30,LOW(32)
000345 93ea      	ST   -Y,R30
000346 940e 03bb 	CALL SUBOPT_0x4
000348 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000349 e010      	LDI  R17,LOW(0)
                 _0x202001B:
00034a cee0      	RJMP _0x2020016
                 _0x2020018:
00034b 85ac      	LDD  R26,Y+12
00034c 85bd      	LDD  R27,Y+12+1
00034d 940e 03f5 	CALL __GETW1P
00034f 940e 0409 	CALL __LOADLOCR6
000351 9664      	ADIW R28,20
000352 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000353 92ff      	PUSH R15
000354 2ef8      	MOV  R15,R24
000355 9726      	SBIW R28,6
000356 940e 0404 	CALL __SAVELOCR4
000358 940e 03d3 	CALL SUBOPT_0x7
00035a 9730      	SBIW R30,0
00035b f419      	BRNE _0x2020072
00035c efef      	LDI  R30,LOW(65535)
00035d efff      	LDI  R31,HIGH(65535)
00035e c023      	RJMP _0x2080001
                 _0x2020072:
00035f 01de      	MOVW R26,R28
000360 9616      	ADIW R26,6
000361 940e 03e4 	CALL __ADDW2R15
000363 018d      	MOVW R16,R26
000364 940e 03d3 	CALL SUBOPT_0x7
000366 83ee      	STD  Y+6,R30
000367 83ff      	STD  Y+6+1,R31
000368 e0e0      	LDI  R30,LOW(0)
000369 87e8      	STD  Y+8,R30
00036a 87e9      	STD  Y+8+1,R30
00036b 01de      	MOVW R26,R28
00036c 961a      	ADIW R26,10
00036d 940e 03e4 	CALL __ADDW2R15
00036f 940e 03f5 	CALL __GETW1P
000371 93fa      	ST   -Y,R31
000372 93ea      	ST   -Y,R30
000373 931a      	ST   -Y,R17
000374 930a      	ST   -Y,R16
000375 edef      	LDI  R30,LOW(_put_buff_G101)
000376 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000377 93fa      	ST   -Y,R31
000378 93ea      	ST   -Y,R30
000379 01de      	MOVW R26,R28
00037a 961a      	ADIW R26,10
00037b dea3      	RCALL __print_G101
00037c 019f      	MOVW R18,R30
00037d 81ae      	LDD  R26,Y+6
00037e 81bf      	LDD  R27,Y+6+1
00037f e0e0      	LDI  R30,LOW(0)
000380 93ec      	ST   X,R30
000381 01f9      	MOVW R30,R18
                 _0x2080001:
000382 940e 040b 	CALL __LOADLOCR4
000384 962a      	ADIW R28,10
000385 90ff      	POP  R15
000386 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000387 93ba      	ST   -Y,R27
000388 93aa      	ST   -Y,R26
000389 91a9          ld   r26,y+
00038a 91b9          ld   r27,y+
00038b 27ee          clr  r30
00038c 27ff          clr  r31
                 strlen0:
00038d 916d          ld   r22,x+
00038e 2366          tst  r22
00038f f011          breq strlen1
000390 9631          adiw r30,1
000391 cffb          rjmp strlen0
                 strlen1:
000392 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000393 93ba      	ST   -Y,R27
000394 93aa      	ST   -Y,R26
000395 27aa          clr  r26
000396 27bb          clr  r27
000397 91e9          ld   r30,y+
000398 91f9          ld   r31,y+
                 strlenf0:
000399 9005      	lpm  r0,z+
00039a 2000          tst  r0
00039b f011          breq strlenf1
00039c 9611          adiw r26,1
00039d cffb          rjmp strlenf0
                 strlenf1:
00039e 01fd          movw r30,r26
00039f 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000160           	.BYTE 0x4
                 _line:
000164           	.BYTE 0x14
                 _input_index_S0000000000:
000178           	.BYTE 0x1
                 __base_y_G100:
000179           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003a0 940e 0155 	CALL __lcd_write_data
0003a2 e0a3      	LDI  R26,LOW(3)
0003a3 e0b0      	LDI  R27,0
0003a4 940c 03da 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
0003a6 e3a0      	LDI  R26,LOW(48)
0003a7 940e 0141 	CALL __lcd_write_nibble_G100
                +
0003a9 ec88     +LDI R24 , LOW ( 200 )
0003aa e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003ab 9701     +SBIW R24 , 1
0003ac f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0003ae 932a      	ST   -Y,R18
0003af 85ad      	LDD  R26,Y+13
0003b0 85be      	LDD  R27,Y+13+1
0003b1 85ef      	LDD  R30,Y+15
0003b2 89f8      	LDD  R31,Y+15+1
0003b3 9509      	ICALL
0003b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0003b5 89e8      	LDD  R30,Y+16
0003b6 89f9      	LDD  R31,Y+16+1
0003b7 9734      	SBIW R30,4
0003b8 8be8      	STD  Y+16,R30
0003b9 8bf9      	STD  Y+16+1,R31
0003ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0003bb 85ad      	LDD  R26,Y+13
0003bc 85be      	LDD  R27,Y+13+1
0003bd 85ef      	LDD  R30,Y+15
0003be 89f8      	LDD  R31,Y+15+1
0003bf 9509      	ICALL
0003c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0003c1 89a8      	LDD  R26,Y+16
0003c2 89b9      	LDD  R27,Y+16+1
0003c3 9614      	ADIW R26,4
0003c4 940e 03f5 	CALL __GETW1P
0003c6 83ee      	STD  Y+6,R30
0003c7 83ff      	STD  Y+6+1,R31
0003c8 81ae      	LDD  R26,Y+6
0003c9 81bf      	LDD  R27,Y+6+1
0003ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0003cb 89a8      	LDD  R26,Y+16
0003cc 89b9      	LDD  R27,Y+16+1
0003cd 9614      	ADIW R26,4
0003ce 940e 03f5 	CALL __GETW1P
0003d0 87ea      	STD  Y+10,R30
0003d1 87fb      	STD  Y+10+1,R31
0003d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003d3 01de      	MOVW R26,R28
0003d4 961c      	ADIW R26,12
0003d5 940e 03e4 	CALL __ADDW2R15
0003d7 940e 03f5 	CALL __GETW1P
0003d9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003da 9610      	adiw r26,0
0003db f039      	breq __delay_ms1
                 __delay_ms0:
0003dc 95a8      	wdr
                +
0003dd ed80     +LDI R24 , LOW ( 0x7D0 )
0003de e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003df 9701     +SBIW R24 , 1
0003e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003e1 9711      	sbiw r26,1
0003e2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003e3 9508      	ret
                 
                 __ADDW2R15:
0003e4 2400      	CLR  R0
0003e5 0daf      	ADD  R26,R15
0003e6 1db0      	ADC  R27,R0
0003e7 9508      	RET
                 
                 __ANEGW1:
0003e8 95f1      	NEG  R31
0003e9 95e1      	NEG  R30
0003ea 40f0      	SBCI R31,0
0003eb 9508      	RET
                 
                 __LSRW4:
0003ec 95f6      	LSR  R31
0003ed 95e7      	ROR  R30
                 __LSRW3:
0003ee 95f6      	LSR  R31
0003ef 95e7      	ROR  R30
                 __LSRW2:
0003f0 95f6      	LSR  R31
0003f1 95e7      	ROR  R30
0003f2 95f6      	LSR  R31
0003f3 95e7      	ROR  R30
0003f4 9508      	RET
                 
                 __GETW1P:
0003f5 91ed      	LD   R30,X+
0003f6 91fc      	LD   R31,X
0003f7 9711      	SBIW R26,1
0003f8 9508      	RET
                 
                 __GETW1PF:
0003f9 9005      	LPM  R0,Z+
0003fa 91f4      	LPM  R31,Z
0003fb 2de0      	MOV  R30,R0
0003fc 9508      	RET
                 
                 __PUTPARD1:
0003fd 937a      	ST   -Y,R23
0003fe 936a      	ST   -Y,R22
0003ff 93fa      	ST   -Y,R31
000400 93ea      	ST   -Y,R30
000401 9508      	RET
                 
                 __SAVELOCR6:
000402 935a      	ST   -Y,R21
                 __SAVELOCR5:
000403 934a      	ST   -Y,R20
                 __SAVELOCR4:
000404 933a      	ST   -Y,R19
                 __SAVELOCR3:
000405 932a      	ST   -Y,R18
                 __SAVELOCR2:
000406 931a      	ST   -Y,R17
000407 930a      	ST   -Y,R16
000408 9508      	RET
                 
                 __LOADLOCR6:
000409 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00040a 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00040b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00040c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00040d 8119      	LDD  R17,Y+1
00040e 8108      	LD   R16,Y
00040f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   3 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   1 
r8 :   4 r9 :   3 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  34 r17:  27 r18:  29 r19:   8 r20:   9 r21:  17 r22:   7 r23:   3 
r24:  27 r25:   5 r26: 111 r27:  44 r28:  14 r29:   1 r30: 237 r31:  80 
x  :  25 y  : 187 z  :  16 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  51 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  35 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  31 ldd   :  79 ldi   : 113 
lds   :   7 lpm   :  16 lsl   :   1 lsr   :   5 mov   :  19 movw  :  20 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  45 pop   :   1 push  :   1 rcall :  22 ret   :  25 
reti  :   1 rjmp  :  67 rol   :   1 ror   :   5 sbc   :   2 sbci  :   2 
sbi   :   9 sbic  :   2 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  72 std   :  33 sts   :   4 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 63 out of 116 (54.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000820   2002     78   2080   16384  12.7%
[.dseg] 0x000060 0x00017d      0     29     29    1024   2.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
