
AVRASM ver. 2.1.30  C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm Fri May 23 03:36:13 2025

C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _t1=R4
                 	.DEF _t1_msb=R5
                 	.DEF _t2=R6
                 	.DEF _t2_msb=R7
                 	.DEF _akh=R8
                 	.DEF _akh_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0048 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0075 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 _0x0:
000034 3054
000035 253d
000036 332d
000037 5464      	.DB  0x54,0x30,0x3D,0x25,0x2D,0x33,0x64,0x54
000038 3d31
000039 2d25
00003a 6433
00003b 7473      	.DB  0x31,0x3D,0x25,0x2D,0x33,0x64,0x73,0x74
00003c 253d
00003d 2564
00003e 6433
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1140): warning: .cseg .db misalignment - padding zero byte
00003f 0000      	.DB  0x3D,0x25,0x64,0x25,0x33,0x64,0x0
                 _0x2000003:
000040 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000041 0001      	.DW  0x01
000042 0002      	.DW  0x02
000043 0066      	.DW  __REG_BIT_VARS*2
                 
000044 0002      	.DW  0x02
000045 0179      	.DW  __base_y_G100
000046 0080      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000047 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004f e08d      	LDI  R24,(14-2)+1
000050 e0a2      	LDI  R26,2
000051 27bb      	CLR  R27
                 __CLEAR_REG:
000052 93ed      	ST   X+,R30
000053 958a      	DEC  R24
000054 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000055 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000056 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000057 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000058 93ed      	ST   X+,R30
000059 9701      	SBIW R24,1
00005a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005b e8e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005d 9185      	LPM  R24,Z+
00005e 9195      	LPM  R25,Z+
00005f 9700      	SBIW R24,0
000060 f061      	BREQ __GLOBAL_INI_END
000061 91a5      	LPM  R26,Z+
000062 91b5      	LPM  R27,Z+
000063 9005      	LPM  R0,Z+
000064 9015      	LPM  R1,Z+
000065 01bf      	MOVW R22,R30
000066 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000067 9005      	LPM  R0,Z+
000068 920d      	ST   X+,R0
000069 9701      	SBIW R24,1
00006a f7e1      	BRNE __GLOBAL_INI_LOOP
00006b 01fb      	MOVW R30,R22
00006c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006e bfed      	OUT  SPL,R30
00006f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000070 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000071 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000072 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000073 940c 00a2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 1
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1],t1,t2,akh;
                 ;unsigned char line[20];
                 ;bit ste;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;
                 ;interrupt [ADC_INT] void adc_isr(void){
                 ; 0000 000D interrupt [15] void adc_isr(void){
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000075 938a      	ST   -Y,R24
000076 93aa      	ST   -Y,R26
000077 93ba      	ST   -Y,R27
000078 93ea      	ST   -Y,R30
000079 93fa      	ST   -Y,R31
00007a b7ef      	IN   R30,SREG
00007b 93ea      	ST   -Y,R30
                 ; 0000 000E static unsigned char input_index=0;
                 ; 0000 000F adc_data[input_index]=ADCW;
00007c 91e0 0178 	LDS  R30,_input_index_S0000000000
00007e e6a0      	LDI  R26,LOW(_adc_data)
00007f e0b1      	LDI  R27,HIGH(_adc_data)
000080 e0f0      	LDI  R31,0
000081 0fee      	LSL  R30
000082 1fff      	ROL  R31
000083 0fae      	ADD  R26,R30
000084 1fbf      	ADC  R27,R31
000085 b1e4      	IN   R30,0x4
000086 b1f5      	IN   R31,0x4+1
000087 93ed      	ST   X+,R30
000088 93fc      	ST   X,R31
                 ; 0000 0010 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000089 91a0 0178 	LDS  R26,_input_index_S0000000000
00008b 5faf      	SUBI R26,-LOW(1)
00008c 93a0 0178 	STS  _input_index_S0000000000,R26
00008e 30a2      	CPI  R26,LOW(0x2)
00008f f018      	BRLO _0x3
                 ; 0000 0011    input_index=0;
000090 e0e0      	LDI  R30,LOW(0)
000091 93e0 0178 	STS  _input_index_S0000000000,R30
                 ; 0000 0012 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x3:
000093 91e0 0178 	LDS  R30,_input_index_S0000000000
000095 b9e7      	OUT  0x7,R30
                 ; 0000 0013 delay_us(10);
                +
000096 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000097 958a     +DEC R24
000098 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0014 ADCSRA|=(1<<ADSC);
000099 9a36      	SBI  0x6,6
                 ; 0000 0015 }
00009a 91e9      	LD   R30,Y+
00009b bfef      	OUT  SREG,R30
00009c 91f9      	LD   R31,Y+
00009d 91e9      	LD   R30,Y+
00009e 91b9      	LD   R27,Y+
00009f 91a9      	LD   R26,Y+
0000a0 9189      	LD   R24,Y+
0000a1 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0017 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0018 {
                 ; 0000 0019 // Declare your local variables here
                 ; 0000 001A 
                 ; 0000 001B // Input/Output Ports initialization
                 ; 0000 001C // Port A initialization
                 ; 0000 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001E DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 bbea      	OUT  0x1A,R30
                 ; 0000 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0020 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (0<<PORTA0);
0000a4 efee      	LDI  R30,LOW(254)
0000a5 bbeb      	OUT  0x1B,R30
                 ; 0000 0021 
                 ; 0000 0022 // Port B initialization
                 ; 0000 0023 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0024 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 bbe7      	OUT  0x17,R30
                 ; 0000 0025 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0026 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a8 bbe8      	OUT  0x18,R30
                 ; 0000 0027 
                 ; 0000 0028 // Port C initialization
                 ; 0000 0029 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002A DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000a9 bbe4      	OUT  0x14,R30
                 ; 0000 002B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002C PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000aa bbe5      	OUT  0x15,R30
                 ; 0000 002D 
                 ; 0000 002E // Port D initialization
                 ; 0000 002F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0030 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000ab efef      	LDI  R30,LOW(255)
0000ac bbe1      	OUT  0x11,R30
                 ; 0000 0031 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0032 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bbe2      	OUT  0x12,R30
                 ; 0000 0033 
                 ; 0000 0034 // Timer/Counter 0 initialization
                 ; 0000 0035 // Clock source: System Clock
                 ; 0000 0036 // Clock value: Timer 0 Stopped
                 ; 0000 0037 // Mode: Normal top=0xFF
                 ; 0000 0038 // OC0 output: Disconnected
                 ; 0000 0039 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000af bfe3      	OUT  0x33,R30
                 ; 0000 003A TCNT0=0x00;
0000b0 bfe2      	OUT  0x32,R30
                 ; 0000 003B OCR0=0x00;
0000b1 bfec      	OUT  0x3C,R30
                 ; 0000 003C 
                 ; 0000 003D // Timer/Counter 1 initialization
                 ; 0000 003E // Clock source: System Clock
                 ; 0000 003F // Clock value: Timer1 Stopped
                 ; 0000 0040 // Mode: Normal top=0xFFFF
                 ; 0000 0041 // OC1A output: Disconnected
                 ; 0000 0042 // OC1B output: Disconnected
                 ; 0000 0043 // Noise Canceler: Off
                 ; 0000 0044 // Input Capture on Falling Edge
                 ; 0000 0045 // Timer1 Overflow Interrupt: Off
                 ; 0000 0046 // Input Capture Interrupt: Off
                 ; 0000 0047 // Compare A Match Interrupt: Off
                 ; 0000 0048 // Compare B Match Interrupt: Off
                 ; 0000 0049 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b2 bdef      	OUT  0x2F,R30
                 ; 0000 004A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b3 bdee      	OUT  0x2E,R30
                 ; 0000 004B TCNT1H=0x00;
0000b4 bded      	OUT  0x2D,R30
                 ; 0000 004C TCNT1L=0x00;
0000b5 bdec      	OUT  0x2C,R30
                 ; 0000 004D ICR1H=0x00;
0000b6 bde7      	OUT  0x27,R30
                 ; 0000 004E ICR1L=0x00;
0000b7 bde6      	OUT  0x26,R30
                 ; 0000 004F OCR1AH=0x00;
0000b8 bdeb      	OUT  0x2B,R30
                 ; 0000 0050 OCR1AL=0x00;
0000b9 bdea      	OUT  0x2A,R30
                 ; 0000 0051 OCR1BH=0x00;
0000ba bde9      	OUT  0x29,R30
                 ; 0000 0052 OCR1BL=0x00;
0000bb bde8      	OUT  0x28,R30
                 ; 0000 0053 
                 ; 0000 0054 // Timer/Counter 2 initialization
                 ; 0000 0055 // Clock source: System Clock
                 ; 0000 0056 // Clock value: Timer2 Stopped
                 ; 0000 0057 // Mode: Normal top=0xFF
                 ; 0000 0058 // OC2 output: Disconnected
                 ; 0000 0059 ASSR=0<<AS2;
0000bc bde2      	OUT  0x22,R30
                 ; 0000 005A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000bd bde5      	OUT  0x25,R30
                 ; 0000 005B TCNT2=0x00;
0000be bde4      	OUT  0x24,R30
                 ; 0000 005C OCR2=0x00;
0000bf bde3      	OUT  0x23,R30
                 ; 0000 005D 
                 ; 0000 005E // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 005F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c0 bfe9      	OUT  0x39,R30
                 ; 0000 0060 
                 ; 0000 0061 // External Interrupt(s) initialization
                 ; 0000 0062 // INT0: Off
                 ; 0000 0063 // INT1: Off
                 ; 0000 0064 // INT2: Off
                 ; 0000 0065 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c1 bfe5      	OUT  0x35,R30
                 ; 0000 0066 MCUCSR=(0<<ISC2);
0000c2 bfe4      	OUT  0x34,R30
                 ; 0000 0067 
                 ; 0000 0068 // USART initialization
                 ; 0000 0069 // USART disabled
                 ; 0000 006A UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c3 b9ea      	OUT  0xA,R30
                 ; 0000 006B 
                 ; 0000 006C // Analog Comparator initialization
                 ; 0000 006D // Analog Comparator: Off
                 ; 0000 006E // The Analog Comparator's positive input is
                 ; 0000 006F // connected to the AIN0 pin
                 ; 0000 0070 // The Analog Comparator's negative input is
                 ; 0000 0071 // connected to the AIN1 pin
                 ; 0000 0072 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c4 e8e0      	LDI  R30,LOW(128)
0000c5 b9e8      	OUT  0x8,R30
                 ; 0000 0073 
                 ; 0000 0074 // ADC initialization
                 ; 0000 0075 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0076 // ADC Voltage Reference: AREF pin
                 ; 0000 0077 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0078 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 b9e7      	OUT  0x7,R30
                 ; 0000 0079 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000c8 eceb      	LDI  R30,LOW(203)
0000c9 b9e6      	OUT  0x6,R30
                 ; 0000 007A SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000ca e0e0      	LDI  R30,LOW(0)
0000cb bfe0      	OUT  0x30,R30
                 ; 0000 007B 
                 ; 0000 007C // SPI initialization
                 ; 0000 007D // SPI disabled
                 ; 0000 007E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000cc b9ed      	OUT  0xD,R30
                 ; 0000 007F 
                 ; 0000 0080 // TWI initialization
                 ; 0000 0081 // TWI disabled
                 ; 0000 0082 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000cd bfe6      	OUT  0x36,R30
                 ; 0000 0083 
                 ; 0000 0084 // Alphanumeric LCD initialization
                 ; 0000 0085 // Connections are specified in the
                 ; 0000 0086 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0087 // RS - PORTC Bit 0
                 ; 0000 0088 // RD - PORTC Bit 1
                 ; 0000 0089 // EN - PORTC Bit 2
                 ; 0000 008A // D4 - PORTC Bit 4
                 ; 0000 008B // D5 - PORTC Bit 5
                 ; 0000 008C // D6 - PORTC Bit 6
                 ; 0000 008D // D7 - PORTC Bit 7
                 ; 0000 008E // Characters/line: 20
                 ; 0000 008F lcd_init(20);
0000ce e1a4      	LDI  R26,LOW(20)
0000cf d0b9      	RCALL _lcd_init
                 ; 0000 0090 
                 ; 0000 0091 // Global enable interrupts
                 ; 0000 0092 #asm("sei")                            }
0000d0 9478      	sei
                 ; 0000 0093 
                 ; 0000 0094     while(1){
                 _0x4:
                 ; 0000 0095         if(!PINA.2){ste=1;PORTD.2=1;}
0000d1 99ca      	SBIC 0x19,2
0000d2 c003      	RJMP _0x7
0000d3 9468      	SET
0000d4 f820      	BLD  R2,0
0000d5 9a92      	SBI  0x12,2
                 ; 0000 0096         if(!PINA.3){ste=0;PORTD.2=0;}
                 _0x7:
0000d6 99cb      	SBIC 0x19,3
0000d7 c003      	RJMP _0xA
0000d8 94e8      	CLT
0000d9 f820      	BLD  R2,0
0000da 9892      	CBI  0x12,2
                 ; 0000 0097         akh =t1-t2;
                 _0xA:
0000db 01f2      	MOVW R30,R4
0000dc 19e6      	SUB  R30,R6
0000dd 09f7      	SBC  R31,R7
0000de 014f      	MOVW R8,R30
                 ; 0000 0098         t1=adc_data[0]/2;
0000df 91e0 0160 	LDS  R30,_adc_data
0000e1 91f0 0161 	LDS  R31,_adc_data+1
0000e3 95f6      	LSR  R31
0000e4 95e7      	ROR  R30
0000e5 012f      	MOVW R4,R30
                 ; 0000 0099         t2=16+adc_data[1]/64;
                +
0000e6 91e0 0162+LDS R30 , _adc_data + ( 2 )
0000e8 91f0 0163+LDS R31 , _adc_data + ( 2 ) + 1
                 	__GETW1MN _adc_data,2
0000ea 940e 03cd 	CALL __LSRW2
0000ec 940e 03c9 	CALL __LSRW4
0000ee 9670      	ADIW R30,16
0000ef 013f      	MOVW R6,R30
                 ; 0000 009A         if(ste){
0000f0 fe20      	SBRS R2,0
0000f1 c010      	RJMP _0xD
                 ; 0000 009B             if(akh>3){
0000f2 e0e3      	LDI  R30,LOW(3)
0000f3 e0f0      	LDI  R31,HIGH(3)
0000f4 15e8      	CP   R30,R8
0000f5 05f9      	CPC  R31,R9
0000f6 f418      	BRSH _0xE
                 ; 0000 009C             PORTD.0=1;
0000f7 9a90      	SBI  0x12,0
                 ; 0000 009D             PORTD.1=0;
0000f8 9891      	CBI  0x12,1
                 ; 0000 009E             }else if(akh<3){
0000f9 c007      	RJMP _0x13
                 _0xE:
0000fa e0e3      	LDI  R30,LOW(3)
0000fb e0f0      	LDI  R31,HIGH(3)
0000fc 168e      	CP   R8,R30
0000fd 069f      	CPC  R9,R31
0000fe f410      	BRSH _0x14
                 ; 0000 009F             PORTD.0=0;
0000ff 9890      	CBI  0x12,0
                 ; 0000 00A0             PORTD.1=1;}
000100 9a91      	SBI  0x12,1
                 ; 0000 00A1         }else{
                 _0x14:
                 _0x13:
000101 c002      	RJMP _0x19
                 _0xD:
                 ; 0000 00A2             PORTD.0=0;
000102 9890      	CBI  0x12,0
                 ; 0000 00A3             PORTD.1=0;}
000103 9891      	CBI  0x12,1
                 _0x19:
                 ; 0000 00A4 
                 ; 0000 00A5         lcd_gotoxy(0,0);
000104 e0e0      	LDI  R30,LOW(0)
000105 93ea      	ST   -Y,R30
000106 e0a0      	LDI  R26,LOW(0)
000107 d042      	RCALL _lcd_gotoxy
                 ; 0000 00A6         sprintf(line,"T0=%-3dT1=%-3dst=%d%3d", t1,t2,ste,akh);
000108 e6e4      	LDI  R30,LOW(_line)
000109 e0f1      	LDI  R31,HIGH(_line)
00010a 93fa      	ST   -Y,R31
00010b 93ea      	ST   -Y,R30
                +
00010c e6e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00010d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00010e 93fa      	ST   -Y,R31
00010f 93ea      	ST   -Y,R30
000110 01f2      	MOVW R30,R4
000111 940e 0378 	CALL SUBOPT_0x0
000113 01f3      	MOVW R30,R6
000114 940e 0378 	CALL SUBOPT_0x0
000116 e0e0      	LDI  R30,0
000117 fc20      	SBRC R2,0
000118 e0e1      	LDI  R30,1
000119 27ff      	CLR  R31
00011a 2766      	CLR  R22
00011b 2777      	CLR  R23
00011c 940e 03da 	CALL __PUTPARD1
00011e 01f4      	MOVW R30,R8
00011f 940e 0378 	CALL SUBOPT_0x0
000121 e180      	LDI  R24,16
000122 940e 032b 	CALL _sprintf
000124 9664      	ADIW R28,20
                 ; 0000 00A7         lcd_puts(line);
000125 e6a4      	LDI  R26,LOW(_line)
000126 e0b1      	LDI  R27,HIGH(_line)
000127 d050      	RCALL _lcd_puts
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA       }
000128 cfa8      	RJMP _0x4
                 ; 0000 00AB }
                 _0x1E:
000129 cfff      	RJMP _0x1E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012a 93aa      	ST   -Y,R26
00012b b3e5      	IN   R30,0x15
00012c 70ef      	ANDI R30,LOW(0xF)
00012d 2fae      	MOV  R26,R30
00012e 81e8      	LD   R30,Y
00012f 7fe0      	ANDI R30,LOW(0xF0)
000130 2bea      	OR   R30,R26
000131 bbe5      	OUT  0x15,R30
                +
000132 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000133 958a     +DEC R24
000134 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000135 9aaa      	SBI  0x15,2
                +
000136 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000137 958a     +DEC R24
000138 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000139 98aa      	CBI  0x15,2
                +
00013a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00013b 958a     +DEC R24
00013c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00013d c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013e 93aa      	ST   -Y,R26
00013f 81a8      	LD   R26,Y
000140 dfe9      	RCALL __lcd_write_nibble_G100
000141 81e8          ld    r30,y
000142 95e2          swap  r30
000143 83e8          st    y,r30
000144 81a8      	LD   R26,Y
000145 dfe4      	RCALL __lcd_write_nibble_G100
                +
000146 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000147 958a     +DEC R24
000148 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000149 c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00014a 93aa      	ST   -Y,R26
00014b 81e8      	LD   R30,Y
00014c e0f0      	LDI  R31,0
00014d 58e7      	SUBI R30,LOW(-__base_y_G100)
00014e 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00014f 81e0      	LD   R30,Z
000150 81a9      	LDD  R26,Y+1
000151 0fae      	ADD  R26,R30
000152 dfeb      	RCALL __lcd_write_data
000153 80b9      	LDD  R11,Y+1
000154 80a8      	LDD  R10,Y+0
000155 9622      	ADIW R28,2
000156 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000157 e0a2      	LDI  R26,LOW(2)
000158 940e 037d 	CALL SUBOPT_0x1
00015a e0ac      	LDI  R26,LOW(12)
00015b dfe2      	RCALL __lcd_write_data
00015c e0a1      	LDI  R26,LOW(1)
00015d 940e 037d 	CALL SUBOPT_0x1
00015f e0e0      	LDI  R30,LOW(0)
000160 2eae      	MOV  R10,R30
000161 2ebe      	MOV  R11,R30
000162 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000163 93aa      	ST   -Y,R26
000164 81a8      	LD   R26,Y
000165 30aa      	CPI  R26,LOW(0xA)
000166 f011      	BREQ _0x2000005
000167 14bd      	CP   R11,R13
000168 f048      	BRLO _0x2000004
                 _0x2000005:
000169 e0e0      	LDI  R30,LOW(0)
00016a 93ea      	ST   -Y,R30
00016b 94a3      	INC  R10
00016c 2daa      	MOV  R26,R10
00016d dfdc      	RCALL _lcd_gotoxy
00016e 81a8      	LD   R26,Y
00016f 30aa      	CPI  R26,LOW(0xA)
000170 f409      	BRNE _0x2000007
000171 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000172 94b3      	INC  R11
000173 9aa8      	SBI  0x15,0
000174 81a8      	LD   R26,Y
000175 dfc8      	RCALL __lcd_write_data
000176 98a8      	CBI  0x15,0
000177 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000178 93ba      	ST   -Y,R27
000179 93aa      	ST   -Y,R26
00017a 931a      	ST   -Y,R17
                 _0x2000008:
00017b 81a9      	LDD  R26,Y+1
00017c 81ba      	LDD  R27,Y+1+1
00017d 91ed      	LD   R30,X+
00017e 83a9      	STD  Y+1,R26
00017f 83ba      	STD  Y+1+1,R27
000180 2f1e      	MOV  R17,R30
000181 30e0      	CPI  R30,0
000182 f019      	BREQ _0x200000A
000183 2fa1      	MOV  R26,R17
000184 dfde      	RCALL _lcd_putchar
000185 cff5      	RJMP _0x2000008
                 _0x200000A:
000186 8118      	LDD  R17,Y+0
000187 9623      	ADIW R28,3
000188 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000189 93aa      	ST   -Y,R26
00018a b3e4      	IN   R30,0x14
00018b 6fe0      	ORI  R30,LOW(0xF0)
00018c bbe4      	OUT  0x14,R30
00018d 9aa2      	SBI  0x14,2
00018e 9aa0      	SBI  0x14,0
00018f 9aa1      	SBI  0x14,1
000190 98aa      	CBI  0x15,2
000191 98a8      	CBI  0x15,0
000192 98a9      	CBI  0x15,1
000193 80d8      	LDD  R13,Y+0
000194 81e8      	LD   R30,Y
000195 58e0      	SUBI R30,-LOW(128)
                +
000196 93e0 017b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000198 81e8      	LD   R30,Y
000199 54e0      	SUBI R30,-LOW(192)
                +
00019a 93e0 017c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00019c e1a4      	LDI  R26,LOW(20)
00019d e0b0      	LDI  R27,0
00019e 940e 03b7 	CALL _delay_ms
0001a0 940e 0383 	CALL SUBOPT_0x2
0001a2 940e 0383 	CALL SUBOPT_0x2
0001a4 940e 0383 	CALL SUBOPT_0x2
0001a6 e2a0      	LDI  R26,LOW(32)
0001a7 df82      	RCALL __lcd_write_nibble_G100
                +
0001a8 ec88     +LDI R24 , LOW ( 200 )
0001a9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001aa 9701     +SBIW R24 , 1
0001ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001ac e2a8      	LDI  R26,LOW(40)
0001ad df90      	RCALL __lcd_write_data
0001ae e0a4      	LDI  R26,LOW(4)
0001af df8e      	RCALL __lcd_write_data
0001b0 e8a5      	LDI  R26,LOW(133)
0001b1 df8c      	RCALL __lcd_write_data
0001b2 e0a6      	LDI  R26,LOW(6)
0001b3 df8a      	RCALL __lcd_write_data
0001b4 dfa2      	RCALL _lcd_clear
                 _0x2080002:
0001b5 9621      	ADIW R28,1
0001b6 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0001b7 93ba      	ST   -Y,R27
0001b8 93aa      	ST   -Y,R26
0001b9 931a      	ST   -Y,R17
0001ba 930a      	ST   -Y,R16
0001bb 81aa      	LDD  R26,Y+2
0001bc 81bb      	LDD  R27,Y+2+1
0001bd 9612      	ADIW R26,2
0001be 940e 03d2 	CALL __GETW1P
0001c0 9730      	SBIW R30,0
0001c1 f159      	BREQ _0x2020010
0001c2 81aa      	LDD  R26,Y+2
0001c3 81bb      	LDD  R27,Y+2+1
0001c4 9614      	ADIW R26,4
0001c5 940e 03d2 	CALL __GETW1P
0001c7 018f      	MOVW R16,R30
0001c8 9730      	SBIW R30,0
0001c9 f061      	BREQ _0x2020012
                +
0001ca 3002     +CPI R16 , LOW ( 2 )
0001cb e0e0     +LDI R30 , HIGH ( 2 )
0001cc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001cd f098      	BRLO _0x2020013
0001ce 01f8      	MOVW R30,R16
0001cf 9731      	SBIW R30,1
0001d0 018f      	MOVW R16,R30
                +
0001d1 81aa     +LDD R26 , Y + 2
0001d2 81bb     +LDD R27 , Y + 2 + 1
0001d3 9614     +ADIW R26 , 4
0001d4 93ed     +ST X + , R30
0001d5 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0001d6 81aa      	LDD  R26,Y+2
0001d7 81bb      	LDD  R27,Y+2+1
0001d8 9612      	ADIW R26,2
0001d9 91ed      	LD   R30,X+
0001da 91fd      	LD   R31,X+
0001db 9631      	ADIW R30,1
0001dc 93fe      	ST   -X,R31
0001dd 93ee      	ST   -X,R30
0001de 9731      	SBIW R30,1
0001df 81ac      	LDD  R26,Y+4
0001e0 83a0      	STD  Z+0,R26
                 _0x2020013:
0001e1 81aa      	LDD  R26,Y+2
0001e2 81bb      	LDD  R27,Y+2+1
0001e3 940e 03d2 	CALL __GETW1P
0001e5 23ff      	TST  R31
0001e6 f02a      	BRMI _0x2020014
0001e7 91ed      	LD   R30,X+
0001e8 91fd      	LD   R31,X+
0001e9 9631      	ADIW R30,1
0001ea 93fe      	ST   -X,R31
0001eb 93ee      	ST   -X,R30
                 _0x2020014:
0001ec c006      	RJMP _0x2020015
                 _0x2020010:
0001ed 81aa      	LDD  R26,Y+2
0001ee 81bb      	LDD  R27,Y+2+1
0001ef efef      	LDI  R30,LOW(65535)
0001f0 efff      	LDI  R31,HIGH(65535)
0001f1 93ed      	ST   X+,R30
0001f2 93fc      	ST   X,R31
                 _0x2020015:
0001f3 8119      	LDD  R17,Y+1
0001f4 8108      	LDD  R16,Y+0
0001f5 9625      	ADIW R28,5
0001f6 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001f7 93ba      	ST   -Y,R27
0001f8 93aa      	ST   -Y,R26
0001f9 9726      	SBIW R28,6
0001fa 940e 03df 	CALL __SAVELOCR6
0001fc e010      	LDI  R17,0
0001fd 85ac      	LDD  R26,Y+12
0001fe 85bd      	LDD  R27,Y+12+1
0001ff e0e0      	LDI  R30,LOW(0)
000200 e0f0      	LDI  R31,HIGH(0)
000201 93ed      	ST   X+,R30
000202 93fc      	ST   X,R31
                 _0x2020016:
000203 89ea      	LDD  R30,Y+18
000204 89fb      	LDD  R31,Y+18+1
000205 9631      	ADIW R30,1
000206 8bea      	STD  Y+18,R30
000207 8bfb      	STD  Y+18+1,R31
000208 9731      	SBIW R30,1
000209 91e4      	LPM  R30,Z
00020a 2f2e      	MOV  R18,R30
00020b 30e0      	CPI  R30,0
00020c f409      	BRNE PC+2
00020d c115      	RJMP _0x2020018
00020e 2fe1      	MOV  R30,R17
00020f 30e0      	CPI  R30,0
000210 f439      	BRNE _0x202001C
000211 3225      	CPI  R18,37
000212 f411      	BRNE _0x202001D
000213 e011      	LDI  R17,LOW(1)
000214 c002      	RJMP _0x202001E
                 _0x202001D:
000215 940e 038b 	CALL SUBOPT_0x3
                 _0x202001E:
000217 c10a      	RJMP _0x202001B
                 _0x202001C:
000218 30e1      	CPI  R30,LOW(0x1)
000219 f4a9      	BRNE _0x202001F
00021a 3225      	CPI  R18,37
00021b f419      	BRNE _0x2020020
00021c 940e 038b 	CALL SUBOPT_0x3
00021e c102      	RJMP _0x20200CC
                 _0x2020020:
00021f e012      	LDI  R17,LOW(2)
000220 e040      	LDI  R20,LOW(0)
000221 e000      	LDI  R16,LOW(0)
000222 322d      	CPI  R18,45
000223 f411      	BRNE _0x2020021
000224 e001      	LDI  R16,LOW(1)
000225 c0fc      	RJMP _0x202001B
                 _0x2020021:
000226 322b      	CPI  R18,43
000227 f411      	BRNE _0x2020022
000228 e24b      	LDI  R20,LOW(43)
000229 c0f8      	RJMP _0x202001B
                 _0x2020022:
00022a 3220      	CPI  R18,32
00022b f411      	BRNE _0x2020023
00022c e240      	LDI  R20,LOW(32)
00022d c0f4      	RJMP _0x202001B
                 _0x2020023:
00022e c002      	RJMP _0x2020024
                 _0x202001F:
00022f 30e2      	CPI  R30,LOW(0x2)
000230 f439      	BRNE _0x2020025
                 _0x2020024:
000231 e050      	LDI  R21,LOW(0)
000232 e013      	LDI  R17,LOW(3)
000233 3320      	CPI  R18,48
000234 f411      	BRNE _0x2020026
000235 6800      	ORI  R16,LOW(128)
000236 c0eb      	RJMP _0x202001B
                 _0x2020026:
000237 c003      	RJMP _0x2020027
                 _0x2020025:
000238 30e3      	CPI  R30,LOW(0x3)
000239 f009      	BREQ PC+2
00023a c0e7      	RJMP _0x202001B
                 _0x2020027:
00023b 3320      	CPI  R18,48
00023c f010      	BRLO _0x202002A
00023d 332a      	CPI  R18,58
00023e f008      	BRLO _0x202002B
                 _0x202002A:
00023f c007      	RJMP _0x2020029
                 _0x202002B:
000240 e0aa      	LDI  R26,LOW(10)
000241 9f5a      	MUL  R21,R26
000242 2d50      	MOV  R21,R0
000243 2fe2      	MOV  R30,R18
000244 53e0      	SUBI R30,LOW(48)
000245 0f5e      	ADD  R21,R30
000246 c0db      	RJMP _0x202001B
                 _0x2020029:
000247 2fe2      	MOV  R30,R18
000248 36e3      	CPI  R30,LOW(0x63)
000249 f449      	BRNE _0x202002F
00024a 940e 0392 	CALL SUBOPT_0x4
00024c 89e8      	LDD  R30,Y+16
00024d 89f9      	LDD  R31,Y+16+1
00024e 81a4      	LDD  R26,Z+4
00024f 93aa      	ST   -Y,R26
000250 940e 0398 	CALL SUBOPT_0x5
000252 c0ce      	RJMP _0x2020030
                 _0x202002F:
000253 37e3      	CPI  R30,LOW(0x73)
000254 f441      	BRNE _0x2020032
000255 940e 0392 	CALL SUBOPT_0x4
000257 940e 039e 	CALL SUBOPT_0x6
000259 940e 035f 	CALL _strlen
00025b 2f1e      	MOV  R17,R30
00025c c00a      	RJMP _0x2020033
                 _0x2020032:
00025d 37e0      	CPI  R30,LOW(0x70)
00025e f461      	BRNE _0x2020035
00025f 940e 0392 	CALL SUBOPT_0x4
000261 940e 039e 	CALL SUBOPT_0x6
000263 940e 036b 	CALL _strlenf
000265 2f1e      	MOV  R17,R30
000266 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000267 6002      	ORI  R16,LOW(2)
000268 770f      	ANDI R16,LOW(127)
000269 e030      	LDI  R19,LOW(0)
00026a c034      	RJMP _0x2020036
                 _0x2020035:
00026b 36e4      	CPI  R30,LOW(0x64)
00026c f011      	BREQ _0x2020039
00026d 36e9      	CPI  R30,LOW(0x69)
00026e f411      	BRNE _0x202003A
                 _0x2020039:
00026f 6004      	ORI  R16,LOW(4)
000270 c002      	RJMP _0x202003B
                 _0x202003A:
000271 37e5      	CPI  R30,LOW(0x75)
000272 f431      	BRNE _0x202003C
                 _0x202003B:
000273 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000274 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000275 83ee      	STD  Y+6,R30
000276 83ff      	STD  Y+6+1,R31
000277 e015      	LDI  R17,LOW(5)
000278 c00c      	RJMP _0x202003D
                 _0x202003C:
000279 35e8      	CPI  R30,LOW(0x58)
00027a f411      	BRNE _0x202003F
00027b 6008      	ORI  R16,LOW(8)
00027c c003      	RJMP _0x2020040
                 _0x202003F:
00027d 37e8      	CPI  R30,LOW(0x78)
00027e f009      	BREQ PC+2
00027f c0a1      	RJMP _0x2020071
                 _0x2020040:
000280 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000281 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000282 83ee      	STD  Y+6,R30
000283 83ff      	STD  Y+6+1,R31
000284 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000285 ff02      	SBRS R16,2
000286 c014      	RJMP _0x2020042
000287 940e 0392 	CALL SUBOPT_0x4
000289 940e 03a8 	CALL SUBOPT_0x7
00028b 85ab      	LDD  R26,Y+11
00028c 23aa      	TST  R26
00028d f43a      	BRPL _0x2020043
00028e 85ea      	LDD  R30,Y+10
00028f 85fb      	LDD  R31,Y+10+1
000290 940e 03c5 	CALL __ANEGW1
000292 87ea      	STD  Y+10,R30
000293 87fb      	STD  Y+10+1,R31
000294 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000295 3040      	CPI  R20,0
000296 f011      	BREQ _0x2020044
000297 5f1f      	SUBI R17,-LOW(1)
000298 c001      	RJMP _0x2020045
                 _0x2020044:
000299 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00029a c004      	RJMP _0x2020046
                 _0x2020042:
00029b 940e 0392 	CALL SUBOPT_0x4
00029d 940e 03a8 	CALL SUBOPT_0x7
                 _0x2020046:
                 _0x2020036:
00029f fd00      	SBRC R16,0
0002a0 c011      	RJMP _0x2020047
                 _0x2020048:
0002a1 1715      	CP   R17,R21
0002a2 f478      	BRSH _0x202004A
0002a3 ff07      	SBRS R16,7
0002a4 c008      	RJMP _0x202004B
0002a5 ff02      	SBRS R16,2
0002a6 c004      	RJMP _0x202004C
0002a7 7f0b      	ANDI R16,LOW(251)
0002a8 2f24      	MOV  R18,R20
0002a9 5011      	SUBI R17,LOW(1)
0002aa c001      	RJMP _0x202004D
                 _0x202004C:
0002ab e320      	LDI  R18,LOW(48)
                 _0x202004D:
0002ac c001      	RJMP _0x202004E
                 _0x202004B:
0002ad e220      	LDI  R18,LOW(32)
                 _0x202004E:
0002ae 940e 038b 	CALL SUBOPT_0x3
0002b0 5051      	SUBI R21,LOW(1)
0002b1 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0002b2 2f31      	MOV  R19,R17
0002b3 ff01      	SBRS R16,1
0002b4 c017      	RJMP _0x202004F
                 _0x2020050:
0002b5 3030      	CPI  R19,0
0002b6 f0a1      	BREQ _0x2020052
0002b7 ff03      	SBRS R16,3
0002b8 c006      	RJMP _0x2020053
0002b9 81ee      	LDD  R30,Y+6
0002ba 81ff      	LDD  R31,Y+6+1
0002bb 9125      	LPM  R18,Z+
0002bc 83ee      	STD  Y+6,R30
0002bd 83ff      	STD  Y+6+1,R31
0002be c005      	RJMP _0x2020054
                 _0x2020053:
0002bf 81ae      	LDD  R26,Y+6
0002c0 81bf      	LDD  R27,Y+6+1
0002c1 912d      	LD   R18,X+
0002c2 83ae      	STD  Y+6,R26
0002c3 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0002c4 940e 038b 	CALL SUBOPT_0x3
0002c6 3050      	CPI  R21,0
0002c7 f009      	BREQ _0x2020055
0002c8 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0002c9 5031      	SUBI R19,LOW(1)
0002ca cfea      	RJMP _0x2020050
                 _0x2020052:
0002cb c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0002cc e320      	LDI  R18,LOW(48)
0002cd 81ee      	LDD  R30,Y+6
0002ce 81ff      	LDD  R31,Y+6+1
0002cf 940e 03d6 	CALL __GETW1PF
0002d1 87e8      	STD  Y+8,R30
0002d2 87f9      	STD  Y+8+1,R31
0002d3 81ee      	LDD  R30,Y+6
0002d4 81ff      	LDD  R31,Y+6+1
0002d5 9632      	ADIW R30,2
0002d6 83ee      	STD  Y+6,R30
0002d7 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0002d8 85e8      	LDD  R30,Y+8
0002d9 85f9      	LDD  R31,Y+8+1
0002da 85aa      	LDD  R26,Y+10
0002db 85bb      	LDD  R27,Y+10+1
0002dc 17ae      	CP   R26,R30
0002dd 07bf      	CPC  R27,R31
0002de f050      	BRLO _0x202005C
0002df 5f2f      	SUBI R18,-LOW(1)
0002e0 85a8      	LDD  R26,Y+8
0002e1 85b9      	LDD  R27,Y+8+1
0002e2 85ea      	LDD  R30,Y+10
0002e3 85fb      	LDD  R31,Y+10+1
0002e4 1bea      	SUB  R30,R26
0002e5 0bfb      	SBC  R31,R27
0002e6 87ea      	STD  Y+10,R30
0002e7 87fb      	STD  Y+10+1,R31
0002e8 cfef      	RJMP _0x202005A
                 _0x202005C:
0002e9 332a      	CPI  R18,58
0002ea f028      	BRLO _0x202005D
0002eb ff03      	SBRS R16,3
0002ec c002      	RJMP _0x202005E
0002ed 5f29      	SUBI R18,-LOW(7)
0002ee c001      	RJMP _0x202005F
                 _0x202005E:
0002ef 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002f0 fd04      	SBRC R16,4
0002f1 c01a      	RJMP _0x2020061
0002f2 3321      	CPI  R18,49
0002f3 f420      	BRSH _0x2020063
0002f4 85a8      	LDD  R26,Y+8
0002f5 85b9      	LDD  R27,Y+8+1
0002f6 9711      	SBIW R26,1
0002f7 f409      	BRNE _0x2020062
                 _0x2020063:
0002f8 c009      	RJMP _0x20200CD
                 _0x2020062:
0002f9 1753      	CP   R21,R19
0002fa f010      	BRLO _0x2020067
0002fb ff00      	SBRS R16,0
0002fc c001      	RJMP _0x2020068
                 _0x2020067:
0002fd c013      	RJMP _0x2020066
                 _0x2020068:
0002fe e220      	LDI  R18,LOW(32)
0002ff ff07      	SBRS R16,7
000300 c00b      	RJMP _0x2020069
000301 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000302 6100      	ORI  R16,LOW(16)
000303 ff02      	SBRS R16,2
000304 c007      	RJMP _0x202006A
000305 7f0b      	ANDI R16,LOW(251)
000306 934a      	ST   -Y,R20
000307 940e 0398 	CALL SUBOPT_0x5
000309 3050      	CPI  R21,0
00030a f009      	BREQ _0x202006B
00030b 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00030c 940e 038b 	CALL SUBOPT_0x3
00030e 3050      	CPI  R21,0
00030f f009      	BREQ _0x202006C
000310 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000311 5031      	SUBI R19,LOW(1)
000312 85a8      	LDD  R26,Y+8
000313 85b9      	LDD  R27,Y+8+1
000314 9712      	SBIW R26,2
000315 f008      	BRLO _0x2020059
000316 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000317 ff00      	SBRS R16,0
000318 c008      	RJMP _0x202006D
                 _0x202006E:
000319 3050      	CPI  R21,0
00031a f031      	BREQ _0x2020070
00031b 5051      	SUBI R21,LOW(1)
00031c e2e0      	LDI  R30,LOW(32)
00031d 93ea      	ST   -Y,R30
00031e 940e 0398 	CALL SUBOPT_0x5
000320 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000321 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000322 cee0      	RJMP _0x2020016
                 _0x2020018:
000323 85ac      	LDD  R26,Y+12
000324 85bd      	LDD  R27,Y+12+1
000325 940e 03d2 	CALL __GETW1P
000327 940e 03e6 	CALL __LOADLOCR6
000329 9664      	ADIW R28,20
00032a 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00032b 92ff      	PUSH R15
00032c 2ef8      	MOV  R15,R24
00032d 9726      	SBIW R28,6
00032e 940e 03e1 	CALL __SAVELOCR4
000330 940e 03b0 	CALL SUBOPT_0x8
000332 9730      	SBIW R30,0
000333 f419      	BRNE _0x2020072
000334 efef      	LDI  R30,LOW(65535)
000335 efff      	LDI  R31,HIGH(65535)
000336 c023      	RJMP _0x2080001
                 _0x2020072:
000337 01de      	MOVW R26,R28
000338 9616      	ADIW R26,6
000339 940e 03c1 	CALL __ADDW2R15
00033b 018d      	MOVW R16,R26
00033c 940e 03b0 	CALL SUBOPT_0x8
00033e 83ee      	STD  Y+6,R30
00033f 83ff      	STD  Y+6+1,R31
000340 e0e0      	LDI  R30,LOW(0)
000341 87e8      	STD  Y+8,R30
000342 87e9      	STD  Y+8+1,R30
000343 01de      	MOVW R26,R28
000344 961a      	ADIW R26,10
000345 940e 03c1 	CALL __ADDW2R15
000347 940e 03d2 	CALL __GETW1P
000349 93fa      	ST   -Y,R31
00034a 93ea      	ST   -Y,R30
00034b 931a      	ST   -Y,R17
00034c 930a      	ST   -Y,R16
00034d ebe7      	LDI  R30,LOW(_put_buff_G101)
00034e e0f1      	LDI  R31,HIGH(_put_buff_G101)
00034f 93fa      	ST   -Y,R31
000350 93ea      	ST   -Y,R30
000351 01de      	MOVW R26,R28
000352 961a      	ADIW R26,10
000353 dea3      	RCALL __print_G101
000354 019f      	MOVW R18,R30
000355 81ae      	LDD  R26,Y+6
000356 81bf      	LDD  R27,Y+6+1
000357 e0e0      	LDI  R30,LOW(0)
000358 93ec      	ST   X,R30
000359 01f9      	MOVW R30,R18
                 _0x2080001:
00035a 940e 03e8 	CALL __LOADLOCR4
00035c 962a      	ADIW R28,10
00035d 90ff      	POP  R15
00035e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00035f 93ba      	ST   -Y,R27
000360 93aa      	ST   -Y,R26
000361 91a9          ld   r26,y+
000362 91b9          ld   r27,y+
000363 27ee          clr  r30
000364 27ff          clr  r31
                 strlen0:
000365 916d          ld   r22,x+
000366 2366          tst  r22
000367 f011          breq strlen1
000368 9631          adiw r30,1
000369 cffb          rjmp strlen0
                 strlen1:
00036a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00036b 93ba      	ST   -Y,R27
00036c 93aa      	ST   -Y,R26
00036d 27aa          clr  r26
00036e 27bb          clr  r27
00036f 91e9          ld   r30,y+
000370 91f9          ld   r31,y+
                 strlenf0:
000371 9005      	lpm  r0,z+
000372 2000          tst  r0
000373 f011          breq strlenf1
000374 9611          adiw r26,1
000375 cffb          rjmp strlenf0
                 strlenf1:
000376 01fd          movw r30,r26
000377 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000160           	.BYTE 0x4
                 _line:
000164           	.BYTE 0x14
                 _input_index_S0000000000:
000178           	.BYTE 0x1
                 __base_y_G100:
000179           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000378 2766      	CLR  R22
000379 2777      	CLR  R23
00037a 940e 03da 	CALL __PUTPARD1
00037c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00037d 940e 013e 	CALL __lcd_write_data
00037f e0a3      	LDI  R26,LOW(3)
000380 e0b0      	LDI  R27,0
000381 940c 03b7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000383 e3a0      	LDI  R26,LOW(48)
000384 940e 012a 	CALL __lcd_write_nibble_G100
                +
000386 ec88     +LDI R24 , LOW ( 200 )
000387 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000388 9701     +SBIW R24 , 1
000389 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00038a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00038b 932a      	ST   -Y,R18
00038c 85ad      	LDD  R26,Y+13
00038d 85be      	LDD  R27,Y+13+1
00038e 85ef      	LDD  R30,Y+15
00038f 89f8      	LDD  R31,Y+15+1
000390 9509      	ICALL
000391 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
000392 89e8      	LDD  R30,Y+16
000393 89f9      	LDD  R31,Y+16+1
000394 9734      	SBIW R30,4
000395 8be8      	STD  Y+16,R30
000396 8bf9      	STD  Y+16+1,R31
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000398 85ad      	LDD  R26,Y+13
000399 85be      	LDD  R27,Y+13+1
00039a 85ef      	LDD  R30,Y+15
00039b 89f8      	LDD  R31,Y+15+1
00039c 9509      	ICALL
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00039e 89a8      	LDD  R26,Y+16
00039f 89b9      	LDD  R27,Y+16+1
0003a0 9614      	ADIW R26,4
0003a1 940e 03d2 	CALL __GETW1P
0003a3 83ee      	STD  Y+6,R30
0003a4 83ff      	STD  Y+6+1,R31
0003a5 81ae      	LDD  R26,Y+6
0003a6 81bf      	LDD  R27,Y+6+1
0003a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0003a8 89a8      	LDD  R26,Y+16
0003a9 89b9      	LDD  R27,Y+16+1
0003aa 9614      	ADIW R26,4
0003ab 940e 03d2 	CALL __GETW1P
0003ad 87ea      	STD  Y+10,R30
0003ae 87fb      	STD  Y+10+1,R31
0003af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003b0 01de      	MOVW R26,R28
0003b1 961c      	ADIW R26,12
0003b2 940e 03c1 	CALL __ADDW2R15
0003b4 940e 03d2 	CALL __GETW1P
0003b6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003b7 9610      	adiw r26,0
0003b8 f039      	breq __delay_ms1
                 __delay_ms0:
0003b9 95a8      	wdr
                +
0003ba ed80     +LDI R24 , LOW ( 0x7D0 )
0003bb e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003bc 9701     +SBIW R24 , 1
0003bd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003be 9711      	sbiw r26,1
0003bf f7c9      	brne __delay_ms0
                 __delay_ms1:
0003c0 9508      	ret
                 
                 __ADDW2R15:
0003c1 2400      	CLR  R0
0003c2 0daf      	ADD  R26,R15
0003c3 1db0      	ADC  R27,R0
0003c4 9508      	RET
                 
                 __ANEGW1:
0003c5 95f1      	NEG  R31
0003c6 95e1      	NEG  R30
0003c7 40f0      	SBCI R31,0
0003c8 9508      	RET
                 
                 __LSRW4:
0003c9 95f6      	LSR  R31
0003ca 95e7      	ROR  R30
                 __LSRW3:
0003cb 95f6      	LSR  R31
0003cc 95e7      	ROR  R30
                 __LSRW2:
0003cd 95f6      	LSR  R31
0003ce 95e7      	ROR  R30
0003cf 95f6      	LSR  R31
0003d0 95e7      	ROR  R30
0003d1 9508      	RET
                 
                 __GETW1P:
0003d2 91ed      	LD   R30,X+
0003d3 91fc      	LD   R31,X
0003d4 9711      	SBIW R26,1
0003d5 9508      	RET
                 
                 __GETW1PF:
0003d6 9005      	LPM  R0,Z+
0003d7 91f4      	LPM  R31,Z
0003d8 2de0      	MOV  R30,R0
0003d9 9508      	RET
                 
                 __PUTPARD1:
0003da 937a      	ST   -Y,R23
0003db 936a      	ST   -Y,R22
0003dc 93fa      	ST   -Y,R31
0003dd 93ea      	ST   -Y,R30
0003de 9508      	RET
                 
                 __SAVELOCR6:
0003df 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003e0 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003e1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003e2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003e3 931a      	ST   -Y,R17
0003e4 930a      	ST   -Y,R16
0003e5 9508      	RET
                 
                 __LOADLOCR6:
0003e6 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003e7 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003e8 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003e9 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ea 8119      	LDD  R17,Y+1
0003eb 8108      	LD   R16,Y
0003ec 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   4 r3 :   0 r4 :   3 r5 :   0 r6 :   3 r7 :   1 
r8 :   4 r9 :   2 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   7 r23:   3 
r24:  27 r25:   5 r26: 105 r27:  41 r28:  14 r29:   1 r30: 227 r31:  77 
x  :  25 y  : 178 z  :  15 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  54 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   4 cpi   :  34 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  31 ldd   :  77 ldi   : 105 
lds   :   7 lpm   :  14 lsl   :   1 lsr   :   5 mov   :  17 movw  :  21 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  45 pop   :   1 push  :   1 rcall :  17 ret   :  26 
reti  :   1 rjmp  :  64 rol   :   1 ror   :   5 sbc   :   2 sbci  :   2 
sbi   :   9 sbic  :   2 sbis  :   0 sbiw  :  19 sbr   :   0 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :  31 sts   :   4 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 63 out of 116 (54.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007da   1950     60   2010   16384  12.3%
[.dseg] 0x000060 0x00017d      0     29     29    1024   2.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
