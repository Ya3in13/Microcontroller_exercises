
AVRASM ver. 2.1.30  C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm Tue May 20 23:23:42 2025

C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\yasin\Documents\GitHub\Microcontroller_exercises\code Semester 2\Debug\List\S4N3.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0069 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 3154
000034 253d
000035 352d
000036 0064      	.DB  0x54,0x31,0x3D,0x25,0x2D,0x35,0x64,0x0
                 _0x2000003:
000037 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000038 0002      	.DW  0x02
000039 0179      	.DW  __base_y_G100
00003a 006e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0096 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 1
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;unsigned char line[20];
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000069 938a      	ST   -Y,R24
00006a 93aa      	ST   -Y,R26
00006b 93ba      	ST   -Y,R27
00006c 93ea      	ST   -Y,R30
00006d 93fa      	ST   -Y,R31
00006e b7ef      	IN   R30,SREG
00006f 93ea      	ST   -Y,R30
                 ; 0000 0013 static unsigned char input_index=0;
                 ; 0000 0014 // Read the AD conversion result
                 ; 0000 0015 adc_data[input_index]=ADCW;
000070 91e0 0178 	LDS  R30,_input_index_S0000000000
000072 e6a0      	LDI  R26,LOW(_adc_data)
000073 e0b1      	LDI  R27,HIGH(_adc_data)
000074 e0f0      	LDI  R31,0
000075 0fee      	LSL  R30
000076 1fff      	ROL  R31
000077 0fae      	ADD  R26,R30
000078 1fbf      	ADC  R27,R31
000079 b1e4      	IN   R30,0x4
00007a b1f5      	IN   R31,0x4+1
00007b 93ed      	ST   X+,R30
00007c 93fc      	ST   X,R31
                 ; 0000 0016 // Select next ADC input
                 ; 0000 0017 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
00007d 91a0 0178 	LDS  R26,_input_index_S0000000000
00007f 5faf      	SUBI R26,-LOW(1)
000080 93a0 0178 	STS  _input_index_S0000000000,R26
000082 30a2      	CPI  R26,LOW(0x2)
000083 f018      	BRLO _0x3
                 ; 0000 0018    input_index=0;
000084 e0e0      	LDI  R30,LOW(0)
000085 93e0 0178 	STS  _input_index_S0000000000,R30
                 ; 0000 0019 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x3:
000087 91e0 0178 	LDS  R30,_input_index_S0000000000
000089 b9e7      	OUT  0x7,R30
                 ; 0000 001A // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 001B delay_us(10);
                +
00008a e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00008b 958a     +DEC R24
00008c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 001C // Start the AD conversion
                 ; 0000 001D ADCSRA|=(1<<ADSC);
00008d 9a36      	SBI  0x6,6
                 ; 0000 001E }
00008e 91e9      	LD   R30,Y+
00008f bfef      	OUT  SREG,R30
000090 91f9      	LD   R31,Y+
000091 91e9      	LD   R30,Y+
000092 91b9      	LD   R27,Y+
000093 91a9      	LD   R26,Y+
000094 9189      	LD   R24,Y+
000095 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0021 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0022 // Declare your local variables here
                 ; 0000 0023 
                 ; 0000 0024 // Input/Output Ports initialization
                 ; 0000 0025 // Port A initialization
                 ; 0000 0026 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0027 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000096 e0e0      	LDI  R30,LOW(0)
000097 bbea      	OUT  0x1A,R30
                 ; 0000 0028 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0029 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000098 bbeb      	OUT  0x1B,R30
                 ; 0000 002A 
                 ; 0000 002B // Port B initialization
                 ; 0000 002C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000099 bbe7      	OUT  0x17,R30
                 ; 0000 002E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00009a bbe8      	OUT  0x18,R30
                 ; 0000 0030 
                 ; 0000 0031 // Port C initialization
                 ; 0000 0032 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0033 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00009b bbe4      	OUT  0x14,R30
                 ; 0000 0034 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0035 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009c bbe5      	OUT  0x15,R30
                 ; 0000 0036 
                 ; 0000 0037 // Port D initialization
                 ; 0000 0038 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0039 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00009d efef      	LDI  R30,LOW(255)
00009e bbe1      	OUT  0x11,R30
                 ; 0000 003A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00009f e0e0      	LDI  R30,LOW(0)
0000a0 bbe2      	OUT  0x12,R30
                 ; 0000 003C 
                 ; 0000 003D // Timer/Counter 0 initialization
                 ; 0000 003E // Clock source: System Clock
                 ; 0000 003F // Clock value: Timer 0 Stopped
                 ; 0000 0040 // Mode: Normal top=0xFF
                 ; 0000 0041 // OC0 output: Disconnected
                 ; 0000 0042 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000a1 bfe3      	OUT  0x33,R30
                 ; 0000 0043 TCNT0=0x00;
0000a2 bfe2      	OUT  0x32,R30
                 ; 0000 0044 OCR0=0x00;
0000a3 bfec      	OUT  0x3C,R30
                 ; 0000 0045 
                 ; 0000 0046 // Timer/Counter 1 initialization
                 ; 0000 0047 // Clock source: System Clock
                 ; 0000 0048 // Clock value: Timer1 Stopped
                 ; 0000 0049 // Mode: Normal top=0xFFFF
                 ; 0000 004A // OC1A output: Disconnected
                 ; 0000 004B // OC1B output: Disconnected
                 ; 0000 004C // Noise Canceler: Off
                 ; 0000 004D // Input Capture on Falling Edge
                 ; 0000 004E // Timer1 Overflow Interrupt: Off
                 ; 0000 004F // Input Capture Interrupt: Off
                 ; 0000 0050 // Compare A Match Interrupt: Off
                 ; 0000 0051 // Compare B Match Interrupt: Off
                 ; 0000 0052 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a4 bdef      	OUT  0x2F,R30
                 ; 0000 0053 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000a5 bdee      	OUT  0x2E,R30
                 ; 0000 0054 TCNT1H=0x00;
0000a6 bded      	OUT  0x2D,R30
                 ; 0000 0055 TCNT1L=0x00;
0000a7 bdec      	OUT  0x2C,R30
                 ; 0000 0056 ICR1H=0x00;
0000a8 bde7      	OUT  0x27,R30
                 ; 0000 0057 ICR1L=0x00;
0000a9 bde6      	OUT  0x26,R30
                 ; 0000 0058 OCR1AH=0x00;
0000aa bdeb      	OUT  0x2B,R30
                 ; 0000 0059 OCR1AL=0x00;
0000ab bdea      	OUT  0x2A,R30
                 ; 0000 005A OCR1BH=0x00;
0000ac bde9      	OUT  0x29,R30
                 ; 0000 005B OCR1BL=0x00;
0000ad bde8      	OUT  0x28,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 2 initialization
                 ; 0000 005E // Clock source: System Clock
                 ; 0000 005F // Clock value: Timer2 Stopped
                 ; 0000 0060 // Mode: Normal top=0xFF
                 ; 0000 0061 // OC2 output: Disconnected
                 ; 0000 0062 ASSR=0<<AS2;
0000ae bde2      	OUT  0x22,R30
                 ; 0000 0063 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000af bde5      	OUT  0x25,R30
                 ; 0000 0064 TCNT2=0x00;
0000b0 bde4      	OUT  0x24,R30
                 ; 0000 0065 OCR2=0x00;
0000b1 bde3      	OUT  0x23,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0068 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000b2 bfe9      	OUT  0x39,R30
                 ; 0000 0069 
                 ; 0000 006A // External Interrupt(s) initialization
                 ; 0000 006B // INT0: Off
                 ; 0000 006C // INT1: Off
                 ; 0000 006D // INT2: Off
                 ; 0000 006E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b3 bfe5      	OUT  0x35,R30
                 ; 0000 006F MCUCSR=(0<<ISC2);
0000b4 bfe4      	OUT  0x34,R30
                 ; 0000 0070 
                 ; 0000 0071 // USART initialization
                 ; 0000 0072 // USART disabled
                 ; 0000 0073 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000b5 b9ea      	OUT  0xA,R30
                 ; 0000 0074 
                 ; 0000 0075 // Analog Comparator initialization
                 ; 0000 0076 // Analog Comparator: Off
                 ; 0000 0077 // The Analog Comparator's positive input is
                 ; 0000 0078 // connected to the AIN0 pin
                 ; 0000 0079 // The Analog Comparator's negative input is
                 ; 0000 007A // connected to the AIN1 pin
                 ; 0000 007B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b6 e8e0      	LDI  R30,LOW(128)
0000b7 b9e8      	OUT  0x8,R30
                 ; 0000 007C 
                 ; 0000 007D // ADC initialization
                 ; 0000 007E // ADC Clock frequency: 1000.000 kHz
                 ; 0000 007F // ADC Voltage Reference: AREF pin
                 ; 0000 0080 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0081 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 b9e7      	OUT  0x7,R30
                 ; 0000 0082 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000ba eceb      	LDI  R30,LOW(203)
0000bb b9e6      	OUT  0x6,R30
                 ; 0000 0083 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000bc e0e0      	LDI  R30,LOW(0)
0000bd bfe0      	OUT  0x30,R30
                 ; 0000 0084 
                 ; 0000 0085 // SPI initialization
                 ; 0000 0086 // SPI disabled
                 ; 0000 0087 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000be b9ed      	OUT  0xD,R30
                 ; 0000 0088 
                 ; 0000 0089 // TWI initialization
                 ; 0000 008A // TWI disabled
                 ; 0000 008B TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000bf bfe6      	OUT  0x36,R30
                 ; 0000 008C 
                 ; 0000 008D // Alphanumeric LCD initialization
                 ; 0000 008E // Connections are specified in the
                 ; 0000 008F // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0090 // RS - PORTC Bit 0
                 ; 0000 0091 // RD - PORTC Bit 1
                 ; 0000 0092 // EN - PORTC Bit 2
                 ; 0000 0093 // D4 - PORTC Bit 4
                 ; 0000 0094 // D5 - PORTC Bit 5
                 ; 0000 0095 // D6 - PORTC Bit 6
                 ; 0000 0096 // D7 - PORTC Bit 7
                 ; 0000 0097 // Characters/line: 20
                 ; 0000 0098 lcd_init(20);
0000c0 e1a4      	LDI  R26,LOW(20)
0000c1 d07d      	RCALL _lcd_init
                 ; 0000 0099 
                 ; 0000 009A // Global enable interrupts
                 ; 0000 009B #asm("sei")
0000c2 9478      	sei
                 ; 0000 009C 
                 ; 0000 009D while (1)
                 _0x4:
                 ; 0000 009E       {
                 ; 0000 009F 
                 ; 0000 00A0 
                 ; 0000 00A1       lcd_gotoxy(0,0);
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 93ea      	ST   -Y,R30
0000c5 e0a0      	LDI  R26,LOW(0)
0000c6 d039      	RCALL _lcd_gotoxy
                 ; 0000 00A2       sprintf(line,"T1=%-5d",adc_data[1]);
0000c7 e6e4      	LDI  R30,LOW(_line)
0000c8 e0f1      	LDI  R31,HIGH(_line)
0000c9 93fa      	ST   -Y,R31
0000ca 93ea      	ST   -Y,R30
                +
0000cb e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000cc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000cd 93fa      	ST   -Y,R31
0000ce 93ea      	ST   -Y,R30
                +
0000cf 91e0 0162+LDS R30 , _adc_data + ( 2 )
0000d1 91f0 0163+LDS R31 , _adc_data + ( 2 ) + 1
                 	__GETW1MN _adc_data,2
0000d3 2766      	CLR  R22
0000d4 2777      	CLR  R23
0000d5 940e 0382 	CALL __PUTPARD1
0000d7 e084      	LDI  R24,4
0000d8 940e 02e1 	CALL _sprintf
0000da 9628      	ADIW R28,8
                 ; 0000 00A3       lcd_puts(line);
0000db e6a4      	LDI  R26,LOW(_line)
0000dc e0b1      	LDI  R27,HIGH(_line)
0000dd d050      	RCALL _lcd_puts
                 ; 0000 00A4 
                 ; 0000 00A5       }
0000de cfe4      	RJMP _0x4
                 ; 0000 00A6 }
                 _0x7:
0000df cfff      	RJMP _0x7
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000e0 93aa      	ST   -Y,R26
0000e1 b3e5      	IN   R30,0x15
0000e2 70ef      	ANDI R30,LOW(0xF)
0000e3 2fae      	MOV  R26,R30
0000e4 81e8      	LD   R30,Y
0000e5 7fe0      	ANDI R30,LOW(0xF0)
0000e6 2bea      	OR   R30,R26
0000e7 bbe5      	OUT  0x15,R30
                +
0000e8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e9 958a     +DEC R24
0000ea f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000eb 9aaa      	SBI  0x15,2
                +
0000ec e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ed 958a     +DEC R24
0000ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ef 98aa      	CBI  0x15,2
                +
0000f0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f1 958a     +DEC R24
0000f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f3 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000f4 93aa      	ST   -Y,R26
0000f5 81a8      	LD   R26,Y
0000f6 dfe9      	RCALL __lcd_write_nibble_G100
0000f7 81e8          ld    r30,y
0000f8 95e2          swap  r30
0000f9 83e8          st    y,r30
0000fa 81a8      	LD   R26,Y
0000fb dfe4      	RCALL __lcd_write_nibble_G100
                +
0000fc e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000fd 958a     +DEC R24
0000fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000ff c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000100 93aa      	ST   -Y,R26
000101 81e8      	LD   R30,Y
000102 e0f0      	LDI  R31,0
000103 58e7      	SUBI R30,LOW(-__base_y_G100)
000104 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000105 81e0      	LD   R30,Z
000106 81a9      	LDD  R26,Y+1
000107 0fae      	ADD  R26,R30
000108 dfeb      	RCALL __lcd_write_data
000109 8059      	LDD  R5,Y+1
00010a 8048      	LDD  R4,Y+0
00010b 9622      	ADIW R28,2
00010c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00010d e0a2      	LDI  R26,LOW(2)
00010e 940e 032e 	CALL SUBOPT_0x0
000110 e0ac      	LDI  R26,LOW(12)
000111 dfe2      	RCALL __lcd_write_data
000112 e0a1      	LDI  R26,LOW(1)
000113 940e 032e 	CALL SUBOPT_0x0
000115 e0e0      	LDI  R30,LOW(0)
000116 2e4e      	MOV  R4,R30
000117 2e5e      	MOV  R5,R30
000118 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000119 93aa      	ST   -Y,R26
00011a 81a8      	LD   R26,Y
00011b 30aa      	CPI  R26,LOW(0xA)
00011c f011      	BREQ _0x2000005
00011d 1457      	CP   R5,R7
00011e f048      	BRLO _0x2000004
                 _0x2000005:
00011f e0e0      	LDI  R30,LOW(0)
000120 93ea      	ST   -Y,R30
000121 9443      	INC  R4
000122 2da4      	MOV  R26,R4
000123 dfdc      	RCALL _lcd_gotoxy
000124 81a8      	LD   R26,Y
000125 30aa      	CPI  R26,LOW(0xA)
000126 f409      	BRNE _0x2000007
000127 c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000128 9453      	INC  R5
000129 9aa8      	SBI  0x15,0
00012a 81a8      	LD   R26,Y
00012b dfc8      	RCALL __lcd_write_data
00012c 98a8      	CBI  0x15,0
00012d c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00012e 93ba      	ST   -Y,R27
00012f 93aa      	ST   -Y,R26
000130 931a      	ST   -Y,R17
                 _0x2000008:
000131 81a9      	LDD  R26,Y+1
000132 81ba      	LDD  R27,Y+1+1
000133 91ed      	LD   R30,X+
000134 83a9      	STD  Y+1,R26
000135 83ba      	STD  Y+1+1,R27
000136 2f1e      	MOV  R17,R30
000137 30e0      	CPI  R30,0
000138 f019      	BREQ _0x200000A
000139 2fa1      	MOV  R26,R17
00013a dfde      	RCALL _lcd_putchar
00013b cff5      	RJMP _0x2000008
                 _0x200000A:
00013c 8118      	LDD  R17,Y+0
00013d 9623      	ADIW R28,3
00013e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013f 93aa      	ST   -Y,R26
000140 b3e4      	IN   R30,0x14
000141 6fe0      	ORI  R30,LOW(0xF0)
000142 bbe4      	OUT  0x14,R30
000143 9aa2      	SBI  0x14,2
000144 9aa0      	SBI  0x14,0
000145 9aa1      	SBI  0x14,1
000146 98aa      	CBI  0x15,2
000147 98a8      	CBI  0x15,0
000148 98a9      	CBI  0x15,1
000149 8078      	LDD  R7,Y+0
00014a 81e8      	LD   R30,Y
00014b 58e0      	SUBI R30,-LOW(128)
                +
00014c 93e0 017b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00014e 81e8      	LD   R30,Y
00014f 54e0      	SUBI R30,-LOW(192)
                +
000150 93e0 017c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000152 e1a4      	LDI  R26,LOW(20)
000153 e0b0      	LDI  R27,0
000154 940e 0368 	CALL _delay_ms
000156 940e 0334 	CALL SUBOPT_0x1
000158 940e 0334 	CALL SUBOPT_0x1
00015a 940e 0334 	CALL SUBOPT_0x1
00015c e2a0      	LDI  R26,LOW(32)
00015d df82      	RCALL __lcd_write_nibble_G100
                +
00015e ec88     +LDI R24 , LOW ( 200 )
00015f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000160 9701     +SBIW R24 , 1
000161 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000162 e2a8      	LDI  R26,LOW(40)
000163 df90      	RCALL __lcd_write_data
000164 e0a4      	LDI  R26,LOW(4)
000165 df8e      	RCALL __lcd_write_data
000166 e8a5      	LDI  R26,LOW(133)
000167 df8c      	RCALL __lcd_write_data
000168 e0a6      	LDI  R26,LOW(6)
000169 df8a      	RCALL __lcd_write_data
00016a dfa2      	RCALL _lcd_clear
                 _0x2080002:
00016b 9621      	ADIW R28,1
00016c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
00016d 93ba      	ST   -Y,R27
00016e 93aa      	ST   -Y,R26
00016f 931a      	ST   -Y,R17
000170 930a      	ST   -Y,R16
000171 81aa      	LDD  R26,Y+2
000172 81bb      	LDD  R27,Y+2+1
000173 9612      	ADIW R26,2
000174 940e 037a 	CALL __GETW1P
000176 9730      	SBIW R30,0
000177 f159      	BREQ _0x2020010
000178 81aa      	LDD  R26,Y+2
000179 81bb      	LDD  R27,Y+2+1
00017a 9614      	ADIW R26,4
00017b 940e 037a 	CALL __GETW1P
00017d 018f      	MOVW R16,R30
00017e 9730      	SBIW R30,0
00017f f061      	BREQ _0x2020012
                +
000180 3002     +CPI R16 , LOW ( 2 )
000181 e0e0     +LDI R30 , HIGH ( 2 )
000182 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000183 f098      	BRLO _0x2020013
000184 01f8      	MOVW R30,R16
000185 9731      	SBIW R30,1
000186 018f      	MOVW R16,R30
                +
000187 81aa     +LDD R26 , Y + 2
000188 81bb     +LDD R27 , Y + 2 + 1
000189 9614     +ADIW R26 , 4
00018a 93ed     +ST X + , R30
00018b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00018c 81aa      	LDD  R26,Y+2
00018d 81bb      	LDD  R27,Y+2+1
00018e 9612      	ADIW R26,2
00018f 91ed      	LD   R30,X+
000190 91fd      	LD   R31,X+
000191 9631      	ADIW R30,1
000192 93fe      	ST   -X,R31
000193 93ee      	ST   -X,R30
000194 9731      	SBIW R30,1
000195 81ac      	LDD  R26,Y+4
000196 83a0      	STD  Z+0,R26
                 _0x2020013:
000197 81aa      	LDD  R26,Y+2
000198 81bb      	LDD  R27,Y+2+1
000199 940e 037a 	CALL __GETW1P
00019b 23ff      	TST  R31
00019c f02a      	BRMI _0x2020014
00019d 91ed      	LD   R30,X+
00019e 91fd      	LD   R31,X+
00019f 9631      	ADIW R30,1
0001a0 93fe      	ST   -X,R31
0001a1 93ee      	ST   -X,R30
                 _0x2020014:
0001a2 c006      	RJMP _0x2020015
                 _0x2020010:
0001a3 81aa      	LDD  R26,Y+2
0001a4 81bb      	LDD  R27,Y+2+1
0001a5 efef      	LDI  R30,LOW(65535)
0001a6 efff      	LDI  R31,HIGH(65535)
0001a7 93ed      	ST   X+,R30
0001a8 93fc      	ST   X,R31
                 _0x2020015:
0001a9 8119      	LDD  R17,Y+1
0001aa 8108      	LDD  R16,Y+0
0001ab 9625      	ADIW R28,5
0001ac 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001ad 93ba      	ST   -Y,R27
0001ae 93aa      	ST   -Y,R26
0001af 9726      	SBIW R28,6
0001b0 940e 0387 	CALL __SAVELOCR6
0001b2 e010      	LDI  R17,0
0001b3 85ac      	LDD  R26,Y+12
0001b4 85bd      	LDD  R27,Y+12+1
0001b5 e0e0      	LDI  R30,LOW(0)
0001b6 e0f0      	LDI  R31,HIGH(0)
0001b7 93ed      	ST   X+,R30
0001b8 93fc      	ST   X,R31
                 _0x2020016:
0001b9 89ea      	LDD  R30,Y+18
0001ba 89fb      	LDD  R31,Y+18+1
0001bb 9631      	ADIW R30,1
0001bc 8bea      	STD  Y+18,R30
0001bd 8bfb      	STD  Y+18+1,R31
0001be 9731      	SBIW R30,1
0001bf 91e4      	LPM  R30,Z
0001c0 2f2e      	MOV  R18,R30
0001c1 30e0      	CPI  R30,0
0001c2 f409      	BRNE PC+2
0001c3 c115      	RJMP _0x2020018
0001c4 2fe1      	MOV  R30,R17
0001c5 30e0      	CPI  R30,0
0001c6 f439      	BRNE _0x202001C
0001c7 3225      	CPI  R18,37
0001c8 f411      	BRNE _0x202001D
0001c9 e011      	LDI  R17,LOW(1)
0001ca c002      	RJMP _0x202001E
                 _0x202001D:
0001cb 940e 033c 	CALL SUBOPT_0x2
                 _0x202001E:
0001cd c10a      	RJMP _0x202001B
                 _0x202001C:
0001ce 30e1      	CPI  R30,LOW(0x1)
0001cf f4a9      	BRNE _0x202001F
0001d0 3225      	CPI  R18,37
0001d1 f419      	BRNE _0x2020020
0001d2 940e 033c 	CALL SUBOPT_0x2
0001d4 c102      	RJMP _0x20200CC
                 _0x2020020:
0001d5 e012      	LDI  R17,LOW(2)
0001d6 e040      	LDI  R20,LOW(0)
0001d7 e000      	LDI  R16,LOW(0)
0001d8 322d      	CPI  R18,45
0001d9 f411      	BRNE _0x2020021
0001da e001      	LDI  R16,LOW(1)
0001db c0fc      	RJMP _0x202001B
                 _0x2020021:
0001dc 322b      	CPI  R18,43
0001dd f411      	BRNE _0x2020022
0001de e24b      	LDI  R20,LOW(43)
0001df c0f8      	RJMP _0x202001B
                 _0x2020022:
0001e0 3220      	CPI  R18,32
0001e1 f411      	BRNE _0x2020023
0001e2 e240      	LDI  R20,LOW(32)
0001e3 c0f4      	RJMP _0x202001B
                 _0x2020023:
0001e4 c002      	RJMP _0x2020024
                 _0x202001F:
0001e5 30e2      	CPI  R30,LOW(0x2)
0001e6 f439      	BRNE _0x2020025
                 _0x2020024:
0001e7 e050      	LDI  R21,LOW(0)
0001e8 e013      	LDI  R17,LOW(3)
0001e9 3320      	CPI  R18,48
0001ea f411      	BRNE _0x2020026
0001eb 6800      	ORI  R16,LOW(128)
0001ec c0eb      	RJMP _0x202001B
                 _0x2020026:
0001ed c003      	RJMP _0x2020027
                 _0x2020025:
0001ee 30e3      	CPI  R30,LOW(0x3)
0001ef f009      	BREQ PC+2
0001f0 c0e7      	RJMP _0x202001B
                 _0x2020027:
0001f1 3320      	CPI  R18,48
0001f2 f010      	BRLO _0x202002A
0001f3 332a      	CPI  R18,58
0001f4 f008      	BRLO _0x202002B
                 _0x202002A:
0001f5 c007      	RJMP _0x2020029
                 _0x202002B:
0001f6 e0aa      	LDI  R26,LOW(10)
0001f7 9f5a      	MUL  R21,R26
0001f8 2d50      	MOV  R21,R0
0001f9 2fe2      	MOV  R30,R18
0001fa 53e0      	SUBI R30,LOW(48)
0001fb 0f5e      	ADD  R21,R30
0001fc c0db      	RJMP _0x202001B
                 _0x2020029:
0001fd 2fe2      	MOV  R30,R18
0001fe 36e3      	CPI  R30,LOW(0x63)
0001ff f449      	BRNE _0x202002F
000200 940e 0343 	CALL SUBOPT_0x3
000202 89e8      	LDD  R30,Y+16
000203 89f9      	LDD  R31,Y+16+1
000204 81a4      	LDD  R26,Z+4
000205 93aa      	ST   -Y,R26
000206 940e 0349 	CALL SUBOPT_0x4
000208 c0ce      	RJMP _0x2020030
                 _0x202002F:
000209 37e3      	CPI  R30,LOW(0x73)
00020a f441      	BRNE _0x2020032
00020b 940e 0343 	CALL SUBOPT_0x3
00020d 940e 034f 	CALL SUBOPT_0x5
00020f 940e 0315 	CALL _strlen
000211 2f1e      	MOV  R17,R30
000212 c00a      	RJMP _0x2020033
                 _0x2020032:
000213 37e0      	CPI  R30,LOW(0x70)
000214 f461      	BRNE _0x2020035
000215 940e 0343 	CALL SUBOPT_0x3
000217 940e 034f 	CALL SUBOPT_0x5
000219 940e 0321 	CALL _strlenf
00021b 2f1e      	MOV  R17,R30
00021c 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00021d 6002      	ORI  R16,LOW(2)
00021e 770f      	ANDI R16,LOW(127)
00021f e030      	LDI  R19,LOW(0)
000220 c034      	RJMP _0x2020036
                 _0x2020035:
000221 36e4      	CPI  R30,LOW(0x64)
000222 f011      	BREQ _0x2020039
000223 36e9      	CPI  R30,LOW(0x69)
000224 f411      	BRNE _0x202003A
                 _0x2020039:
000225 6004      	ORI  R16,LOW(4)
000226 c002      	RJMP _0x202003B
                 _0x202003A:
000227 37e5      	CPI  R30,LOW(0x75)
000228 f431      	BRNE _0x202003C
                 _0x202003B:
000229 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00022a e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00022b 83ee      	STD  Y+6,R30
00022c 83ff      	STD  Y+6+1,R31
00022d e015      	LDI  R17,LOW(5)
00022e c00c      	RJMP _0x202003D
                 _0x202003C:
00022f 35e8      	CPI  R30,LOW(0x58)
000230 f411      	BRNE _0x202003F
000231 6008      	ORI  R16,LOW(8)
000232 c003      	RJMP _0x2020040
                 _0x202003F:
000233 37e8      	CPI  R30,LOW(0x78)
000234 f009      	BREQ PC+2
000235 c0a1      	RJMP _0x2020071
                 _0x2020040:
000236 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000237 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000238 83ee      	STD  Y+6,R30
000239 83ff      	STD  Y+6+1,R31
00023a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00023b ff02      	SBRS R16,2
00023c c014      	RJMP _0x2020042
00023d 940e 0343 	CALL SUBOPT_0x3
00023f 940e 0359 	CALL SUBOPT_0x6
000241 85ab      	LDD  R26,Y+11
000242 23aa      	TST  R26
000243 f43a      	BRPL _0x2020043
000244 85ea      	LDD  R30,Y+10
000245 85fb      	LDD  R31,Y+10+1
000246 940e 0376 	CALL __ANEGW1
000248 87ea      	STD  Y+10,R30
000249 87fb      	STD  Y+10+1,R31
00024a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00024b 3040      	CPI  R20,0
00024c f011      	BREQ _0x2020044
00024d 5f1f      	SUBI R17,-LOW(1)
00024e c001      	RJMP _0x2020045
                 _0x2020044:
00024f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000250 c004      	RJMP _0x2020046
                 _0x2020042:
000251 940e 0343 	CALL SUBOPT_0x3
000253 940e 0359 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
000255 fd00      	SBRC R16,0
000256 c011      	RJMP _0x2020047
                 _0x2020048:
000257 1715      	CP   R17,R21
000258 f478      	BRSH _0x202004A
000259 ff07      	SBRS R16,7
00025a c008      	RJMP _0x202004B
00025b ff02      	SBRS R16,2
00025c c004      	RJMP _0x202004C
00025d 7f0b      	ANDI R16,LOW(251)
00025e 2f24      	MOV  R18,R20
00025f 5011      	SUBI R17,LOW(1)
000260 c001      	RJMP _0x202004D
                 _0x202004C:
000261 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000262 c001      	RJMP _0x202004E
                 _0x202004B:
000263 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000264 940e 033c 	CALL SUBOPT_0x2
000266 5051      	SUBI R21,LOW(1)
000267 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000268 2f31      	MOV  R19,R17
000269 ff01      	SBRS R16,1
00026a c017      	RJMP _0x202004F
                 _0x2020050:
00026b 3030      	CPI  R19,0
00026c f0a1      	BREQ _0x2020052
00026d ff03      	SBRS R16,3
00026e c006      	RJMP _0x2020053
00026f 81ee      	LDD  R30,Y+6
000270 81ff      	LDD  R31,Y+6+1
000271 9125      	LPM  R18,Z+
000272 83ee      	STD  Y+6,R30
000273 83ff      	STD  Y+6+1,R31
000274 c005      	RJMP _0x2020054
                 _0x2020053:
000275 81ae      	LDD  R26,Y+6
000276 81bf      	LDD  R27,Y+6+1
000277 912d      	LD   R18,X+
000278 83ae      	STD  Y+6,R26
000279 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00027a 940e 033c 	CALL SUBOPT_0x2
00027c 3050      	CPI  R21,0
00027d f009      	BREQ _0x2020055
00027e 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00027f 5031      	SUBI R19,LOW(1)
000280 cfea      	RJMP _0x2020050
                 _0x2020052:
000281 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000282 e320      	LDI  R18,LOW(48)
000283 81ee      	LDD  R30,Y+6
000284 81ff      	LDD  R31,Y+6+1
000285 940e 037e 	CALL __GETW1PF
000287 87e8      	STD  Y+8,R30
000288 87f9      	STD  Y+8+1,R31
000289 81ee      	LDD  R30,Y+6
00028a 81ff      	LDD  R31,Y+6+1
00028b 9632      	ADIW R30,2
00028c 83ee      	STD  Y+6,R30
00028d 83ff      	STD  Y+6+1,R31
                 _0x202005A:
00028e 85e8      	LDD  R30,Y+8
00028f 85f9      	LDD  R31,Y+8+1
000290 85aa      	LDD  R26,Y+10
000291 85bb      	LDD  R27,Y+10+1
000292 17ae      	CP   R26,R30
000293 07bf      	CPC  R27,R31
000294 f050      	BRLO _0x202005C
000295 5f2f      	SUBI R18,-LOW(1)
000296 85a8      	LDD  R26,Y+8
000297 85b9      	LDD  R27,Y+8+1
000298 85ea      	LDD  R30,Y+10
000299 85fb      	LDD  R31,Y+10+1
00029a 1bea      	SUB  R30,R26
00029b 0bfb      	SBC  R31,R27
00029c 87ea      	STD  Y+10,R30
00029d 87fb      	STD  Y+10+1,R31
00029e cfef      	RJMP _0x202005A
                 _0x202005C:
00029f 332a      	CPI  R18,58
0002a0 f028      	BRLO _0x202005D
0002a1 ff03      	SBRS R16,3
0002a2 c002      	RJMP _0x202005E
0002a3 5f29      	SUBI R18,-LOW(7)
0002a4 c001      	RJMP _0x202005F
                 _0x202005E:
0002a5 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002a6 fd04      	SBRC R16,4
0002a7 c01a      	RJMP _0x2020061
0002a8 3321      	CPI  R18,49
0002a9 f420      	BRSH _0x2020063
0002aa 85a8      	LDD  R26,Y+8
0002ab 85b9      	LDD  R27,Y+8+1
0002ac 9711      	SBIW R26,1
0002ad f409      	BRNE _0x2020062
                 _0x2020063:
0002ae c009      	RJMP _0x20200CD
                 _0x2020062:
0002af 1753      	CP   R21,R19
0002b0 f010      	BRLO _0x2020067
0002b1 ff00      	SBRS R16,0
0002b2 c001      	RJMP _0x2020068
                 _0x2020067:
0002b3 c013      	RJMP _0x2020066
                 _0x2020068:
0002b4 e220      	LDI  R18,LOW(32)
0002b5 ff07      	SBRS R16,7
0002b6 c00b      	RJMP _0x2020069
0002b7 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002b8 6100      	ORI  R16,LOW(16)
0002b9 ff02      	SBRS R16,2
0002ba c007      	RJMP _0x202006A
0002bb 7f0b      	ANDI R16,LOW(251)
0002bc 934a      	ST   -Y,R20
0002bd 940e 0349 	CALL SUBOPT_0x4
0002bf 3050      	CPI  R21,0
0002c0 f009      	BREQ _0x202006B
0002c1 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002c2 940e 033c 	CALL SUBOPT_0x2
0002c4 3050      	CPI  R21,0
0002c5 f009      	BREQ _0x202006C
0002c6 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002c7 5031      	SUBI R19,LOW(1)
0002c8 85a8      	LDD  R26,Y+8
0002c9 85b9      	LDD  R27,Y+8+1
0002ca 9712      	SBIW R26,2
0002cb f008      	BRLO _0x2020059
0002cc cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002cd ff00      	SBRS R16,0
0002ce c008      	RJMP _0x202006D
                 _0x202006E:
0002cf 3050      	CPI  R21,0
0002d0 f031      	BREQ _0x2020070
0002d1 5051      	SUBI R21,LOW(1)
0002d2 e2e0      	LDI  R30,LOW(32)
0002d3 93ea      	ST   -Y,R30
0002d4 940e 0349 	CALL SUBOPT_0x4
0002d6 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002d7 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002d8 cee0      	RJMP _0x2020016
                 _0x2020018:
0002d9 85ac      	LDD  R26,Y+12
0002da 85bd      	LDD  R27,Y+12+1
0002db 940e 037a 	CALL __GETW1P
0002dd 940e 038e 	CALL __LOADLOCR6
0002df 9664      	ADIW R28,20
0002e0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002e1 92ff      	PUSH R15
0002e2 2ef8      	MOV  R15,R24
0002e3 9726      	SBIW R28,6
0002e4 940e 0389 	CALL __SAVELOCR4
0002e6 940e 0361 	CALL SUBOPT_0x7
0002e8 9730      	SBIW R30,0
0002e9 f419      	BRNE _0x2020072
0002ea efef      	LDI  R30,LOW(65535)
0002eb efff      	LDI  R31,HIGH(65535)
0002ec c023      	RJMP _0x2080001
                 _0x2020072:
0002ed 01de      	MOVW R26,R28
0002ee 9616      	ADIW R26,6
0002ef 940e 0372 	CALL __ADDW2R15
0002f1 018d      	MOVW R16,R26
0002f2 940e 0361 	CALL SUBOPT_0x7
0002f4 83ee      	STD  Y+6,R30
0002f5 83ff      	STD  Y+6+1,R31
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 87e8      	STD  Y+8,R30
0002f8 87e9      	STD  Y+8+1,R30
0002f9 01de      	MOVW R26,R28
0002fa 961a      	ADIW R26,10
0002fb 940e 0372 	CALL __ADDW2R15
0002fd 940e 037a 	CALL __GETW1P
0002ff 93fa      	ST   -Y,R31
000300 93ea      	ST   -Y,R30
000301 931a      	ST   -Y,R17
000302 930a      	ST   -Y,R16
000303 e6ed      	LDI  R30,LOW(_put_buff_G101)
000304 e0f1      	LDI  R31,HIGH(_put_buff_G101)
000305 93fa      	ST   -Y,R31
000306 93ea      	ST   -Y,R30
000307 01de      	MOVW R26,R28
000308 961a      	ADIW R26,10
000309 dea3      	RCALL __print_G101
00030a 019f      	MOVW R18,R30
00030b 81ae      	LDD  R26,Y+6
00030c 81bf      	LDD  R27,Y+6+1
00030d e0e0      	LDI  R30,LOW(0)
00030e 93ec      	ST   X,R30
00030f 01f9      	MOVW R30,R18
                 _0x2080001:
000310 940e 0390 	CALL __LOADLOCR4
000312 962a      	ADIW R28,10
000313 90ff      	POP  R15
000314 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000315 93ba      	ST   -Y,R27
000316 93aa      	ST   -Y,R26
000317 91a9          ld   r26,y+
000318 91b9          ld   r27,y+
000319 27ee          clr  r30
00031a 27ff          clr  r31
                 strlen0:
00031b 916d          ld   r22,x+
00031c 2366          tst  r22
00031d f011          breq strlen1
00031e 9631          adiw r30,1
00031f cffb          rjmp strlen0
                 strlen1:
000320 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000321 93ba      	ST   -Y,R27
000322 93aa      	ST   -Y,R26
000323 27aa          clr  r26
000324 27bb          clr  r27
000325 91e9          ld   r30,y+
000326 91f9          ld   r31,y+
                 strlenf0:
000327 9005      	lpm  r0,z+
000328 2000          tst  r0
000329 f011          breq strlenf1
00032a 9611          adiw r26,1
00032b cffb          rjmp strlenf0
                 strlenf1:
00032c 01fd          movw r30,r26
00032d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _adc_data:
000160           	.BYTE 0x4
                 _line:
000164           	.BYTE 0x14
                 _input_index_S0000000000:
000178           	.BYTE 0x1
                 __base_y_G100:
000179           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00032e 940e 00f4 	CALL __lcd_write_data
000330 e0a3      	LDI  R26,LOW(3)
000331 e0b0      	LDI  R27,0
000332 940c 0368 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000334 e3a0      	LDI  R26,LOW(48)
000335 940e 00e0 	CALL __lcd_write_nibble_G100
                +
000337 ec88     +LDI R24 , LOW ( 200 )
000338 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000339 9701     +SBIW R24 , 1
00033a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00033b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00033c 932a      	ST   -Y,R18
00033d 85ad      	LDD  R26,Y+13
00033e 85be      	LDD  R27,Y+13+1
00033f 85ef      	LDD  R30,Y+15
000340 89f8      	LDD  R31,Y+15+1
000341 9509      	ICALL
000342 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000343 89e8      	LDD  R30,Y+16
000344 89f9      	LDD  R31,Y+16+1
000345 9734      	SBIW R30,4
000346 8be8      	STD  Y+16,R30
000347 8bf9      	STD  Y+16+1,R31
000348 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000349 85ad      	LDD  R26,Y+13
00034a 85be      	LDD  R27,Y+13+1
00034b 85ef      	LDD  R30,Y+15
00034c 89f8      	LDD  R31,Y+15+1
00034d 9509      	ICALL
00034e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00034f 89a8      	LDD  R26,Y+16
000350 89b9      	LDD  R27,Y+16+1
000351 9614      	ADIW R26,4
000352 940e 037a 	CALL __GETW1P
000354 83ee      	STD  Y+6,R30
000355 83ff      	STD  Y+6+1,R31
000356 81ae      	LDD  R26,Y+6
000357 81bf      	LDD  R27,Y+6+1
000358 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000359 89a8      	LDD  R26,Y+16
00035a 89b9      	LDD  R27,Y+16+1
00035b 9614      	ADIW R26,4
00035c 940e 037a 	CALL __GETW1P
00035e 87ea      	STD  Y+10,R30
00035f 87fb      	STD  Y+10+1,R31
000360 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000361 01de      	MOVW R26,R28
000362 961c      	ADIW R26,12
000363 940e 0372 	CALL __ADDW2R15
000365 940e 037a 	CALL __GETW1P
000367 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000368 9610      	adiw r26,0
000369 f039      	breq __delay_ms1
                 __delay_ms0:
00036a 95a8      	wdr
                +
00036b ed80     +LDI R24 , LOW ( 0x7D0 )
00036c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00036d 9701     +SBIW R24 , 1
00036e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00036f 9711      	sbiw r26,1
000370 f7c9      	brne __delay_ms0
                 __delay_ms1:
000371 9508      	ret
                 
                 __ADDW2R15:
000372 2400      	CLR  R0
000373 0daf      	ADD  R26,R15
000374 1db0      	ADC  R27,R0
000375 9508      	RET
                 
                 __ANEGW1:
000376 95f1      	NEG  R31
000377 95e1      	NEG  R30
000378 40f0      	SBCI R31,0
000379 9508      	RET
                 
                 __GETW1P:
00037a 91ed      	LD   R30,X+
00037b 91fc      	LD   R31,X
00037c 9711      	SBIW R26,1
00037d 9508      	RET
                 
                 __GETW1PF:
00037e 9005      	LPM  R0,Z+
00037f 91f4      	LPM  R31,Z
000380 2de0      	MOV  R30,R0
000381 9508      	RET
                 
                 __PUTPARD1:
000382 937a      	ST   -Y,R23
000383 936a      	ST   -Y,R22
000384 93fa      	ST   -Y,R31
000385 93ea      	ST   -Y,R30
000386 9508      	RET
                 
                 __SAVELOCR6:
000387 935a      	ST   -Y,R21
                 __SAVELOCR5:
000388 934a      	ST   -Y,R20
                 __SAVELOCR4:
000389 933a      	ST   -Y,R19
                 __SAVELOCR3:
00038a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00038b 931a      	ST   -Y,R17
00038c 930a      	ST   -Y,R16
00038d 9508      	RET
                 
                 __LOADLOCR6:
00038e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00038f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000390 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000391 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000392 8119      	LDD  R17,Y+1
000393 8108      	LD   R16,Y
000394 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  27 r25:   5 r26: 105 r27:  41 r28:  14 r29:   1 r30: 204 r31:  65 
x  :  25 y  : 178 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  24 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  48 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  34 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  31 ldd   :  77 ldi   :  97 
lds   :   5 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  17 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  45 pop   :   1 push  :   1 rcall :  17 ret   :  24 
reti  :   1 rjmp  :  59 rol   :   1 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :  31 sts   :   4 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00072a   1798     36   1834   16384  11.2%
[.dseg] 0x000060 0x00017d      0     29     29    1024   2.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
