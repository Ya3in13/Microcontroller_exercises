
AVRASM ver. 2.1.30  E:\mikro8.13\Debug\List\166.asm Sun Dec 22 21:14:32 2024

E:\mikro8.13\Debug\List\166.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\mikro8.13\Debug\List\166.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\mikro8.13\Debug\List\166.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\mikro8.13\Debug\List\166.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\mikro8.13\Debug\List\166.asm(1092): warning: Register r9 already defined by the .DEF directive
E:\mikro8.13\Debug\List\166.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\mikro8.13\Debug\List\166.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _t=R4
                 	.DEF _t_msb=R5
                 	.DEF _max=R6
                 	.DEF _max_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 000a      	.DB  0x0,0x0,0xA,0x0
                 
                 _0x0:
000035 616d
000036 3d78
000037 6425
000038 2020      	.DB  0x6D,0x61,0x78,0x3D,0x25,0x64,0x20,0x20
000039 7400
00003a 253d
00003b 2064
00003c 0020      	.DB  0x0,0x74,0x3D,0x25,0x64,0x20,0x20,0x0
                 _0x2000003:
00003d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003e 0004      	.DW  0x04
00003f 0004      	.DW  0x04
000040 0066      	.DW  __REG_VARS*2
                 
000041 0002      	.DW  0x02
000042 0170      	.DW  __base_y_G100
000043 007a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 0072 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;int t=0 , max=10;
                 ;char str[16];
                 ;
                 ;
                 ;void main(void)
                 ; 0000 000B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000C // Declare your local variables here
                 ; 0000 000D 
                 ; 0000 000E // Input/Output Ports initialization
                 ; 0000 000F // Port A initialization
                 ; 0000 0010 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0011 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000072 e0e0      	LDI  R30,LOW(0)
000073 bbea      	OUT  0x1A,R30
                 ; 0000 0012 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0013 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (1<<PORTA3) | (1<<PORTA2) | (1<<PORTA1) | (1<<PORTA0);
000074 e0ef      	LDI  R30,LOW(15)
000075 bbeb      	OUT  0x1B,R30
                 ; 0000 0014 
                 ; 0000 0015 // Port B initialization
                 ; 0000 0016 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0017 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000076 e0e0      	LDI  R30,LOW(0)
000077 bbe7      	OUT  0x17,R30
                 ; 0000 0018 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0019 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000078 bbe8      	OUT  0x18,R30
                 ; 0000 001A 
                 ; 0000 001B // Port C initialization
                 ; 0000 001C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000079 bbe4      	OUT  0x14,R30
                 ; 0000 001E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00007a bbe5      	OUT  0x15,R30
                 ; 0000 0020 
                 ; 0000 0021 // Port D initialization
                 ; 0000 0022 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0023 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
00007b e0e1      	LDI  R30,LOW(1)
00007c bbe1      	OUT  0x11,R30
                 ; 0000 0024 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 0025 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00007d e0e0      	LDI  R30,LOW(0)
00007e bbe2      	OUT  0x12,R30
                 ; 0000 0026 
                 ; 0000 0027 // Timer/Counter 0 initialization
                 ; 0000 0028 // Clock source: System Clock
                 ; 0000 0029 // Clock value: Timer 0 Stopped
                 ; 0000 002A // Mode: Normal top=0xFF
                 ; 0000 002B // OC0 output: Disconnected
                 ; 0000 002C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00007f bfe3      	OUT  0x33,R30
                 ; 0000 002D TCNT0=0x00;
000080 bfe2      	OUT  0x32,R30
                 ; 0000 002E OCR0=0x00;
000081 bfec      	OUT  0x3C,R30
                 ; 0000 002F 
                 ; 0000 0030 // Timer/Counter 1 initialization
                 ; 0000 0031 // Clock source: System Clock
                 ; 0000 0032 // Clock value: Timer1 Stopped
                 ; 0000 0033 // Mode: Normal top=0xFFFF
                 ; 0000 0034 // OC1A output: Disconnected
                 ; 0000 0035 // OC1B output: Disconnected
                 ; 0000 0036 // Noise Canceler: Off
                 ; 0000 0037 // Input Capture on Falling Edge
                 ; 0000 0038 // Timer1 Overflow Interrupt: Off
                 ; 0000 0039 // Input Capture Interrupt: Off
                 ; 0000 003A // Compare A Match Interrupt: Off
                 ; 0000 003B // Compare B Match Interrupt: Off
                 ; 0000 003C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000082 bdef      	OUT  0x2F,R30
                 ; 0000 003D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000083 bdee      	OUT  0x2E,R30
                 ; 0000 003E TCNT1H=0x00;
000084 bded      	OUT  0x2D,R30
                 ; 0000 003F TCNT1L=0x00;
000085 bdec      	OUT  0x2C,R30
                 ; 0000 0040 ICR1H=0x00;
000086 bde7      	OUT  0x27,R30
                 ; 0000 0041 ICR1L=0x00;
000087 bde6      	OUT  0x26,R30
                 ; 0000 0042 OCR1AH=0x00;
000088 bdeb      	OUT  0x2B,R30
                 ; 0000 0043 OCR1AL=0x00;
000089 bdea      	OUT  0x2A,R30
                 ; 0000 0044 OCR1BH=0x00;
00008a bde9      	OUT  0x29,R30
                 ; 0000 0045 OCR1BL=0x00;
00008b bde8      	OUT  0x28,R30
                 ; 0000 0046 
                 ; 0000 0047 // Timer/Counter 2 initialization
                 ; 0000 0048 // Clock source: System Clock
                 ; 0000 0049 // Clock value: Timer2 Stopped
                 ; 0000 004A // Mode: Normal top=0xFF
                 ; 0000 004B // OC2 output: Disconnected
                 ; 0000 004C ASSR=0<<AS2;
00008c bde2      	OUT  0x22,R30
                 ; 0000 004D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00008d bde5      	OUT  0x25,R30
                 ; 0000 004E TCNT2=0x00;
00008e bde4      	OUT  0x24,R30
                 ; 0000 004F OCR2=0x00;
00008f bde3      	OUT  0x23,R30
                 ; 0000 0050 
                 ; 0000 0051 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0052 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000090 bfe9      	OUT  0x39,R30
                 ; 0000 0053 
                 ; 0000 0054 // External Interrupt(s) initialization
                 ; 0000 0055 // INT0: Off
                 ; 0000 0056 // INT1: Off
                 ; 0000 0057 // INT2: Off
                 ; 0000 0058 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000091 bfe5      	OUT  0x35,R30
                 ; 0000 0059 MCUCSR=(0<<ISC2);
000092 bfe4      	OUT  0x34,R30
                 ; 0000 005A 
                 ; 0000 005B // USART initialization
                 ; 0000 005C // USART disabled
                 ; 0000 005D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000093 b9ea      	OUT  0xA,R30
                 ; 0000 005E 
                 ; 0000 005F // Analog Comparator initialization
                 ; 0000 0060 // Analog Comparator: Off
                 ; 0000 0061 // The Analog Comparator's positive input is
                 ; 0000 0062 // connected to the AIN0 pin
                 ; 0000 0063 // The Analog Comparator's negative input is
                 ; 0000 0064 // connected to the AIN1 pin
                 ; 0000 0065 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000094 e8e0      	LDI  R30,LOW(128)
000095 b9e8      	OUT  0x8,R30
                 ; 0000 0066 SFIOR=(0<<ACME);
000096 e0e0      	LDI  R30,LOW(0)
000097 bfe0      	OUT  0x30,R30
                 ; 0000 0067 
                 ; 0000 0068 // ADC initialization
                 ; 0000 0069 // ADC disabled
                 ; 0000 006A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000098 b9e6      	OUT  0x6,R30
                 ; 0000 006B 
                 ; 0000 006C // SPI initialization
                 ; 0000 006D // SPI disabled
                 ; 0000 006E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000099 b9ed      	OUT  0xD,R30
                 ; 0000 006F 
                 ; 0000 0070 // TWI initialization
                 ; 0000 0071 // TWI disabled
                 ; 0000 0072 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00009a bfe6      	OUT  0x36,R30
                 ; 0000 0073 
                 ; 0000 0074 lcd_init(16);
00009b e1a0      	LDI  R26,LOW(16)
00009c d09d      	RCALL _lcd_init
                 ; 0000 0075 
                 ; 0000 0076 while (1){
                 _0x3:
                 ; 0000 0077 
                 ; 0000 0078       if(PINA.1==0){max++;delay_ms(500); }
00009d 99c9      	SBIC 0x19,1
00009e c005      	RJMP _0x6
00009f 01f3      	MOVW R30,R6
0000a0 9631      	ADIW R30,1
0000a1 013f      	MOVW R6,R30
0000a2 940e 0328 	CALL SUBOPT_0x0
                 ; 0000 0079       if(PINA.2==0){max--;delay_ms(500); }
                 _0x6:
0000a4 99ca      	SBIC 0x19,2
0000a5 c005      	RJMP _0x7
0000a6 01f3      	MOVW R30,R6
0000a7 9731      	SBIW R30,1
0000a8 013f      	MOVW R6,R30
0000a9 940e 0328 	CALL SUBOPT_0x0
                 ; 0000 007A 
                 ; 0000 007B       sprintf(str,"max=%d  ",max);
                 _0x7:
0000ab e6e0      	LDI  R30,LOW(_str)
0000ac e0f1      	LDI  R31,HIGH(_str)
0000ad 93fa      	ST   -Y,R31
0000ae 93ea      	ST   -Y,R30
                +
0000af e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b1 93fa      	ST   -Y,R31
0000b2 93ea      	ST   -Y,R30
0000b3 01f3      	MOVW R30,R6
0000b4 940e 032c 	CALL SUBOPT_0x1
                 ; 0000 007C       lcd_gotoxy(0,1);
0000b6 e0a1      	LDI  R26,LOW(1)
0000b7 940e 0337 	CALL SUBOPT_0x2
                 ; 0000 007D       lcd_puts(str);
                 ; 0000 007E 
                 ; 0000 007F       if(PINA.0==0){t++;delay_ms(500);
0000b9 99c8      	SBIC 0x19,0
0000ba c005      	RJMP _0x8
0000bb 01f2      	MOVW R30,R4
0000bc 9631      	ADIW R30,1
0000bd 012f      	MOVW R4,R30
0000be 940e 0328 	CALL SUBOPT_0x0
                 ; 0000 0080       }
                 ; 0000 0081       sprintf(str,"t=%d  ",t);
                 _0x8:
0000c0 e6e0      	LDI  R30,LOW(_str)
0000c1 e0f1      	LDI  R31,HIGH(_str)
0000c2 93fa      	ST   -Y,R31
0000c3 93ea      	ST   -Y,R30
                +
0000c4 e7e3     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0000c5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
0000c6 93fa      	ST   -Y,R31
0000c7 93ea      	ST   -Y,R30
0000c8 01f2      	MOVW R30,R4
0000c9 940e 032c 	CALL SUBOPT_0x1
                 ; 0000 0082       lcd_gotoxy(0,0);
0000cb e0a0      	LDI  R26,LOW(0)
0000cc 940e 0337 	CALL SUBOPT_0x2
                 ; 0000 0083       lcd_puts(str);
                 ; 0000 0084 
                 ; 0000 0085       if( t >= max ){
                +
0000ce 1446     +CP R4 , R6
0000cf 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000d0 f044      	BRLT _0x9
                 ; 0000 0086 
                 ; 0000 0087        PORTD.0=1;
0000d1 9a90      	SBI  0x12,0
                 ; 0000 0088        delay_ms(2000);
0000d2 eda0      	LDI  R26,LOW(2000)
0000d3 e0b7      	LDI  R27,HIGH(2000)
0000d4 940e 0376 	CALL _delay_ms
                 ; 0000 0089        PORTD.0=0;
0000d6 9890      	CBI  0x12,0
                 ; 0000 008A        t=0;
0000d7 2444      	CLR  R4
0000d8 2455      	CLR  R5
                 ; 0000 008B 
                 ; 0000 008C       }
                 ; 0000 008D 
                 ; 0000 008E 
                 ; 0000 008F 
                 ; 0000 0090 
                 ; 0000 0091 
                 ; 0000 0092 
                 ; 0000 0093 
                 ; 0000 0094 
                 ; 0000 0095 
                 ; 0000 0096 
                 ; 0000 0097 }
                 _0x9:
0000d9 cfc3      	RJMP _0x3
                 ; 0000 0098     }
                 _0xE:
0000da cfff      	RJMP _0xE
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000db 93aa      	ST   -Y,R26
0000dc b3e5      	IN   R30,0x15
0000dd 70ef      	ANDI R30,LOW(0xF)
0000de 2fae      	MOV  R26,R30
0000df 81e8      	LD   R30,Y
0000e0 7fe0      	ANDI R30,LOW(0xF0)
0000e1 2bea      	OR   R30,R26
0000e2 bbe5      	OUT  0x15,R30
                +
0000e3 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000e4 958a     +DEC R24
0000e5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000e6 9aaa      	SBI  0x15,2
                +
0000e7 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000e8 958a     +DEC R24
0000e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000ea 98aa      	CBI  0x15,2
                +
0000eb e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000ec 958a     +DEC R24
0000ed f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000ee c076      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000ef 93aa      	ST   -Y,R26
0000f0 81a8      	LD   R26,Y
0000f1 dfe9      	RCALL __lcd_write_nibble_G100
0000f2 81e8          ld    r30,y
0000f3 95e2          swap  r30
0000f4 83e8          st    y,r30
0000f5 81a8      	LD   R26,Y
0000f6 dfe4      	RCALL __lcd_write_nibble_G100
                +
0000f7 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0000fa c06a      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000fb 93aa      	ST   -Y,R26
0000fc 81e8      	LD   R30,Y
0000fd e0f0      	LDI  R31,0
0000fe 59e0      	SUBI R30,LOW(-__base_y_G100)
0000ff 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000100 81e0      	LD   R30,Z
000101 81a9      	LDD  R26,Y+1
000102 0fae      	ADD  R26,R30
000103 dfeb      	RCALL __lcd_write_data
000104 8099      	LDD  R9,Y+1
000105 8088      	LDD  R8,Y+0
000106 9622      	ADIW R28,2
000107 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000108 e0a2      	LDI  R26,LOW(2)
000109 940e 033d 	CALL SUBOPT_0x3
00010b e0ac      	LDI  R26,LOW(12)
00010c dfe2      	RCALL __lcd_write_data
00010d e0a1      	LDI  R26,LOW(1)
00010e 940e 033d 	CALL SUBOPT_0x3
000110 e0e0      	LDI  R30,LOW(0)
000111 2e8e      	MOV  R8,R30
000112 2e9e      	MOV  R9,R30
000113 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000114 93aa      	ST   -Y,R26
000115 81a8      	LD   R26,Y
000116 30aa      	CPI  R26,LOW(0xA)
000117 f011      	BREQ _0x2000005
000118 149b      	CP   R9,R11
000119 f048      	BRLO _0x2000004
                 _0x2000005:
00011a e0e0      	LDI  R30,LOW(0)
00011b 93ea      	ST   -Y,R30
00011c 9483      	INC  R8
00011d 2da8      	MOV  R26,R8
00011e dfdc      	RCALL _lcd_gotoxy
00011f 81a8      	LD   R26,Y
000120 30aa      	CPI  R26,LOW(0xA)
000121 f409      	BRNE _0x2000007
000122 c042      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000123 9493      	INC  R9
000124 9aa8      	SBI  0x15,0
000125 81a8      	LD   R26,Y
000126 dfc8      	RCALL __lcd_write_data
000127 98a8      	CBI  0x15,0
000128 c03c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000129 93ba      	ST   -Y,R27
00012a 93aa      	ST   -Y,R26
00012b 931a      	ST   -Y,R17
                 _0x2000008:
00012c 81a9      	LDD  R26,Y+1
00012d 81ba      	LDD  R27,Y+1+1
00012e 91ed      	LD   R30,X+
00012f 83a9      	STD  Y+1,R26
000130 83ba      	STD  Y+1+1,R27
000131 2f1e      	MOV  R17,R30
000132 30e0      	CPI  R30,0
000133 f019      	BREQ _0x200000A
000134 2fa1      	MOV  R26,R17
000135 dfde      	RCALL _lcd_putchar
000136 cff5      	RJMP _0x2000008
                 _0x200000A:
000137 8118      	LDD  R17,Y+0
000138 9623      	ADIW R28,3
000139 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00013a 93aa      	ST   -Y,R26
00013b b3e4      	IN   R30,0x14
00013c 6fe0      	ORI  R30,LOW(0xF0)
00013d bbe4      	OUT  0x14,R30
00013e 9aa2      	SBI  0x14,2
00013f 9aa0      	SBI  0x14,0
000140 9aa1      	SBI  0x14,1
000141 98aa      	CBI  0x15,2
000142 98a8      	CBI  0x15,0
000143 98a9      	CBI  0x15,1
000144 80b8      	LDD  R11,Y+0
000145 81e8      	LD   R30,Y
000146 58e0      	SUBI R30,-LOW(128)
                +
000147 93e0 0172+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000149 81e8      	LD   R30,Y
00014a 54e0      	SUBI R30,-LOW(192)
                +
00014b 93e0 0173+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00014d e1a4      	LDI  R26,LOW(20)
00014e e0b0      	LDI  R27,0
00014f 940e 0376 	CALL _delay_ms
000151 940e 0343 	CALL SUBOPT_0x4
000153 940e 0343 	CALL SUBOPT_0x4
000155 940e 0343 	CALL SUBOPT_0x4
000157 e2a0      	LDI  R26,LOW(32)
000158 df82      	RCALL __lcd_write_nibble_G100
                +
000159 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00015a 958a     +DEC R24
00015b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00015c e2a8      	LDI  R26,LOW(40)
00015d df91      	RCALL __lcd_write_data
00015e e0a4      	LDI  R26,LOW(4)
00015f df8f      	RCALL __lcd_write_data
000160 e8a5      	LDI  R26,LOW(133)
000161 df8d      	RCALL __lcd_write_data
000162 e0a6      	LDI  R26,LOW(6)
000163 df8b      	RCALL __lcd_write_data
000164 dfa3      	RCALL _lcd_clear
                 _0x2080002:
000165 9621      	ADIW R28,1
000166 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000167 93ba      	ST   -Y,R27
000168 93aa      	ST   -Y,R26
000169 931a      	ST   -Y,R17
00016a 930a      	ST   -Y,R16
00016b 81aa      	LDD  R26,Y+2
00016c 81bb      	LDD  R27,Y+2+1
00016d 9612      	ADIW R26,2
00016e 940e 038d 	CALL __GETW1P
000170 9730      	SBIW R30,0
000171 f159      	BREQ _0x2020010
000172 81aa      	LDD  R26,Y+2
000173 81bb      	LDD  R27,Y+2+1
000174 9614      	ADIW R26,4
000175 940e 038d 	CALL __GETW1P
000177 018f      	MOVW R16,R30
000178 9730      	SBIW R30,0
000179 f061      	BREQ _0x2020012
                +
00017a 3002     +CPI R16 , LOW ( 2 )
00017b e0e0     +LDI R30 , HIGH ( 2 )
00017c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00017d f098      	BRLO _0x2020013
00017e 01f8      	MOVW R30,R16
00017f 9731      	SBIW R30,1
000180 018f      	MOVW R16,R30
                +
000181 81aa     +LDD R26 , Y + 2
000182 81bb     +LDD R27 , Y + 2 + 1
000183 9614     +ADIW R26 , 4
000184 93ed     +ST X + , R30
000185 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000186 81aa      	LDD  R26,Y+2
000187 81bb      	LDD  R27,Y+2+1
000188 9612      	ADIW R26,2
000189 91ed      	LD   R30,X+
00018a 91fd      	LD   R31,X+
00018b 9631      	ADIW R30,1
00018c 93fe      	ST   -X,R31
00018d 93ee      	ST   -X,R30
00018e 9731      	SBIW R30,1
00018f 81ac      	LDD  R26,Y+4
000190 83a0      	STD  Z+0,R26
                 _0x2020013:
000191 81aa      	LDD  R26,Y+2
000192 81bb      	LDD  R27,Y+2+1
000193 940e 038d 	CALL __GETW1P
000195 23ff      	TST  R31
000196 f02a      	BRMI _0x2020014
000197 91ed      	LD   R30,X+
000198 91fd      	LD   R31,X+
000199 9631      	ADIW R30,1
00019a 93fe      	ST   -X,R31
00019b 93ee      	ST   -X,R30
                 _0x2020014:
00019c c006      	RJMP _0x2020015
                 _0x2020010:
00019d 81aa      	LDD  R26,Y+2
00019e 81bb      	LDD  R27,Y+2+1
00019f efef      	LDI  R30,LOW(65535)
0001a0 efff      	LDI  R31,HIGH(65535)
0001a1 93ed      	ST   X+,R30
0001a2 93fc      	ST   X,R31
                 _0x2020015:
0001a3 8119      	LDD  R17,Y+1
0001a4 8108      	LDD  R16,Y+0
0001a5 9625      	ADIW R28,5
0001a6 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001a7 93ba      	ST   -Y,R27
0001a8 93aa      	ST   -Y,R26
0001a9 9726      	SBIW R28,6
0001aa 940e 039a 	CALL __SAVELOCR6
0001ac e010      	LDI  R17,0
0001ad 85ac      	LDD  R26,Y+12
0001ae 85bd      	LDD  R27,Y+12+1
0001af e0e0      	LDI  R30,LOW(0)
0001b0 e0f0      	LDI  R31,HIGH(0)
0001b1 93ed      	ST   X+,R30
0001b2 93fc      	ST   X,R31
                 _0x2020016:
0001b3 89ea      	LDD  R30,Y+18
0001b4 89fb      	LDD  R31,Y+18+1
0001b5 9631      	ADIW R30,1
0001b6 8bea      	STD  Y+18,R30
0001b7 8bfb      	STD  Y+18+1,R31
0001b8 9731      	SBIW R30,1
0001b9 91e4      	LPM  R30,Z
0001ba 2f2e      	MOV  R18,R30
0001bb 30e0      	CPI  R30,0
0001bc f409      	BRNE PC+2
0001bd c115      	RJMP _0x2020018
0001be 2fe1      	MOV  R30,R17
0001bf 30e0      	CPI  R30,0
0001c0 f439      	BRNE _0x202001C
0001c1 3225      	CPI  R18,37
0001c2 f411      	BRNE _0x202001D
0001c3 e011      	LDI  R17,LOW(1)
0001c4 c002      	RJMP _0x202001E
                 _0x202001D:
0001c5 940e 034a 	CALL SUBOPT_0x5
                 _0x202001E:
0001c7 c10a      	RJMP _0x202001B
                 _0x202001C:
0001c8 30e1      	CPI  R30,LOW(0x1)
0001c9 f4a9      	BRNE _0x202001F
0001ca 3225      	CPI  R18,37
0001cb f419      	BRNE _0x2020020
0001cc 940e 034a 	CALL SUBOPT_0x5
0001ce c102      	RJMP _0x20200CC
                 _0x2020020:
0001cf e012      	LDI  R17,LOW(2)
0001d0 e040      	LDI  R20,LOW(0)
0001d1 e000      	LDI  R16,LOW(0)
0001d2 322d      	CPI  R18,45
0001d3 f411      	BRNE _0x2020021
0001d4 e001      	LDI  R16,LOW(1)
0001d5 c0fc      	RJMP _0x202001B
                 _0x2020021:
0001d6 322b      	CPI  R18,43
0001d7 f411      	BRNE _0x2020022
0001d8 e24b      	LDI  R20,LOW(43)
0001d9 c0f8      	RJMP _0x202001B
                 _0x2020022:
0001da 3220      	CPI  R18,32
0001db f411      	BRNE _0x2020023
0001dc e240      	LDI  R20,LOW(32)
0001dd c0f4      	RJMP _0x202001B
                 _0x2020023:
0001de c002      	RJMP _0x2020024
                 _0x202001F:
0001df 30e2      	CPI  R30,LOW(0x2)
0001e0 f439      	BRNE _0x2020025
                 _0x2020024:
0001e1 e050      	LDI  R21,LOW(0)
0001e2 e013      	LDI  R17,LOW(3)
0001e3 3320      	CPI  R18,48
0001e4 f411      	BRNE _0x2020026
0001e5 6800      	ORI  R16,LOW(128)
0001e6 c0eb      	RJMP _0x202001B
                 _0x2020026:
0001e7 c003      	RJMP _0x2020027
                 _0x2020025:
0001e8 30e3      	CPI  R30,LOW(0x3)
0001e9 f009      	BREQ PC+2
0001ea c0e7      	RJMP _0x202001B
                 _0x2020027:
0001eb 3320      	CPI  R18,48
0001ec f010      	BRLO _0x202002A
0001ed 332a      	CPI  R18,58
0001ee f008      	BRLO _0x202002B
                 _0x202002A:
0001ef c007      	RJMP _0x2020029
                 _0x202002B:
0001f0 e0aa      	LDI  R26,LOW(10)
0001f1 9f5a      	MUL  R21,R26
0001f2 2d50      	MOV  R21,R0
0001f3 2fe2      	MOV  R30,R18
0001f4 53e0      	SUBI R30,LOW(48)
0001f5 0f5e      	ADD  R21,R30
0001f6 c0db      	RJMP _0x202001B
                 _0x2020029:
0001f7 2fe2      	MOV  R30,R18
0001f8 36e3      	CPI  R30,LOW(0x63)
0001f9 f449      	BRNE _0x202002F
0001fa 940e 0351 	CALL SUBOPT_0x6
0001fc 89e8      	LDD  R30,Y+16
0001fd 89f9      	LDD  R31,Y+16+1
0001fe 81a4      	LDD  R26,Z+4
0001ff 93aa      	ST   -Y,R26
000200 940e 0357 	CALL SUBOPT_0x7
000202 c0ce      	RJMP _0x2020030
                 _0x202002F:
000203 37e3      	CPI  R30,LOW(0x73)
000204 f441      	BRNE _0x2020032
000205 940e 0351 	CALL SUBOPT_0x6
000207 940e 035d 	CALL SUBOPT_0x8
000209 940e 030f 	CALL _strlen
00020b 2f1e      	MOV  R17,R30
00020c c00a      	RJMP _0x2020033
                 _0x2020032:
00020d 37e0      	CPI  R30,LOW(0x70)
00020e f461      	BRNE _0x2020035
00020f 940e 0351 	CALL SUBOPT_0x6
000211 940e 035d 	CALL SUBOPT_0x8
000213 940e 031b 	CALL _strlenf
000215 2f1e      	MOV  R17,R30
000216 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000217 6002      	ORI  R16,LOW(2)
000218 770f      	ANDI R16,LOW(127)
000219 e030      	LDI  R19,LOW(0)
00021a c034      	RJMP _0x2020036
                 _0x2020035:
00021b 36e4      	CPI  R30,LOW(0x64)
00021c f011      	BREQ _0x2020039
00021d 36e9      	CPI  R30,LOW(0x69)
00021e f411      	BRNE _0x202003A
                 _0x2020039:
00021f 6004      	ORI  R16,LOW(4)
000220 c002      	RJMP _0x202003B
                 _0x202003A:
000221 37e5      	CPI  R30,LOW(0x75)
000222 f431      	BRNE _0x202003C
                 _0x202003B:
000223 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000224 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000225 83ee      	STD  Y+6,R30
000226 83ff      	STD  Y+6+1,R31
000227 e015      	LDI  R17,LOW(5)
000228 c00c      	RJMP _0x202003D
                 _0x202003C:
000229 35e8      	CPI  R30,LOW(0x58)
00022a f411      	BRNE _0x202003F
00022b 6008      	ORI  R16,LOW(8)
00022c c003      	RJMP _0x2020040
                 _0x202003F:
00022d 37e8      	CPI  R30,LOW(0x78)
00022e f009      	BREQ PC+2
00022f c0a1      	RJMP _0x2020071
                 _0x2020040:
000230 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000231 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000232 83ee      	STD  Y+6,R30
000233 83ff      	STD  Y+6+1,R31
000234 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000235 ff02      	SBRS R16,2
000236 c014      	RJMP _0x2020042
000237 940e 0351 	CALL SUBOPT_0x6
000239 940e 0367 	CALL SUBOPT_0x9
00023b 85ab      	LDD  R26,Y+11
00023c 23aa      	TST  R26
00023d f43a      	BRPL _0x2020043
00023e 85ea      	LDD  R30,Y+10
00023f 85fb      	LDD  R31,Y+10+1
000240 940e 0384 	CALL __ANEGW1
000242 87ea      	STD  Y+10,R30
000243 87fb      	STD  Y+10+1,R31
000244 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000245 3040      	CPI  R20,0
000246 f011      	BREQ _0x2020044
000247 5f1f      	SUBI R17,-LOW(1)
000248 c001      	RJMP _0x2020045
                 _0x2020044:
000249 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00024a c004      	RJMP _0x2020046
                 _0x2020042:
00024b 940e 0351 	CALL SUBOPT_0x6
00024d 940e 0367 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
00024f fd00      	SBRC R16,0
000250 c011      	RJMP _0x2020047
                 _0x2020048:
000251 1715      	CP   R17,R21
000252 f478      	BRSH _0x202004A
000253 ff07      	SBRS R16,7
000254 c008      	RJMP _0x202004B
000255 ff02      	SBRS R16,2
000256 c004      	RJMP _0x202004C
000257 7f0b      	ANDI R16,LOW(251)
000258 2f24      	MOV  R18,R20
000259 5011      	SUBI R17,LOW(1)
00025a c001      	RJMP _0x202004D
                 _0x202004C:
00025b e320      	LDI  R18,LOW(48)
                 _0x202004D:
00025c c001      	RJMP _0x202004E
                 _0x202004B:
00025d e220      	LDI  R18,LOW(32)
                 _0x202004E:
00025e 940e 034a 	CALL SUBOPT_0x5
000260 5051      	SUBI R21,LOW(1)
000261 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000262 2f31      	MOV  R19,R17
000263 ff01      	SBRS R16,1
000264 c017      	RJMP _0x202004F
                 _0x2020050:
000265 3030      	CPI  R19,0
000266 f0a1      	BREQ _0x2020052
000267 ff03      	SBRS R16,3
000268 c006      	RJMP _0x2020053
000269 81ee      	LDD  R30,Y+6
00026a 81ff      	LDD  R31,Y+6+1
00026b 9125      	LPM  R18,Z+
00026c 83ee      	STD  Y+6,R30
00026d 83ff      	STD  Y+6+1,R31
00026e c005      	RJMP _0x2020054
                 _0x2020053:
00026f 81ae      	LDD  R26,Y+6
000270 81bf      	LDD  R27,Y+6+1
000271 912d      	LD   R18,X+
000272 83ae      	STD  Y+6,R26
000273 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000274 940e 034a 	CALL SUBOPT_0x5
000276 3050      	CPI  R21,0
000277 f009      	BREQ _0x2020055
000278 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000279 5031      	SUBI R19,LOW(1)
00027a cfea      	RJMP _0x2020050
                 _0x2020052:
00027b c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00027c e320      	LDI  R18,LOW(48)
00027d 81ee      	LDD  R30,Y+6
00027e 81ff      	LDD  R31,Y+6+1
00027f 940e 0391 	CALL __GETW1PF
000281 87e8      	STD  Y+8,R30
000282 87f9      	STD  Y+8+1,R31
000283 81ee      	LDD  R30,Y+6
000284 81ff      	LDD  R31,Y+6+1
000285 9632      	ADIW R30,2
000286 83ee      	STD  Y+6,R30
000287 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000288 85e8      	LDD  R30,Y+8
000289 85f9      	LDD  R31,Y+8+1
00028a 85aa      	LDD  R26,Y+10
00028b 85bb      	LDD  R27,Y+10+1
00028c 17ae      	CP   R26,R30
00028d 07bf      	CPC  R27,R31
00028e f050      	BRLO _0x202005C
00028f 5f2f      	SUBI R18,-LOW(1)
000290 85a8      	LDD  R26,Y+8
000291 85b9      	LDD  R27,Y+8+1
000292 85ea      	LDD  R30,Y+10
000293 85fb      	LDD  R31,Y+10+1
000294 1bea      	SUB  R30,R26
000295 0bfb      	SBC  R31,R27
000296 87ea      	STD  Y+10,R30
000297 87fb      	STD  Y+10+1,R31
000298 cfef      	RJMP _0x202005A
                 _0x202005C:
000299 332a      	CPI  R18,58
00029a f028      	BRLO _0x202005D
00029b ff03      	SBRS R16,3
00029c c002      	RJMP _0x202005E
00029d 5f29      	SUBI R18,-LOW(7)
00029e c001      	RJMP _0x202005F
                 _0x202005E:
00029f 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002a0 fd04      	SBRC R16,4
0002a1 c01a      	RJMP _0x2020061
0002a2 3321      	CPI  R18,49
0002a3 f420      	BRSH _0x2020063
0002a4 85a8      	LDD  R26,Y+8
0002a5 85b9      	LDD  R27,Y+8+1
0002a6 9711      	SBIW R26,1
0002a7 f409      	BRNE _0x2020062
                 _0x2020063:
0002a8 c009      	RJMP _0x20200CD
                 _0x2020062:
0002a9 1753      	CP   R21,R19
0002aa f010      	BRLO _0x2020067
0002ab ff00      	SBRS R16,0
0002ac c001      	RJMP _0x2020068
                 _0x2020067:
0002ad c013      	RJMP _0x2020066
                 _0x2020068:
0002ae e220      	LDI  R18,LOW(32)
0002af ff07      	SBRS R16,7
0002b0 c00b      	RJMP _0x2020069
0002b1 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002b2 6100      	ORI  R16,LOW(16)
0002b3 ff02      	SBRS R16,2
0002b4 c007      	RJMP _0x202006A
0002b5 7f0b      	ANDI R16,LOW(251)
0002b6 934a      	ST   -Y,R20
0002b7 940e 0357 	CALL SUBOPT_0x7
0002b9 3050      	CPI  R21,0
0002ba f009      	BREQ _0x202006B
0002bb 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002bc 940e 034a 	CALL SUBOPT_0x5
0002be 3050      	CPI  R21,0
0002bf f009      	BREQ _0x202006C
0002c0 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002c1 5031      	SUBI R19,LOW(1)
0002c2 85a8      	LDD  R26,Y+8
0002c3 85b9      	LDD  R27,Y+8+1
0002c4 9712      	SBIW R26,2
0002c5 f008      	BRLO _0x2020059
0002c6 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002c7 ff00      	SBRS R16,0
0002c8 c008      	RJMP _0x202006D
                 _0x202006E:
0002c9 3050      	CPI  R21,0
0002ca f031      	BREQ _0x2020070
0002cb 5051      	SUBI R21,LOW(1)
0002cc e2e0      	LDI  R30,LOW(32)
0002cd 93ea      	ST   -Y,R30
0002ce 940e 0357 	CALL SUBOPT_0x7
0002d0 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002d1 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002d2 cee0      	RJMP _0x2020016
                 _0x2020018:
0002d3 85ac      	LDD  R26,Y+12
0002d4 85bd      	LDD  R27,Y+12+1
0002d5 940e 038d 	CALL __GETW1P
0002d7 940e 03a1 	CALL __LOADLOCR6
0002d9 9664      	ADIW R28,20
0002da 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002db 92ff      	PUSH R15
0002dc 2ef8      	MOV  R15,R24
0002dd 9726      	SBIW R28,6
0002de 940e 039c 	CALL __SAVELOCR4
0002e0 940e 036f 	CALL SUBOPT_0xA
0002e2 9730      	SBIW R30,0
0002e3 f419      	BRNE _0x2020072
0002e4 efef      	LDI  R30,LOW(65535)
0002e5 efff      	LDI  R31,HIGH(65535)
0002e6 c023      	RJMP _0x2080001
                 _0x2020072:
0002e7 01de      	MOVW R26,R28
0002e8 9616      	ADIW R26,6
0002e9 940e 0380 	CALL __ADDW2R15
0002eb 018d      	MOVW R16,R26
0002ec 940e 036f 	CALL SUBOPT_0xA
0002ee 83ee      	STD  Y+6,R30
0002ef 83ff      	STD  Y+6+1,R31
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 87e8      	STD  Y+8,R30
0002f2 87e9      	STD  Y+8+1,R30
0002f3 01de      	MOVW R26,R28
0002f4 961a      	ADIW R26,10
0002f5 940e 0380 	CALL __ADDW2R15
0002f7 940e 038d 	CALL __GETW1P
0002f9 93fa      	ST   -Y,R31
0002fa 93ea      	ST   -Y,R30
0002fb 931a      	ST   -Y,R17
0002fc 930a      	ST   -Y,R16
0002fd e6e7      	LDI  R30,LOW(_put_buff_G101)
0002fe e0f1      	LDI  R31,HIGH(_put_buff_G101)
0002ff 93fa      	ST   -Y,R31
000300 93ea      	ST   -Y,R30
000301 01de      	MOVW R26,R28
000302 961a      	ADIW R26,10
000303 dea3      	RCALL __print_G101
000304 019f      	MOVW R18,R30
000305 81ae      	LDD  R26,Y+6
000306 81bf      	LDD  R27,Y+6+1
000307 e0e0      	LDI  R30,LOW(0)
000308 93ec      	ST   X,R30
000309 01f9      	MOVW R30,R18
                 _0x2080001:
00030a 940e 03a3 	CALL __LOADLOCR4
00030c 962a      	ADIW R28,10
00030d 90ff      	POP  R15
00030e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00030f 93ba      	ST   -Y,R27
000310 93aa      	ST   -Y,R26
000311 91a9          ld   r26,y+
000312 91b9          ld   r27,y+
000313 27ee          clr  r30
000314 27ff          clr  r31
                 strlen0:
000315 916d          ld   r22,x+
000316 2366          tst  r22
000317 f011          breq strlen1
000318 9631          adiw r30,1
000319 cffb          rjmp strlen0
                 strlen1:
00031a 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00031b 93ba      	ST   -Y,R27
00031c 93aa      	ST   -Y,R26
00031d 27aa          clr  r26
00031e 27bb          clr  r27
00031f 91e9          ld   r30,y+
000320 91f9          ld   r31,y+
                 strlenf0:
000321 9005      	lpm  r0,z+
000322 2000          tst  r0
000323 f011          breq strlenf1
000324 9611          adiw r26,1
000325 cffb          rjmp strlenf0
                 strlenf1:
000326 01fd          movw r30,r26
000327 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000160           	.BYTE 0x10
                 __base_y_G100:
000170           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000328 efa4      	LDI  R26,LOW(500)
000329 e0b1      	LDI  R27,HIGH(500)
00032a 940c 0376 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00032c 940e 0388 	CALL __CWD1
00032e 940e 0395 	CALL __PUTPARD1
000330 e084      	LDI  R24,4
000331 940e 02db 	CALL _sprintf
000333 9628      	ADIW R28,8
000334 e0e0      	LDI  R30,LOW(0)
000335 93ea      	ST   -Y,R30
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000337 940e 00fb 	CALL _lcd_gotoxy
000339 e6a0      	LDI  R26,LOW(_str)
00033a e0b1      	LDI  R27,HIGH(_str)
00033b 940c 0129 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00033d 940e 00ef 	CALL __lcd_write_data
00033f e0a3      	LDI  R26,LOW(3)
000340 e0b0      	LDI  R27,0
000341 940c 0376 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000343 e3a0      	LDI  R26,LOW(48)
000344 940e 00db 	CALL __lcd_write_nibble_G100
                +
000346 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000347 958a     +DEC R24
000348 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00034a 932a      	ST   -Y,R18
00034b 85ad      	LDD  R26,Y+13
00034c 85be      	LDD  R27,Y+13+1
00034d 85ef      	LDD  R30,Y+15
00034e 89f8      	LDD  R31,Y+15+1
00034f 9509      	ICALL
000350 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000351 89e8      	LDD  R30,Y+16
000352 89f9      	LDD  R31,Y+16+1
000353 9734      	SBIW R30,4
000354 8be8      	STD  Y+16,R30
000355 8bf9      	STD  Y+16+1,R31
000356 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000357 85ad      	LDD  R26,Y+13
000358 85be      	LDD  R27,Y+13+1
000359 85ef      	LDD  R30,Y+15
00035a 89f8      	LDD  R31,Y+15+1
00035b 9509      	ICALL
00035c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
00035d 89a8      	LDD  R26,Y+16
00035e 89b9      	LDD  R27,Y+16+1
00035f 9614      	ADIW R26,4
000360 940e 038d 	CALL __GETW1P
000362 83ee      	STD  Y+6,R30
000363 83ff      	STD  Y+6+1,R31
000364 81ae      	LDD  R26,Y+6
000365 81bf      	LDD  R27,Y+6+1
000366 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000367 89a8      	LDD  R26,Y+16
000368 89b9      	LDD  R27,Y+16+1
000369 9614      	ADIW R26,4
00036a 940e 038d 	CALL __GETW1P
00036c 87ea      	STD  Y+10,R30
00036d 87fb      	STD  Y+10+1,R31
00036e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00036f 01de      	MOVW R26,R28
000370 961c      	ADIW R26,12
000371 940e 0380 	CALL __ADDW2R15
000373 940e 038d 	CALL __GETW1P
000375 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000376 9610      	adiw r26,0
000377 f039      	breq __delay_ms1
                 __delay_ms0:
000378 95a8      	wdr
                +
000379 ef8a     +LDI R24 , LOW ( 0xFA )
00037a e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00037b 9701     +SBIW R24 , 1
00037c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
00037d 9711      	sbiw r26,1
00037e f7c9      	brne __delay_ms0
                 __delay_ms1:
00037f 9508      	ret
                 
                 __ADDW2R15:
000380 2400      	CLR  R0
000381 0daf      	ADD  R26,R15
000382 1db0      	ADC  R27,R0
000383 9508      	RET
                 
                 __ANEGW1:
000384 95f1      	NEG  R31
000385 95e1      	NEG  R30
000386 40f0      	SBCI R31,0
000387 9508      	RET
                 
                 __CWD1:
000388 2f6f      	MOV  R22,R31
000389 0f66      	ADD  R22,R22
00038a 0b66      	SBC  R22,R22
00038b 2f76      	MOV  R23,R22
00038c 9508      	RET
                 
                 __GETW1P:
00038d 91ed      	LD   R30,X+
00038e 91fc      	LD   R31,X
00038f 9711      	SBIW R26,1
000390 9508      	RET
                 
                 __GETW1PF:
000391 9005      	LPM  R0,Z+
000392 91f4      	LPM  R31,Z
000393 2de0      	MOV  R30,R0
000394 9508      	RET
                 
                 __PUTPARD1:
000395 937a      	ST   -Y,R23
000396 936a      	ST   -Y,R22
000397 93fa      	ST   -Y,R31
000398 93ea      	ST   -Y,R30
000399 9508      	RET
                 
                 __SAVELOCR6:
00039a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00039b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00039c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00039d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00039e 931a      	ST   -Y,R17
00039f 930a      	ST   -Y,R16
0003a0 9508      	RET
                 
                 __LOADLOCR6:
0003a1 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003a2 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003a3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003a4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003a5 8119      	LDD  R17,Y+1
0003a6 8108      	LD   R16,Y
0003a7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   5 r5 :   2 r6 :   6 r7 :   1 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   3 r26: 100 r27:  39 r28:  14 r29:   1 r30: 202 r31:  62 
x  :  23 y  : 170 z  :  15 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  58 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   3 cpi   :  33 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  25 ld    :  25 ldd   :  77 ldi   :  99 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :  22 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  42 pop   :   1 push  :   1 rcall :  15 ret   :  26 
reti  :   0 rjmp  :  62 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   6 sbic  :   3 sbis  :   0 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  63 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000750   1818     54   1872   16384  11.4%
[.dseg] 0x000060 0x000174      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
